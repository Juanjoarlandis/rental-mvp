{
    "rental-mvp/estructura_directorios.json": "[\n    {\n        \"name\": \"rental-mvp\",\n        \"dirs\": [\n            {\n                \"name\": \"uploads\",\n                \"dirs\": [],\n                \"files\": [\n                    \"813d5d79-c6ed-4454-bcf8-cea86969abef.png\",\n                    \"3d304b92-4fce-4616-a08f-b74313d0008c.png\",\n                    \"2a373a03-bd9c-4d50-93bc-e546e44bd6f1.png\",\n                    \"41671a81-0d71-4490-9dd9-1629cd2811ee.png\",\n                    \"013d8629-ca65-48d5-85b5-44572aec0ab6.png\",\n                    \"282022c2-0d6d-4f87-bcc9-ecd08d43a362.png\",\n                    \"249e28c1-feb7-4a38-a488-3bea7af0c2fd.png\",\n                    \"570df2ae-13d6-4156-968d-6cde19da881d.png\",\n                    \"a08a849a-2bcf-4c62-8f50-320a0d3b843f.jpg\",\n                    \"ebefe732-4f9a-46dd-a033-8072611d8ad9.png\",\n                    \"f528fc74-9c61-432c-a79a-0eb5da4f6b76.png\",\n                    \"aa787f08-437e-4068-80bf-71d891088c56.png\",\n                    \"5ce5fe11-0cef-4e78-a78b-aa643b94a56d.png\"\n                ]\n            },\n            {\n                \"name\": \"frontend\",\n                \"dirs\": [\n                    {\n                        \"name\": \"src\",\n                        \"dirs\": [\n                            {\n                                \"name\": \"assets\",\n                                \"dirs\": [],\n                                \"files\": [\n                                    \"logo.png\"\n                                ]\n                            },\n                            {\n                                \"name\": \"hooks\",\n                                \"dirs\": [],\n                                \"files\": [\n                                    \"useAuth.tsx\"\n                                ]\n                            },\n                            {\n                                \"name\": \"styles\",\n                                \"dirs\": [],\n                                \"files\": [\n                                    \"global.css\"\n                                ]\n                            },\n                            {\n                                \"name\": \"features\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"auth\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"register.ts\",\n                                            \"login.ts\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"categories\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"useCategories.ts\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"items\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"useItems.ts\",\n                                            \"AddItemModal.tsx\",\n                                            \"ItemList.tsx\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"rentals\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"RentalList.tsx\",\n                                            \"useRentals.ts\"\n                                        ]\n                                    }\n                                ],\n                                \"files\": []\n                            },\n                            {\n                                \"name\": \"pages\",\n                                \"dirs\": [],\n                                \"files\": [\n                                    \"Register.tsx\",\n                                    \"Login.tsx\",\n                                    \"Dashboard.tsx\",\n                                    \"Home.tsx\"\n                                ]\n                            },\n                            {\n                                \"name\": \"components\",\n                                \"dirs\": [\n                                    {\n                                        \"name\": \"ui\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"SkeletonCard.tsx\",\n                                            \"LazyImage.tsx\",\n                                            \"ItemCard.tsx\",\n                                            \"SearchBar.tsx\",\n                                            \"ItemDetailModal.tsx\",\n                                            \"SocialButton.tsx\",\n                                            \"QuickViewModal.tsx\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"shared\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"Section.tsx\",\n                                            \"Container.tsx\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"layout\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"Footer.tsx\",\n                                            \"Header.tsx\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"Home\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"FAQ.tsx\",\n                                            \"Stats.tsx\",\n                                            \"LogoCloud.tsx\",\n                                            \"Testimonials.tsx\"\n                                        ]\n                                    },\n                                    {\n                                        \"name\": \"filters\",\n                                        \"dirs\": [],\n                                        \"files\": [\n                                            \"FiltersSidebar.tsx\"\n                                        ]\n                                    }\n                                ],\n                                \"files\": []\n                            }\n                        ],\n                        \"files\": [\n                            \"App.tsx\",\n                            \"api.ts\",\n                            \"ErrorBoundary.tsx\",\n                            \"main.tsx\",\n                            \"utils.ts\",\n                            \"Protected.tsx\"\n                        ]\n                    }\n                ],\n                \"files\": [\n                    \"index.html\",\n                    \"package.json\",\n                    \"vite.config.ts\",\n                    \"Dockerfile\",\n                    \"nginx.conf\",\n                    \"tsconfig.json\",\n                    \"postcss.config.js\",\n                    \"tailwind.config.js\"\n                ]\n            },\n            {\n                \"name\": \"app\",\n                \"dirs\": [\n                    {\n                        \"name\": \"models\",\n                        \"dirs\": [],\n                        \"files\": [\n                            \"models.py\",\n                            \"__init__.py\",\n                            \"database.py\"\n                        ]\n                    },\n                    {\n                        \"name\": \"schemas\",\n                        \"dirs\": [],\n                        \"files\": [\n                            \"category.py\",\n                            \"rental.py\",\n                            \"token.py\",\n                            \"__init__.py\",\n                            \"item.py\",\n                            \"user.py\"\n                        ]\n                    },\n                    {\n                        \"name\": \"crud\",\n                        \"dirs\": [],\n                        \"files\": [\n                            \"category.py\",\n                            \"rental.py\",\n                            \"__init__.py\",\n                            \"item.py\",\n                            \"user.py\"\n                        ]\n                    },\n                    {\n                        \"name\": \"core\",\n                        \"dirs\": [],\n                        \"files\": [\n                            \"config.py\",\n                            \"security.py\"\n                        ]\n                    },\n                    {\n                        \"name\": \"api\",\n                        \"dirs\": [],\n                        \"files\": [\n                            \"rentals.py\",\n                            \"items.py\",\n                            \"categories.py\",\n                            \"auth.py\",\n                            \"__init__.py\",\n                            \"upload.py\"\n                        ]\n                    }\n                ],\n                \"files\": [\n                    \"main.py\",\n                    \"deps.py\"\n                ]\n            },\n            {\n                \"name\": \"tests\",\n                \"dirs\": [],\n                \"files\": [\n                    \"test_api.py\",\n                    \"conftest.py\"\n                ]\n            },\n            {\n                \"name\": \".pytest_cache\",\n                \"dirs\": [\n                    {\n                        \"name\": \"v\",\n                        \"dirs\": [\n                            {\n                                \"name\": \"cache\",\n                                \"dirs\": [],\n                                \"files\": [\n                                    \"nodeids\",\n                                    \"lastfailed\"\n                                ]\n                            }\n                        ],\n                        \"files\": []\n                    }\n                ],\n                \"files\": [\n                    \".gitignore\",\n                    \"README.md\",\n                    \"CACHEDIR.TAG\"\n                ]\n            },\n            {\n                \"name\": \"backend\",\n                \"dirs\": [],\n                \"files\": [\n                    \"Dockerfile\"\n                ]\n            }\n        ],\n        \"files\": [\n            \"estructura_directorios.json\",\n            \"requirements.txt\",\n            \"package.json\",\n            \".gitignore\",\n            \"docker-compose.prod.yml\",\n            \"pytest.ini\",\n            \".env\",\n            \"rental.db\",\n            \"alembic.ini\"\n        ]\n    }\n]",
    "rental-mvp/requirements.txt": "# rental-mvp/requirements.txt\nalembic==1.16.3\nannotated-types==0.7.0\nanyio==4.9.0\nbcrypt==3.2.2  \ncffi==1.17.1\nclick==8.2.1\ncryptography==45.0.5\necdsa==0.19.1\nexceptiongroup==1.3.0\nfastapi==0.116.0\ngreenlet==3.2.3\nh11==0.16.0\nhttptools==0.6.4\nidna==3.10\nMako==1.3.10\nMarkupSafe==3.0.2\npasslib==1.7.4\npyasn1==0.6.1\npycparser==2.22\npydantic==2.11.7\npydantic-core==2.33.2\npydantic-settings==2.10.1\npython-dotenv==1.1.1\npython-jose[cryptography]==3.5.0\npython-multipart==0.0.6\nPyYAML==6.0.2\nrsa==4.9.1\nsix==1.17.0\nsniffio==1.3.1\nSQLAlchemy==2.0.41\nstarlette==0.46.2\ntomli==2.2.1\ntyping-inspection==0.4.1\ntyping-extensions==4.14.1\nuvicorn==0.35.0\nuvloop==0.21.0\nwatchfiles==1.1.0\nwebsockets==15.0.1\nemail-validator\npytest>=7.4\nhttpx>=0.27",
    "rental-mvp/package.json": "{\n  \"devDependencies\": {\n    \"@tailwindcss/container-queries\": \"^0.1.1\"\n  }\n}\n",
    "rental-mvp/.gitignore": "backend/__pycache__/\n__pycache__/\n",
    "rental-mvp/docker-compose.prod.yml": "version: \"3.9\"\n\nservices:\n  backend:\n    build:\n      context: .\n      dockerfile: backend/Dockerfile\n    env_file: .env\n    volumes:\n      - uploads:/app/uploads          # imágenes persisten\n      - ./rental.db:/app/rental.db    # sqlite fuera de la imagen\n    restart: unless-stopped\n\n  frontend:\n    build:\n      context: ./frontend             # ← nuevo contexto\n      dockerfile: Dockerfile          # (vive dentro de frontend/)\n    depends_on:\n      - backend\n    ports:\n      - \"80:80\"                       # expone HTTP\n    restart: unless-stopped\n\nvolumes:\n  uploads:\n",
    "rental-mvp/pytest.ini": "# pytest.ini\n[pytest]\npythonpath = .\naddopts = -q\n",
    "rental-mvp/.env": "# .env (en la raíz)\nDATABASE_URL=sqlite:///./rental.db\nSECRET_KEY=tu_clave_super_secreta_aleatoria\n",
    "rental-mvp/alembic.ini": "# A generic, single database configuration.\n\n[alembic]\n# path to migration scripts.\n# this is typically a path given in POSIX (e.g. forward slashes)\n# format, relative to the token %(here)s which refers to the location of this\n# ini file\nscript_location = %(here)s/alembic\n\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\n# Uncomment the line below if you want the files to be prepended with date and time\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\n# for all available tokens\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.  for multiple paths, the path separator\n# is defined by \"path_separator\" below.\nprepend_sys_path = .\n\n\n# timezone to use when rendering the date within the migration file\n# as well as the filename.\n# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.\n# Any required deps can installed by adding `alembic[tz]` to the pip requirements\n# string value is passed to ZoneInfo()\n# leave blank for localtime\n# timezone =\n\n# max length of characters to apply to the \"slug\" field\n# truncate_slug_length = 40\n\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n\n# version location specification; This defaults\n# to <script_location>/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path.\n# The path separator used here should be the separator specified by \"path_separator\"\n# below.\n# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions\n\n# path_separator; This indicates what character is used to split lists of file\n# paths, including version_locations and prepend_sys_path within configparser\n# files such as alembic.ini.\n# The default rendered in new alembic.ini files is \"os\", which uses os.pathsep\n# to provide os-dependent path splitting.\n#\n# Note that in order to support legacy alembic.ini files, this default does NOT\n# take place if path_separator is not present in alembic.ini.  If this\n# option is omitted entirely, fallback logic is as follows:\n#\n# 1. Parsing of the version_locations option falls back to using the legacy\n#    \"version_path_separator\" key, which if absent then falls back to the legacy\n#    behavior of splitting on spaces and/or commas.\n# 2. Parsing of the prepend_sys_path option falls back to the legacy\n#    behavior of splitting on spaces, commas, or colons.\n#\n# Valid values for path_separator are:\n#\n# path_separator = :\n# path_separator = ;\n# path_separator = space\n# path_separator = newline\n#\n# Use os.pathsep. Default configuration used for new projects.\npath_separator = os\n\n# set to 'true' to search source files recursively\n# in each \"version_locations\" directory\n# new in Alembic version 1.10\n# recursive_version_locations = false\n\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\n\n# database URL.  This is consumed by the user-maintained env.py script only.\n# other means of configuring database URLs may be customized within the env.py\n# file.\nsqlalchemy.url = sqlite:///./rental.db\n\n\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks = black\n# black.type = console_scripts\n# black.entrypoint = black\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\n\n# lint with attempts to fix using \"ruff\" - use the module runner, against the \"ruff\" module\n# hooks = ruff\n# ruff.type = module\n# ruff.module = ruff\n# ruff.options = check --fix REVISION_SCRIPT_FILENAME\n\n# Alternatively, use the exec runner to execute a binary found on your PATH\n# hooks = ruff\n# ruff.type = exec\n# ruff.executable = ruff\n# ruff.options = check --fix REVISION_SCRIPT_FILENAME\n\n# Logging configuration.  This is also consumed by the user-maintained\n# env.py script only.\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARNING\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARNING\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n",
    "rental-mvp/frontend/index.html": "<!DOCTYPE html>\n<html lang=\"es\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n    <title>Rental-MVP</title>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n  <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n",
    "rental-mvp/frontend/package.json": "{\n  \"name\": \"rental-mvp-frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\",\n    \"lint\": \"eslint \\\"src/**/*.{ts,tsx}\\\" --max-warnings=0 --fix\"\n  },\n  \"dependencies\": {\n    \"@headlessui/react\": \"^2.2.4\",\n    \"@heroicons/react\": \"^2.2.0\",\n    \"@hookform/resolvers\": \"^3.3.4\",\n    \"@tanstack/react-query\": \"^5.38.0\",\n    \"axios\": \"^1.6.8\",\n    \"clsx\": \"^2.1.1\",\n    \"focus-trap-react\": \"^10.2.1\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.60.0\",\n    \"react-hot-toast\": \"^2.5.2\",\n    \"react-icons\": \"^5.5.0\",\n    \"react-router-dom\": \"^6.23.1\",\n    \"zod\": \"^3.23.4\",\n    \"zxcvbn\": \"^4.4.2\"\n  },\n  \"devDependencies\": {\n    \"@tailwindcss/container-queries\": \"\",\n    \"@tailwindcss/forms\": \"^0.5.10\",\n    \"@tailwindcss/line-clamp\": \"^0.4.4\",\n    \"@tailwindcss/typography\": \"^0.5.16\",\n    \"@types/react\": \"^18.3.5\",\n    \"@types/react-dom\": \"^18.3.2\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.18.0\",\n    \"@typescript-eslint/parser\": \"^7.18.0\",\n    \"@vitejs/plugin-react\": \"^4.2.0\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-plugin-react\": \"^7.34.1\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"postcss\": \"^8.4.38\",\n    \"tailwindcss\": \"^3.4.4\",\n    \"typescript\": \"^5.5.0\",\n    \"vite\": \"^5.3.1\"\n  }\n}\n",
    "rental-mvp/frontend/vite.config.ts": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 5173,\n    proxy: {\n      // ► redirige API a tu back (FastAPI en :8000)\n      \"/api\": \"http://localhost:8000\"\n    }\n  }\n});\n",
    "rental-mvp/frontend/Dockerfile": "# ───────────── Etapa 1: build Vite ─────────────\nFROM node:20 AS builder\nWORKDIR /frontend\n\nCOPY package.json package-lock.json* ./\nRUN npm ci\n\nCOPY . .\nRUN npm run build          # genera /frontend/dist\n\n# ───────────── Etapa 2: Nginx ─────────────\nFROM nginx:1.27-alpine\n\n# Copia estáticos compilados\nCOPY --from=builder /frontend/dist /usr/share/nginx/html\n\n# Proxy /api → backend\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n",
    "rental-mvp/frontend/nginx.conf": "server {\n    listen 80;\n    server_name _;\n\n    # estáticos de Vite\n    root /usr/share/nginx/html;\n    index index.html;\n    client_max_body_size 100M; \n\n    # single-page\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n    # proxy API\n    location /api/ {\n        proxy_pass http://backend:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    # subidas\n    location /uploads/ {\n        proxy_pass http://backend:8000;\n    }\n}\n",
    "rental-mvp/frontend/tsconfig.json": "{\n    \"compilerOptions\": {\n        \"target\": \"ES2022\",\n        \"lib\": [\n            \"DOM\",\n            \"DOM.Iterable\",\n            \"ES2022\"\n        ],\n        \"module\": \"ESNext\",\n        \"moduleResolution\": \"Node\",\n        \"types\": [\n            \"vite/client\"\n        ],\n        \"strict\": true,\n        \"jsx\": \"react-jsx\",\n        \"resolveJsonModule\": true,\n        \"esModuleInterop\": true,\n        \"skipLibCheck\": true,\n        \"forceConsistentCasingInFileNames\": true\n    },\n    \"include\": [\n        \"src\"\n    ]\n}",
    "rental-mvp/frontend/postcss.config.js": "// rental-mvp/frontend/postcss.config.js\nexport default {\n    plugins: {\n        tailwindcss: {},\n        autoprefixer: {}\n    }\n};\n",
    "rental-mvp/frontend/tailwind.config.js": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    content: ['./index.html', './src/**/*.{ts,tsx}'],\n    theme: {\n        //   ↓↓↓ breakpoints fluidos\n        screens: {\n            xs: '375px',\n            sm: '640px',\n            md: '768px',\n            lg: '1024px',\n            xl: '1280px',\n            '2xl': '1440px',\n            '3xl': '1920px'\n        },\n        container: { center: true, padding: '1rem' },\n        extend: {\n            fontFamily: { sans: ['Inter', 'system-ui', 'sans-serif'] },\n            colors: {\n                brand: { DEFAULT: '#0d6efd', hover: '#0b5ed7' },\n                surface: '#ffffff'\n            },\n            boxShadow: {\n                card: '0 1px 3px rgba(0,0,0,.08)',\n                cardHover: '0 4px 12px rgba(0,0,0,.12)'\n            }\n        }\n    },\n    plugins: [\n        require('@tailwindcss/forms'),\n        require('@tailwindcss/typography'),\n        require('@tailwindcss/line-clamp'),\n        require('@tailwindcss/container-queries') // 🆕\n    ]\n};\n",
    "rental-mvp/frontend/src/App.tsx": "import { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Suspense } from \"react\";\n\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { AuthProvider } from \"./hooks/useAuth\";\n\nimport Header from \"./components/layout/Header\";\nimport Footer from \"./components/layout/Footer\";\n\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Protected from \"./Protected\";\n\nimport \"./styles/global.css\";\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <BrowserRouter>\n          <ErrorBoundary>\n            <Header />\n\n            <Suspense\n              fallback={\n                <p className=\"py-32 text-center text-gray-500\">Cargando…</p>\n              }\n            >\n              <Routes>\n                <Route path=\"/\" element={<Home />} />\n                <Route path=\"/login\" element={<Login />} />\n                <Route path=\"/register\" element={<Register />} />\n\n                {/*  RUTA SEGURA  */}\n                <Route\n                  path=\"/dashboard\"\n                  element={\n                    <Protected>\n                      <Dashboard />\n                    </Protected>\n                  }\n                />\n              </Routes>\n            </Suspense>\n\n            <Footer />\n          </ErrorBoundary>\n        </BrowserRouter>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n",
    "rental-mvp/frontend/src/api.ts": "import axios from \"axios\";\n\n/**\n * Singleton Axios con:\n *  · baseURL \"/api\"\n *  · Authorization automático si hay token en localStorage\n */\nexport const api = axios.create({ baseURL: \"/api\" });\n\napi.interceptors.request.use(cfg => {\n  const token = localStorage.getItem(\"token\");\n  if (token) cfg.headers.Authorization = `Bearer ${token}`;\n  return cfg;\n});\n",
    "rental-mvp/frontend/src/ErrorBoundary.tsx": "import React, { ErrorInfo, ReactNode } from \"react\";\n\ntype Props = { children: ReactNode };\ntype State = { hasError: boolean };\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  state: State = { hasError: false };\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    // Aquí podrías enviar logs a Sentry, LogRocket, etc.\n    console.error(\"⛔ Unhandled error:\", error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <main className=\"flex min-h-[60vh] items-center justify-center\">\n          <p className=\"rounded-md bg-red-50 p-6 text-center text-lg text-red-600 shadow\">\n            ¡Ups! Algo ha ido mal.<br />\n            Intenta recargar la página.\n          </p>\n        </main>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n",
    "rental-mvp/frontend/src/main.tsx": "// src/main.tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { Toaster } from 'react-hot-toast';          // 🆕\nimport './styles/global.css';\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <App />\n    <Toaster                                         // 🆕\n      position=\"top-right\"\n      toastOptions={{\n        style: { fontSize: '0.875rem' },            // 14 px\n        duration: 3000\n      }}\n    />\n  </React.StrictMode>\n);\n",
    "rental-mvp/frontend/src/utils.ts": "// utils.ts\n/**\n * URL base de la API.  Ajusta en .env.local si no usas localhost:8000\n *   VITE_API_BASE_URL=https://tu-dominio.com\n */\nexport const API_BASE =\n  import.meta.env.VITE_API_BASE_URL ?? \"http://localhost:8000\";\n\n/**  \n * Devuelve una URL de imagen válida.\n * - Si ya es absoluta → la deja tal cual.\n * - Si empieza por “/” → la concatena con API_BASE.\n * - Si viene `undefined` → usa el *fallback*.\n */\nexport function resolveImage(url: string | undefined, fallback: string) {\n  if (!url) return fallback;\n  if (/^https?:\\/\\//i.test(url)) return url; // absoluta\n  return `${API_BASE}${url.startsWith(\"/\") ? \"\" : \"/\"}${url}`;\n}\n",
    "rental-mvp/frontend/src/Protected.tsx": "import { Navigate, useLocation } from \"react-router-dom\";\nimport { useAuth } from \"./hooks/useAuth\";\n\nexport default function Protected({ children }: { children: JSX.Element }) {\n  const { token } = useAuth();\n  const loc = useLocation();\n  return token ? children : <Navigate to=\"/login\" replace state={{ from: loc }} />;\n}\n",
    "rental-mvp/frontend/src/hooks/useAuth.tsx": "import React, { createContext, useContext, useState } from \"react\";\n\n/* ------------------------------------------------------------------ */\n/*                       Contexto & proveedor                         */\n/* ------------------------------------------------------------------ */\ntype AuthContextT = {\n  token: string | null;\n  login: (t: string) => void;\n  logout: () => void;\n};\nconst AuthContext = createContext<AuthContextT | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n  children\n}) => {\n  const [token, setToken] = useState<string | null>(\n    () => localStorage.getItem(\"token\")\n  );\n\n  const login = (t: string) => {\n    localStorage.setItem(\"token\", t);\n    setToken(t);\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setToken(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ token, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n/* ------------------------------------------------------------------ */\n/*                           Hooks util                               */\n/* ------------------------------------------------------------------ */\nexport const useAuth = () => {\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error(\"useAuth debe usarse dentro de <AuthProvider>\");\n  return ctx;\n};\n\n/** Lee el token directo de localStorage (válido fuera de React). */\nexport const getTokenLS = () => localStorage.getItem(\"token\");\n",
    "rental-mvp/frontend/src/styles/global.css": "/* frontend/src/styles/global.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* ---------- BASE ---------- */\n@layer base {\n  html { @apply scroll-smooth; }\n  body { @apply bg-gray-50 text-gray-800 antialiased font-sans; }\n}\n\n/* ---------- COMPONENTS ---------- */\n@layer components {\n  /* Botones */\n  .btn        { @apply inline-flex items-center justify-center rounded-md bg-brand px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors hover:bg-brand-hover disabled:opacity-60; }\n  .btn--ghost { @apply inline-flex items-center justify-center rounded-md border border-brand px-4 py-2 text-sm font-medium text-brand transition-colors hover:bg-brand/5; }\n\n  /* Badges */\n  .badge         { @apply inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium; }\n  .badge--ok     { @apply badge bg-green-100 text-green-800; }\n  .badge--danger { @apply badge bg-red-100 text-red-800; }\n\n  /* Campos select genérico */\n  .form-select { @apply block w-full rounded-md border-gray-300 text-sm shadow-sm focus:border-brand focus:ring-brand; }\n\n  /* Toast */\n  .toast-success { @apply bg-green-600 text-white; }\n  .toast-error   { @apply bg-red-600 text-white; }\n\n  /* Títulos fluidos (ejemplo h1) */\n  h1 { font-size: clamp(2.25rem, 5vw + 1rem, 3.5rem); } /* 36 px → 56 px aprox */\n}\n\n/* ---------- UTILITIES PERSONALIZADAS ---------- */\n@layer utilities {\n  .text-balance { text-wrap: balance; }\n\n  /* Evita re-pintados innecesarios en grandes listas */\n  .content-auto { content-visibility: auto; }\n\n  /* Oculta scrollbar (usarlo con cuidado) */\n  .scrollbar-none::-webkit-scrollbar { display: none; }\n}\n",
    "rental-mvp/frontend/src/features/auth/register.ts": "import { api } from \"../../api\";\n\n/** Lanza 400 si el username o el email ya están en uso. */\nexport async function register(\n  username: string,\n  email: string,\n  password: string\n): Promise<void> {\n  await api.post(\"/auth/signup\", { username, email, password });\n}\n",
    "rental-mvp/frontend/src/features/auth/login.ts": "import { api } from \"../../api\";\n\nexport async function login(username: string, password: string): Promise<string> {\n  const { data } = await api.post(\n    \"/auth/token\",\n    new URLSearchParams({ username, password }),\n    { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\n  );\n  return data.access_token as string;\n}\n",
    "rental-mvp/frontend/src/features/categories/useCategories.ts": "import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"../../api\";\n\nexport type Category = { id: number; name: string };\n\nexport default function useCategories() {\n  const { data, isLoading } = useQuery<Category[]>({\n    queryKey: [\"categories\"],\n    queryFn: () => api.get<Category[]>(\"/categories/\").then(r => r.data),\n    staleTime: 5 * 60_000 // 5 min\n  });\n\n  return { data: data ?? [], loading: isLoading };\n}\n",
    "rental-mvp/frontend/src/features/items/useItems.ts": "import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"../../api\";\n\nexport type Item = {\n  id: number;\n  name: string;\n  description?: string;\n  price_per_h: number;\n  available: boolean;\n\n  /* ---- imágenes ---- */\n  /** 1 sola (compat.) */\n  image_url?: string;\n  /** varias (nuevo)   */\n  image_urls?: string[];\n\n  categories?: { id: number; name: string }[];\n};\n\nexport function useItems(params?: URLSearchParams) {\n  const queryKey = [\"items\", params?.toString() ?? \"\"];\n\n  const { data, isLoading, refetch } = useQuery<Item[]>({\n    queryKey,\n    queryFn: () =>\n      api.get<Item[]>(\"/items/\", { params }).then(r => r.data),\n    staleTime: 60_000 // 1 min sin refetch\n  });\n\n  return { data: data ?? [], loading: isLoading, refetch };\n}\n",
    "rental-mvp/frontend/src/features/items/AddItemModal.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/features/items/AddItemModal.tsx                                       */\n/* -------------------------------------------------------------------------- */\nimport { Fragment, useEffect, useState } from 'react';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { XMarkIcon, PhotoIcon, TrashIcon } from '@heroicons/react/24/outline';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport toast from 'react-hot-toast';\n\nimport useCategories, { Category } from '../categories/useCategories';\nimport { useAuth } from '../../hooks/useAuth';\nimport { api } from '../../api';\n\n/* -------------------------------------------------------------------------- */\n/*                               schema + types                               */\n/* -------------------------------------------------------------------------- */\n\nconst MB = 1024 * 1024;\nconst MAX_IMAGES = 6;\n\nconst priceRegex = /^\\d+([.,]\\d{1,2})?$/; // hasta 2 decimales\n\nconst schema = z.object({\n  name: z.string().min(3, 'Mínimo 3 caracteres'),\n  description: z.string().max(500).optional(),\n  price_per_h: z\n    .string()\n    .regex(priceRegex, 'Precio inválido')\n    .transform(v => Number(v.replace(',', '.'))),\n  categories: z.array(z.number()).min(1, 'Selecciona al menos una categoría'),\n  images: z\n    .array(\n      z\n        .instanceof(File)\n        .refine(f => f.size <= 5 * MB, 'Cada imagen máx. 5 MB')\n    )\n    .min(1, 'Al menos 1 imagen')\n    .max(MAX_IMAGES, `Máx. ${MAX_IMAGES} imágenes`)\n});\n\ntype FormData = z.infer<typeof schema>;\n\ntype Props = {\n  open: boolean;\n  onClose: () => void;\n  onCreated: () => void; // callback para refrescar listado\n};\n\n/* -------------------------------------------------------------------------- */\n/*                           Componente principal                             */\n/* -------------------------------------------------------------------------- */\nexport default function AddItemModal({ open, onClose, onCreated }: Props) {\n  const { data: cats } = useCategories();\n  const { token } = useAuth();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    reset,\n    setValue,\n    formState: { errors, isSubmitting }\n  } = useForm<FormData>({\n    resolver: zodResolver(schema),\n    defaultValues: { categories: [], images: [] }\n  });\n\n  /* --------------------------- previews dinámicos -------------------------- */\n  const files = watch('images'); // File[]\n  const [previews, setPreviews] = useState<string[]>([]);\n\n  useEffect(() => {\n    const urls = files.map(f => URL.createObjectURL(f));\n    setPreviews(urls);\n    return () => urls.forEach(URL.revokeObjectURL); // cleanup\n  }, [files]);\n\n  /* ------------------------------- submit --------------------------------- */\n  async function onSubmit(data: FormData) {\n    if (!token) {\n      toast.error('Debes haber iniciado sesión');\n      return;\n    }\n\n    try {\n      /* 1.- subimos imágenes (paralelo) */\n      let image_urls: string[] = [];\n      if (data.images.length) {\n        const uploads = await Promise.all(\n          data.images.map(async img => {\n            const fd = new FormData();\n            fd.append('file', img);\n            const r = await api.post<{ url: string }>('/upload/', fd, {\n              headers: { 'Content-Type': 'multipart/form-data' }\n            });\n            return r.data.url;\n          })\n        );\n        image_urls = uploads;\n      }\n\n      /* 2.- creamos ítem */\n      await api.post('/items/', {\n        name: data.name,\n        description: data.description,\n        price_per_h: data.price_per_h,\n        categories: data.categories,\n        image_urls           // 🔥 ahora array\n      });\n\n      toast.success('¡Producto publicado!');\n      reset();\n      onCreated();\n      onClose();\n    } catch (err: any) {\n      console.error(err);\n      toast.error(err.response?.data?.detail ?? 'Error al crear producto');\n    }\n  }\n\n  /* ------------------------------------------------------------------------ */\n  /*                                   UI                                     */\n  /* ------------------------------------------------------------------------ */\n  return (\n    <Transition show={open} as={Fragment}>\n      <Dialog\n        onClose={() => {\n          reset();\n          onClose();\n        }}\n        className=\"relative z-50\"\n      >\n        {/* ---------- Backdrop ---------- */}\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-200\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-150\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black/40 backdrop-blur-sm\" />\n        </Transition.Child>\n\n        {/* ---------- Wrapper ---------- */}\n        <div className=\"fixed inset-0 grid place-items-center p-4\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-200\"\n            enterFrom=\"scale-95 opacity-0\"\n            enterTo=\"scale-100 opacity-100\"\n            leave=\"ease-in duration-150\"\n            leaveFrom=\"scale-100 opacity-100\"\n            leaveTo=\"scale-95 opacity-0\"\n          >\n            <Dialog.Panel className=\"flex w-full max-w-2xl max-h-[90vh] flex-col overflow-x-hidden rounded-xl bg-white shadow-xl\">\n              {/* ---------- Header ---------- */}\n              <header className=\"flex items-center justify-between border-b px-6 py-4\">\n                <Dialog.Title className=\"text-lg font-semibold\">\n                  Nuevo producto\n                </Dialog.Title>\n                <button\n                  type=\"button\"\n                  className=\"rounded p-1 text-gray-500 hover:bg-gray-100\"\n                  onClick={() => {\n                    reset();\n                    onClose();\n                  }}\n                >\n                  <XMarkIcon className=\"h-5 w-5\" />\n                </button>\n              </header>\n\n              {/* ---------- Form (scrollable) ---------- */}\n              <form\n                onSubmit={handleSubmit(onSubmit)}\n                className=\"grid flex-1 grid-cols-1 gap-6 overflow-y-auto px-6 py-8 md:grid-cols-2\"\n              >\n                {/* --------------------------- Columna 1 --------------------------- */}\n                <div className=\"space-y-4\">\n                  {/* Nombre */}\n                  <div>\n                    <label className=\"block text-sm font-medium\">Nombre</label>\n                    <input\n                      {...register('name')}\n                      className=\"form-input mt-1 w-full\"\n                      placeholder=\"Taladro Bosch 800 W\"\n                    />\n                    {errors.name && (\n                      <p className=\"text-xs text-red-600\">\n                        {errors.name.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Descripción */}\n                  <div>\n                    <label className=\"block text-sm font-medium\">\n                      Descripción\n                    </label>\n                    <textarea\n                      {...register('description')}\n                      rows={5}\n                      className=\"form-input mt-1 w-full resize-none\"\n                      placeholder=\"Añade detalles técnicos, estado, accesorios incluidos…\"\n                    />\n                    {errors.description && (\n                      <p className=\"text-xs text-red-600\">\n                        {errors.description.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Precio */}\n                  <div>\n                    <label className=\"block text-sm font-medium\">\n                      Precio / hora (€)\n                    </label>\n                    <input\n                      {...register('price_per_h')}\n                      className=\"form-input mt-1 w-full\"\n                      placeholder=\"3.5\"\n                      inputMode=\"decimal\"\n                    />\n                    {errors.price_per_h && (\n                      <p className=\"text-xs text-red-600\">\n                        {errors.price_per_h.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                {/* --------------------------- Columna 2 --------------------------- */}\n                <div className=\"space-y-4\">\n                  {/* Imágenes */}\n                  <div>\n                    <label className=\"block text-sm font-medium\">\n                      Imágenes ({files.length}/{MAX_IMAGES})\n                    </label>\n\n                    {/* zona de drop / input */}\n                    <label className=\"mt-1 flex min-h-[4rem] w-full cursor-pointer flex-col items-center justify-center rounded border-2 border-dashed border-gray-300 p-4 text-center text-sm text-gray-500 hover:border-brand hover:text-brand\">\n                      <PhotoIcon className=\"h-8 w-8\" />\n                      <span className=\"mt-1\">\n                        PNG, JPG · máx. 5 MB c/u · hasta {MAX_IMAGES}\n                      </span>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        multiple\n                        className=\"sr-only\"\n                        onChange={e =>\n                          setValue(\n                            'images',\n                            [...(e.target.files ?? [])] as File[],\n                            { shouldValidate: true }\n                          )\n                        }\n                      />\n                    </label>\n\n                    {/* previews */}\n                    {previews.length > 0 && (\n                      <div className=\"mt-4 grid grid-cols-3 gap-2\">\n                        {previews.map((src, i) => (\n                          <div key={i} className=\"relative\">\n                            <img\n                              src={src}\n                              alt={`preview ${i + 1}`}\n                              className=\"h-24 w-full rounded object-cover\"\n                            />\n                            <button\n                              type=\"button\"\n                              title=\"Eliminar\"\n                              onClick={() => {\n                                const copy = [...files];\n                                copy.splice(i, 1);\n                                setValue('images', copy, { shouldValidate: true });\n                              }}\n                              className=\"absolute right-0 top-0 rounded-bl bg-black/60 p-0.5 text-white transition-colors hover:bg-black/80\"\n                            >\n                              <TrashIcon className=\"h-4 w-4\" />\n                            </button>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    {errors.images && (\n                      <p className=\"mt-1 text-xs text-red-600\">\n                        {errors.images.message as string}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Categorías */}\n                  <div>\n                    <p className=\"mb-1 text-sm font-medium\">Categorías</p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {cats.map((c: Category) => {\n                        const selected = watch('categories').includes(c.id);\n                        return (\n                          <button\n                            type=\"button\"\n                            key={c.id}\n                            onClick={() => {\n                              const current = new Set(watch('categories'));\n                              selected\n                                ? current.delete(c.id)\n                                : current.add(c.id);\n                              setValue('categories', [...current]);\n                            }}\n                            className={\n                              selected\n                                ? 'rounded-full bg-brand px-3 py-0.5 text-xs text-white'\n                                : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'\n                            }\n                          >\n                            {c.name}\n                          </button>\n                        );\n                      })}\n                    </div>\n                    {errors.categories && (\n                      <p className=\"text-xs text-red-600\">\n                        {errors.categories.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                {/* --------------------------- Footer --------------------------- */}\n                <div className=\"md:col-span-2 flex justify-end gap-3\">\n                  <button\n                    type=\"button\"\n                    className=\"btn--ghost\"\n                    onClick={() => {\n                      reset();\n                      onClose();\n                    }}\n                  >\n                    Cancelar\n                  </button>\n                  <button className=\"btn\" disabled={isSubmitting}>\n                    {isSubmitting ? 'Publicando…' : 'Publicar'}\n                  </button>\n                </div>\n              </form>\n            </Dialog.Panel>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n",
    "rental-mvp/frontend/src/features/items/ItemList.tsx": "import { useEffect, useMemo, useRef, useState } from 'react';\nimport axios from 'axios';\nimport Container from '../../components/shared/Container';\nimport ItemCard from '../../components/ui/ItemCard';\nimport SkeletonCard from '../../components/ui/SkeletonCard';\nimport FiltersSidebar from '../../components/filters/FiltersSidebar';\nimport { useItems } from './useItems';\nimport { useAuth } from '../../hooks/useAuth';\nimport AddItemModal from './AddItemModal';\nimport { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';\n\n/* -------------------------------------------------- */\n/*                    Tipado filtros                  */\n/* -------------------------------------------------- */\ntype FiltersT = {\n  name?: string;\n  min_price?: number;\n  max_price?: number;\n  categories?: number[];\n  order?: 'price_asc' | 'price_desc' | 'name';\n};\n\nexport default function ItemList() {\n  /* ------------------------------ filtros ------------------------------ */\n  const [filters, setFilters] = useState<FiltersT>({});\n\n  /* Serializamos filtros → query-string */\n  const params = useMemo(() => {\n    const p = new URLSearchParams();\n\n    Object.entries(filters).forEach(([k, v]) => {\n      if (v === undefined || v === '') return;\n      if (Array.isArray(v)) v.forEach(val => p.append(k, String(val)));\n      else p.set(k, String(v));\n    });\n\n    /* orden (price_asc | price_desc | name) */\n    if (filters.order) {\n      const [field, dir] = filters.order.split('_');\n      p.set('order_by', field === 'price' ? 'price' : 'name');\n      p.set('order_dir', dir);\n    }\n    return p;\n  }, [filters]);\n\n  const { data: items, loading, refetch } = useItems(params);\n  const { token } = useAuth();\n\n  /* ----------------------- drawer móvil filtros ----------------------- */\n  const [openFilters, setOpenFilters] = useState(false);\n\n  /* ------------------------ infinite-scroll demo ---------------------- */\n  const sentinel = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!sentinel.current) return;\n    const ob = new IntersectionObserver(\n      entries => {\n        if (entries[0].isIntersecting && !loading) {\n          /* Aquí podrías paginar → aumentar offset y refetch() */\n        }\n      },\n      { rootMargin: '600px' }\n    );\n    ob.observe(sentinel.current);\n    return () => ob.disconnect();\n  }, [loading]);\n\n  /* ----------------------- modal “añadir ítem” ------------------------ */\n  const [addOpen, setAddOpen] = useState(false);\n\n  /* -------------------------------------------------------------------- */\n  return (\n    <Container>\n      {/* ---------- botón abrir filtros (solo xs-sm) ---------- */}\n      <button onClick={() => setOpenFilters(true)} className=\"btn mb-4 md:hidden\">\n        <Bars3Icon className=\"mr-2 h-5 w-5\" />\n        Filtros\n      </button>\n\n      <div className=\"flex flex-col gap-10 md:flex-row\">\n        {/* ---------- Filtros (off-canvas en móvil) ---------- */}\n        {/* Backdrop */}\n        <div\n          className={`\n            fixed inset-0 z-40 bg-black/40 backdrop-blur-sm transition-opacity md:hidden\n            ${openFilters ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'}\n          `}\n          onClick={() => setOpenFilters(false)}\n        />\n\n        {/* Panel */}\n        <aside\n          className={`\n            fixed left-0 top-0 z-50 h-full w-72 bg-white p-6 shadow-xl transition-transform\n            md:static md:h-auto md:w-auto md:translate-x-0 md:bg-transparent md:shadow-none\n            ${openFilters ? 'translate-x-0' : '-translate-x-full'}\n          `}\n        >\n          {/* Cerrar (solo móvil) */}\n          <button onClick={() => setOpenFilters(false)} className=\"mb-4 md:hidden\">\n            <XMarkIcon className=\"h-6 w-6\" />\n          </button>\n\n          <FiltersSidebar\n            value={filters}\n            onChange={setFilters}\n            onReset={() => setFilters({})}\n          />\n        </aside>\n\n        {/* -------------------- listado de tarjetas -------------------- */}\n        <section className=\"flex-1\">\n          {/* CTA añadir producto (solo usuarios logueados) */}\n          {token && (\n            <div className=\"flex justify-end\">\n              <button className=\"btn mb-4\" onClick={() => setAddOpen(true)}>\n                Añadir producto\n              </button>\n            </div>\n          )}\n\n          {/* loader inicial */}\n          {loading && !items.length ? (\n            <GridSkeleton />\n          ) : (\n            <Grid>\n              {items.map(it => (\n                <ItemCard key={it.id} item={it} />\n              ))}\n              {/* sentinel infinite-scroll */}\n              <div ref={sentinel} />\n            </Grid>\n          )}\n\n          {/* vacío */}\n          {!loading && !items.length && (\n            <p className=\"py-6 text-center text-gray-500\">No hay resultados.</p>\n          )}\n        </section>\n      </div>\n\n      {/* modal añadir */}\n      <AddItemModal open={addOpen} onClose={() => setAddOpen(false)} onCreated={refetch} />\n    </Container>\n  );\n}\n\n/* -------------------------------------------------- */\n/*                       Helpers                      */\n/* -------------------------------------------------- */\n\n/* Grid responsive: min-width 12 rem (≈192 px) y se\n   auto-ajusta con container-queries si el padre pasa\n   a ser un “container” — funciona también sin CQ. */\nconst Grid = ({ children }: { children: React.ReactNode }) => (\n  <div\n    className=\"\n      grid gap-6 py-6 content-auto\n      @container lg:[grid-template-columns:repeat(auto-fill,minmax(14rem,1fr))]\n      [grid-template-columns:repeat(auto-fill,minmax(12rem,1fr))]\n    \"\n  >\n    {children}\n  </div>\n);\n\nconst GridSkeleton = () => (\n  <Grid>\n    {Array.from({ length: 8 }).map((_, i) => (\n      <SkeletonCard key={i} />\n    ))}\n  </Grid>\n);\n",
    "rental-mvp/frontend/src/features/rentals/RentalList.tsx": "import { useAuth } from \"../../hooks/useAuth\";\nimport { useRentals } from \"./useRentals\";\n\nexport default function RentalList() {\n  const { token } = useAuth();\n  const { data: rentals, loading } = useRentals(token);   // ← sin cambios extra\n\n  if (!token)   return <p className=\"text-gray-500\">Debes iniciar sesión para ver tus alquileres.</p>;\n  if (loading)  return <p className=\"text-gray-500\">Cargando…</p>;\n  if (!rentals.length) return <p className=\"text-gray-500\">No tienes alquileres activos.</p>;\n\n  return (\n    <div className=\"space-y-2\">\n      {rentals.map(r => (\n        <div\n          key={r.id}\n          className=\"flex items-center justify-between rounded-md bg-white p-3 shadow\"\n        >\n          <span className=\"font-medium\">{r.item.name}</span>\n          <span className={r.returned ? \"badge--ok\" : \"badge badge--danger\"}>\n            {r.returned ? \"Devuelto\" : \"Pendiente\"}\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n}\n",
    "rental-mvp/frontend/src/features/rentals/useRentals.ts": "import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"../../api\";\nimport { Item } from \"../items/useItems\";\n\nexport type Rental = {\n  id: number;\n  item: Item;\n  start_at: string;\n  end_at: string;\n  deposit: number;\n  returned: boolean;\n};\n\n/**\n * Devuelve la lista de alquileres del usuario.  \n * Solo dispara la petición cuando `token` es *truthy*.\n */\nexport function useRentals(token: string | null) {\n  const enabled = Boolean(token);          // ← normalizamos\n\n  const { data, isLoading } = useQuery<Rental[]>({\n    queryKey: [\"rentals\"],\n    queryFn: () => api.get<Rental[]>(\"/rentals/me\").then(r => r.data),\n    enabled,                               // ✓ ahora siempre boolean\n    staleTime: 60_000,\n    retry: false\n  });\n\n  return { data: data ?? [], loading: isLoading };\n}\n",
    "rental-mvp/frontend/src/pages/Register.tsx": "// src/pages/Register.tsx\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport zxcvbn from \"zxcvbn\";\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport clsx from \"clsx\";\n\nimport { register as apiRegister } from \"../features/auth/register\";\nimport { login as apiLogin } from \"../features/auth/login\";\nimport { useAuth } from \"../hooks/useAuth\";\n\nimport Container from \"../components/shared/Container\";\nimport SocialButton from \"../components/ui/SocialButton\";\nimport { FcGoogle } from \"react-icons/fc\";\nimport { FaGithub } from \"react-icons/fa\";\n\n/* -------- validation schema -------- */\nconst schema = z\n  .object({\n    username: z.string().min(3, \"Mín. 3 caracteres\"),\n    email: z.string().email(\"Email inválido\"),\n    password: z.string().min(8, \"Mín. 8 caracteres\"),\n    confirm: z.string(),\n    terms: z.literal(true, {\n      errorMap: () => ({ message: \"Acepta los términos\" }),\n    }),\n  })\n  .refine(data => data.password === data.confirm, {\n    message: \"Las contraseñas no coinciden\",\n    path: [\"confirm\"],\n  });\n\ntype FormData = z.infer<typeof schema>;\n\nexport default function Register() {\n  const navigate = useNavigate();\n  const { login: saveToken } = useAuth();\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors, isSubmitting },\n  } = useForm<FormData>({ resolver: zodResolver(schema) });\n\n  const pwd = watch(\"password\", \"\");\n\n  /* -------------------------------------------------------------------- */\n  const onSubmit = async (data: FormData) => {\n    try {\n      // 1) signup\n      await apiRegister(data.username, data.email, data.password);\n\n      // 2) auto-login\n      const token = await apiLogin(data.username, data.password);\n      saveToken(token);\n\n      toast.success(\"Cuenta creada, ¡bienvenido!\");\n      navigate(\"/dashboard\");\n    } catch (err: any) {\n      // FastAPI devuelve detail en .response.data.detail\n      const msg =\n        err?.response?.data?.detail ??\n        \"No se pudo crear la cuenta. Inténtalo más tarde.\";\n      toast.error(msg);\n    }\n  };\n\n  /* -------------------------------------------------------------------- */\n  const strength = zxcvbn(pwd).score; // 0-4\n\n  return (\n    <Container>\n      <main className=\"flex min-h-[70vh] items-center justify-center\">\n        <div className=\"w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card\">\n          <h1 className=\"text-center text-2xl font-bold\">Crear cuenta</h1>\n\n          {/* ───── login social ───── */}\n          <div className=\"space-y-3\">\n            <SocialButton provider=\"google\" icon={FcGoogle} label=\"Con Google\" />\n            <SocialButton provider=\"github\" icon={FaGithub} label=\"Con GitHub\" />\n          </div>\n\n          <div className=\"relative text-xs text-gray-400\">\n            <hr />\n            <span className=\"absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-2\">\n              o regístrate con email\n            </span>\n          </div>\n\n          {/* ───── formulario ───── */}\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n            <input\n              {...register(\"username\")}\n              placeholder=\"Nombre de usuario\"\n              className=\"form-input w-full\"\n            />\n            {errors.username && (\n              <p className=\"text-xs text-red-600\">{errors.username.message}</p>\n            )}\n\n            <input\n              {...register(\"email\")}\n              type=\"email\"\n              placeholder=\"Email\"\n              className=\"form-input w-full\"\n            />\n            {errors.email && (\n              <p className=\"text-xs text-red-600\">{errors.email.message}</p>\n            )}\n\n            <input\n              {...register(\"password\")}\n              type=\"password\"\n              placeholder=\"Contraseña\"\n              className=\"form-input w-full\"\n            />\n\n            {/* strength meter */}\n            {pwd && (\n              <div className=\"h-2 w-full overflow-hidden rounded bg-gray-200\">\n                <div\n                  style={{ width: `${(strength + 1) * 20}%` }}\n                  className={clsx(\n                    \"h-full transition-all\",\n                    [\n                      \"bg-red-500\",\n                      \"bg-orange-400\",\n                      \"bg-yellow-400\",\n                      \"bg-lime-500\",\n                      \"bg-green-600\",\n                    ][strength],\n                  )}\n                />\n              </div>\n            )}\n            {errors.password && (\n              <p className=\"text-xs text-red-600\">\n                {errors.password.message}\n              </p>\n            )}\n\n            <input\n              {...register(\"confirm\")}\n              type=\"password\"\n              placeholder=\"Repite contraseña\"\n              className=\"form-input w-full\"\n            />\n            {errors.confirm && (\n              <p className=\"text-xs text-red-600\">{errors.confirm.message}</p>\n            )}\n\n            {/* terms */}\n            <label className=\"flex gap-2 text-xs text-gray-600\">\n              <input type=\"checkbox\" {...register(\"terms\")} />\n              Acepto los&nbsp;\n              <a href=\"/terms\" className=\"text-brand hover:underline\">\n                Términos y la Política de privacidad\n              </a>\n            </label>\n            {errors.terms && (\n              <p className=\"text-xs text-red-600\">{errors.terms.message}</p>\n            )}\n\n            <button className=\"btn w-full\" disabled={isSubmitting}>\n              {isSubmitting ? \"Creando…\" : \"Crear cuenta\"}\n            </button>\n          </form>\n        </div>\n      </main>\n    </Container>\n  );\n}\n",
    "rental-mvp/frontend/src/pages/Login.tsx": "// src/pages/Login.tsx\nimport { FormEvent, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../hooks/useAuth';\nimport { login as apiLogin } from '../features/auth/login';\n\nimport { FcGoogle } from 'react-icons/fc';\nimport { FaGithub } from 'react-icons/fa';\nimport SocialButton from '../components/ui/SocialButton';\nimport Container from '../components/shared/Container';\nimport toast from 'react-hot-toast';  \n\nexport default function Login() {\n  const [user, setUser] = useState('');\n  const [pwd, setPwd] = useState('');\n  const [error, setError] = useState<string | null>(null);\n\n  const { login: saveToken } = useAuth();\n  const nav = useNavigate();\n\n  async function handleSubmit(e: FormEvent) {\n    e.preventDefault();\n    try {\n  const token = await apiLogin(user, pwd);\n  saveToken(token);\n  nav('/dashboard');\n  toast.success('¡Bienvenido de nuevo!');            // 🆕\n} catch {\n  toast.error('Usuario o contraseña incorrectos');   // 🆕\n}\n  }\n\n  return (\n    <Container>\n      <main className=\"flex min-h-[70vh] items-center justify-center\">\n        <div className=\"w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card\">\n          {/* Título */}\n          <h1 className=\"text-center text-2xl font-bold\">Iniciar sesión</h1>\n\n          {/* Social login */}\n          <div className=\"space-y-3\">\n            <SocialButton\n              provider=\"google\"\n              icon={FcGoogle}\n              label=\"Entrar con Google\"\n            />\n            <SocialButton\n              provider=\"github\"\n              icon={FaGithub}\n              label=\"Entrar con GitHub\"\n            />\n          </div>\n\n          <div className=\"relative\">\n            <hr />\n            <span className=\"absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-2 text-xs text-gray-400\">\n              o continúa con tu cuenta\n            </span>\n          </div>\n\n          {/* Form tradicional */}\n          {error && <p className=\"text-center text-sm text-red-600\">{error}</p>}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <input\n              className=\"form-input w-full\"\n              placeholder=\"Usuario\"\n              value={user}\n              onChange={e => setUser(e.target.value)}\n              required\n            />\n            <input\n              className=\"form-input w-full\"\n              type=\"password\"\n              placeholder=\"Contraseña\"\n              value={pwd}\n              onChange={e => setPwd(e.target.value)}\n              required\n            />\n            <button className=\"btn w-full\">Entrar</button>\n          </form>\n\n          <p className=\"text-center text-xs text-gray-500\">\n            ¿No tienes cuenta?{' '}\n            <a href=\"/register\" className=\"font-medium text-brand hover:underline\">\n              Regístrate\n            </a>\n          </p>\n        </div>\n      </main>\n    </Container>\n  );\n}\n",
    "rental-mvp/frontend/src/pages/Dashboard.tsx": "import Container from '../components/shared/Container';\nimport ItemList from '../features/items/ItemList';\nimport RentalList from '../features/rentals/RentalList';\nimport Section from '../components/shared/Section';\n\nexport default function Dashboard() {\n  return (\n    <Container>\n      <Section title=\"Mis alquileres\">\n        <RentalList />\n      </Section>\n\n      <Section title=\"Catálogo público\">\n        <ItemList />\n      </Section>\n    </Container>\n  );\n}\n",
    "rental-mvp/frontend/src/pages/Home.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/pages/Home.tsx                                                        */\n/* -------------------------------------------------------------------------- */\nimport { Link } from 'react-router-dom';\nimport {\n  ArrowRightIcon,\n  PlusIcon,\n  CloudArrowUpIcon,\n  CalendarDaysIcon,\n  BanknotesIcon,\n} from '@heroicons/react/24/solid';\n\nimport Container from '../components/shared/Container';\nimport Section from '../components/shared/Section';\n\nimport Stats from '../components/Home/Stats';\nimport LogoCloud from '../components/Home/LogoCloud';\nimport Testimonials from '../components/Home/Testimonials';\nimport FAQ from '../components/Home/FAQ';\n\nexport default function Home() {\n  /* Pasos del “cómo funciona” con su icono */\n  const STEPS = [\n    {\n      title: 'Publica',\n      desc: 'Sube tu producto, ponle precio y límites de uso.',\n      icon: CloudArrowUpIcon,\n    },\n    {\n      title: 'Reserva',\n      desc: 'Los usuarios pagan la fianza y reservan al instante.',\n      icon: CalendarDaysIcon,\n    },\n    {\n      title: 'Gana',\n      desc: 'Entregas el ítem, recibes el pago y valoraciones ⭐',\n      icon: BanknotesIcon,\n    },\n  ];\n\n  return (\n    <>\n      {/* ---------- HERO ---------- */}\n      <section className=\"relative isolate overflow-hidden bg-brand text-white\">\n        {/* background blur blob */}\n        <span className=\"pointer-events-none absolute -top-16 left-1/2 -z-10 h-[500px] w-[500px] -translate-x-1/2 rounded-full bg-white/10 blur-3xl\" />\n\n        <Container>\n          <div className=\"flex min-h-[70vh] flex-col items-center justify-center gap-6 py-28 text-center\">\n            <h1 className=\"max-w-3xl text-balance text-5xl font-extrabold leading-tight\">\n              Dónde tus cosas <br className=\"hidden sm:inline\" />\n              <span className=\"text-white/80\">cambian de mano</span>\n            </h1>\n\n            <p className=\"max-w-xl text-lg/relaxed text-white/90\">\n              Alquila herramientas, gadgets o equipamiento deportivo y monetiza lo\n              que ya tienes. ¡Conecta con tu barrio y ahorra al planeta!\n            </p>\n\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Link to=\"/dashboard\" className=\"btn inline-flex gap-2\">\n                Explorar catálogo <ArrowRightIcon className=\"h-5 w-5\" />\n              </Link>\n              <Link to=\"/dashboard#add\" className=\"btn--ghost inline-flex gap-2\">\n                <PlusIcon className=\"h-5 w-5\" />\n                Publicar mi primer ítem\n              </Link>\n            </div>\n          </div>\n        </Container>\n\n        {/* wave separator */}\n        <svg\n          aria-hidden\n          viewBox=\"0 0 1440 120\"\n          className=\"block w-full text-brand\"\n          preserveAspectRatio=\"none\"\n        >\n          <path\n            d=\"M0,96L48,106.7C96,117,192,139,288,128C384,117,480,75,576,58.7C672,43,768,53,864,74.7C960,96,1056,128,1152,138.7C1248,149,1344,139,1392,133.3L1440,128L1440,0L1392,0C1344,0,1248,0,1152,0C1056,0,960,0,864,0C768,0,672,0,576,0C480,0,384,0,288,0C192,0,96,0,48,0L0,0Z\"\n            className=\"fill-white\"\n          />\n        </svg>\n      </section>\n\n      {/* ---------- STATS ---------- */}\n      <Stats />\n\n      {/* ---------- LOGO CLOUD ---------- */}\n      <LogoCloud />\n\n      {/* ---------- CÓMO FUNCIONA ---------- */}\n      <Section title=\"¿Cómo funciona?\">\n        <Container>\n          <div className=\"grid gap-12 md:grid-cols-3\">\n            {STEPS.map(({ title, desc, icon: Icon }) => (\n              <div key={title} className=\"space-y-4 text-center\">\n                <div className=\"mx-auto flex h-14 w-14 items-center justify-center rounded-full bg-brand/10\">\n                  <Icon className=\"h-6 w-6 text-brand\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">{title}</h3>\n                <p className=\"text-gray-600\">{desc}</p>\n              </div>\n            ))}\n          </div>\n        </Container>\n      </Section>\n\n      {/* ---------- TESTIMONIOS ---------- */}\n      <Testimonials />\n\n      {/* ---------- FAQ ---------- */}\n      <FAQ />\n\n      {/* ---------- CTA FINAL ---------- */}\n      <section className=\"bg-brand py-16 text-center text-white\">\n        <Container>\n          <h2 className=\"mb-6 text-3xl font-bold\">\n            ¿Listo para estrenar ingresos extra?\n          </h2>\n          <Link to=\"/register\" className=\"btn\">\n            Crear cuenta gratis\n          </Link>\n        </Container>\n      </section>\n    </>\n  );\n}\n",
    "rental-mvp/frontend/src/components/ui/SkeletonCard.tsx": "export default function SkeletonCard() {\n  return (\n    <article\n      className=\"\n        flex flex-col overflow-hidden rounded-lg bg-white shadow-card\n        animate-pulse\n      \"\n    >\n      {/* zona de imagen (mantiene proporción 4:3) */}\n      <div className=\"aspect-[4/3] w-full bg-gray-200\" />\n\n      {/* zona de texto */}\n      <div className=\"space-y-2 p-4\">\n        <div className=\"h-4 w-2/3 rounded bg-gray-200\" />\n        <div className=\"h-4 w-1/3 rounded bg-gray-200\" />\n      </div>\n    </article>\n  );\n}\n",
    "rental-mvp/frontend/src/components/ui/LazyImage.tsx": "import { useState } from 'react';\n\ntype Props = {\n  src: string;\n  alt: string;\n  className?: string;\n  /** ancho estimado para el atributo `sizes` (ej. \"100vw\", \"50vw\") */\n  sizes?: string;\n};\n\nexport default function LazyImage({\n  src,\n  alt,\n  className = '',\n  sizes = '100vw'\n}: Props) {\n  const [loaded, setLoaded] = useState(false);\n\n  /* genera srcset (320-640-960 px) */\n  const srcset = [320, 640, 960]\n    .map(w => `${src.replace(/(\\?.*)?$/, '')}?w=${w} ${w}w`)\n    .join(', ');\n\n  return (\n    <img\n      src={src}\n      srcSet={srcset}\n      sizes={sizes}\n      loading=\"lazy\"\n      decoding=\"async\"                    /* 🆕 */\n      onLoad={() => setLoaded(true)}\n      className={`${className} transition-opacity duration-500 ${\n        loaded ? 'opacity-100' : 'opacity-0'\n      }`}\n      alt={alt}\n    />\n  );\n}\n",
    "rental-mvp/frontend/src/components/ui/ItemCard.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/components/ui/ItemCard.tsx                                            */\n/* -------------------------------------------------------------------------- */\nimport { useState } from \"react\";\nimport { HeartIcon, EyeIcon } from \"@heroicons/react/24/solid\";\nimport clsx from \"clsx\";\n\nimport { Item } from \"../../features/items/useItems\";\nimport { resolveImage } from \"../../utils\";\nimport LazyImage from \"./LazyImage\";\nimport ItemDetailModal from \"./ItemDetailModal\";\n\nexport default function ItemCard({ item }: { item: Item }) {\n  const [open, setOpen] = useState(false);\n\n  /* -------- portada (1ª del array o la legacy) -------- */\n  const cover = item.image_urls?.[0] ?? item.image_url;\n\n  const imgSrc = resolveImage(\n    cover,\n    `https://source.unsplash.com/640x480/?${encodeURIComponent(item.name)}`\n  );\n\n  return (\n    <>\n      <article\n        onClick={() => setOpen(true)}\n        className=\"flex cursor-pointer flex-col overflow-hidden rounded-lg bg-surface shadow-card transition-transform duration-200 hover:-translate-y-1 hover:shadow-cardHover\"\n      >\n        {/* ---------- Foto ---------- */}\n        <div className=\"relative\">\n          <LazyImage\n            src={imgSrc}\n            alt={item.name}\n            className=\"aspect-[4/3] w-full object-contain p-2\"\n          />\n\n          {!item.available && (\n            <span className=\"absolute left-0 top-0 rounded-br-md bg-red-600/90 px-2 py-0.5 text-xs font-semibold uppercase tracking-wide text-white\">\n              Alquilado\n            </span>\n          )}\n\n          {/* acciones rápidas */}\n          <div className=\"absolute inset-0 flex items-start justify-end gap-2 p-2 opacity-0 transition-opacity hover:opacity-100\">\n            <IconBtn title=\"Vista rápida\">\n              <EyeIcon className=\"h-5 w-5\" />\n            </IconBtn>\n            <IconBtn title=\"Favorito\">\n              <HeartIcon className=\"h-5 w-5\" />\n            </IconBtn>\n          </div>\n        </div>\n\n        {/* ---------- Info ---------- */}\n        <div className=\"flex flex-1 flex-col gap-2 px-4 pb-4\">\n          <h3 className=\"line-clamp-1 text-lg font-semibold\">{item.name}</h3>\n\n          {item.description && (\n            <p className=\"line-clamp-2 text-sm text-gray-600\">\n              {item.description}\n            </p>\n          )}\n\n          <div className=\"mt-auto flex items-center justify-between\">\n            <p className=\"text-base font-bold text-brand\">\n              {item.price_per_h.toFixed(2)} €/h\n            </p>\n            <span\n              className={clsx(\n                \"badge\",\n                item.available ? \"badge--ok\" : \"badge--danger\"\n              )}\n            >\n              {item.available ? \"Disponible\" : \"Alquilado\"}\n            </span>\n          </div>\n        </div>\n      </article>\n\n      {/* ---------- Modal de detalle ---------- */}\n      <ItemDetailModal open={open} onClose={() => setOpen(false)} item={item} />\n    </>\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                 Helpers                                    */\n/* -------------------------------------------------------------------------- */\nfunction IconBtn({\n  children,\n  title\n}: {\n  children: React.ReactNode;\n  title: string;\n}) {\n  return (\n    <button\n      type=\"button\"\n      title={title}\n      onClick={e => e.stopPropagation()}\n      className=\"rounded-full bg-white/90 p-1 text-gray-600 shadow transition-colors hover:bg-white\"\n    >\n      {children}\n    </button>\n  );\n}\n",
    "rental-mvp/frontend/src/components/ui/SearchBar.tsx": "import { useForm } from 'react-hook-form';\n\ntype Props = { onSubmit: (q: URLSearchParams) => void };\n\nexport default function SearchBar({ onSubmit }: Props) {\n  const { register, handleSubmit, reset } = useForm<{\n    q: string;\n    min: number | undefined;\n    max: number | undefined;\n  }>({ defaultValues: { q: '', min: undefined, max: undefined } });\n\n  return (\n    <form\n      onSubmit={handleSubmit(values => {\n        const params = new URLSearchParams();\n        if (values.q) params.set('name', values.q);\n        if (values.min) params.set('min_price', values.min.toString());\n        if (values.max) params.set('max_price', values.max.toString());\n        onSubmit(params);\n      })}\n      className=\"flex flex-wrap items-end gap-3\"\n    >\n      <input\n        {...register('q')}\n        placeholder=\"Buscar producto…\"\n        className=\"form-input w-52\"\n      />\n      <input\n        {...register('min', { valueAsNumber: true })}\n        type=\"number\"\n        step=\"0.1\"\n        min={0}\n        placeholder=\"€ mínimo\"\n        className=\"form-input w-32\"\n      />\n      <input\n        {...register('max', { valueAsNumber: true })}\n        type=\"number\"\n        step=\"0.1\"\n        min={0}\n        placeholder=\"€ máximo\"\n        className=\"form-input w-32\"\n      />\n      <button className=\"btn\">Filtrar</button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          reset();\n          onSubmit(new URLSearchParams());\n        }}\n        className=\"btn--ghost\"\n      >\n        Limpiar\n      </button>\n    </form>\n  );\n}\n",
    "rental-mvp/frontend/src/components/ui/ItemDetailModal.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/components/ui/ItemDetailModal.tsx                                     */\n/* -------------------------------------------------------------------------- */\nimport { Fragment, useState } from \"react\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport {\n  XMarkIcon,\n  StarIcon,\n  ShieldCheckIcon,\n  ClockIcon\n} from \"@heroicons/react/24/outline\";\nimport { Item } from \"../../features/items/useItems\";\nimport { resolveImage } from \"../../utils\";\nimport LazyImage from \"./LazyImage\";\nimport clsx from \"clsx\";\n\ntype Props = {\n  open: boolean;\n  onClose: () => void;\n  item: Item | null;\n};\n\nexport default function ItemDetailModal({ open, onClose, item }: Props) {\n  if (!item) return null;\n\n  /* ---------- galería: imágenes reales o fallback ---------- */\n  const gallery =\n    item.image_urls && item.image_urls.length\n      ? item.image_urls\n      : [\n          resolveImage(\n            item.image_url,\n            `https://source.unsplash.com/800x600/?${encodeURIComponent(\n              item.name\n            )}`\n          )\n        ];\n\n  const [active, setActive] = useState(0);\n\n  return (\n    <Transition show={open} as={Fragment}>\n      <Dialog onClose={onClose} className=\"relative z-50\">\n        {/* ---------- Backdrop ---------- */}\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-200\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-150\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black/40 backdrop-blur-sm\" />\n        </Transition.Child>\n\n        {/* ---------- Wrapper ---------- */}\n        <div className=\"fixed inset-0 grid place-items-center p-4\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-200\"\n            enterFrom=\"scale-95 opacity-0\"\n            enterTo=\"scale-100 opacity-100\"\n            leave=\"ease-in duration-150\"\n            leaveFrom=\"scale-100 opacity-100\"\n            leaveTo=\"scale-95 opacity-0\"\n          >\n            <Dialog.Panel className=\"flex w-full max-w-5xl max-h-[95vh] flex-col overflow-hidden rounded-xl bg-white shadow-xl\">\n              {/* ---------------- Header ---------------- */}\n              <header className=\"flex items-center justify-between border-b px-6 py-4\">\n                <Dialog.Title className=\"text-lg font-semibold\">\n                  {item.name}\n                </Dialog.Title>\n                <button\n                  onClick={onClose}\n                  className=\"rounded p-1 text-gray-500 hover:bg-gray-100 focus:outline-none\"\n                >\n                  <XMarkIcon className=\"h-6 w-6\" />\n                </button>\n              </header>\n\n              {/* ---------------- Body ---------------- */}\n              <section className=\"flex flex-1 flex-col gap-8 overflow-y-auto p-6 md:flex-row\">\n                {/* ---------- Galería ---------- */}\n                <div className=\"md:w-1/2\">\n                  {/* principal */}\n                  <div className=\"aspect-video overflow-hidden rounded-lg border\">\n                    <LazyImage\n                      src={gallery[active]}\n                      alt={item.name}\n                      className=\"h-full w-full object-contain\"\n                      sizes=\"(min-width:768px) 50vw, 90vw\"\n                    />\n                  </div>\n\n                  {/* thumbnails */}\n                  {gallery.length > 1 && (\n                    <div className=\"mt-4 flex gap-2 overflow-x-auto\">\n                      {gallery.map((src, i) => (\n                        <button\n                          key={i}\n                          onClick={() => setActive(i)}\n                          className={clsx(\n                            \"shrink-0 overflow-hidden rounded-md border\",\n                            active === i && \"ring-2 ring-brand\"\n                          )}\n                        >\n                          <LazyImage\n                            src={src}\n                            alt=\"\"\n                            className=\"h-16 w-24 object-cover\"\n                            sizes=\"96px\"\n                          />\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* ---------- Ficha ---------- */}\n                <div className=\"flex flex-1 flex-col gap-6 md:pr-4\">\n                  {/* precio + rating */}\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-3xl font-bold text-brand\">\n                      {item.price_per_h.toFixed(2)} €/h\n                    </p>\n                    <Rating value={4} />\n                  </div>\n\n                  {/* descripción */}\n                  {item.description ? (\n                    <p className=\"prose max-w-none text-sm leading-relaxed\">\n                      {item.description}\n                    </p>\n                  ) : (\n                    <p className=\"text-sm text-gray-500\">Sin descripción.</p>\n                  )}\n\n                  {/* categorías */}\n                  {!!item.categories?.length && (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {item.categories.map(c => (\n                        <span\n                          key={c.id}\n                          className=\"rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600\"\n                        >\n                          {c.name}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* ventajas rápidas */}\n                  <ul className=\"space-y-2 text-sm\">\n                    <Feature icon={ShieldCheckIcon} text=\"Pago seguro con fianza\" />\n                    <Feature\n                      icon={ClockIcon}\n                      text=\"Cancelación gratis hasta 12 h antes\"\n                    />\n                  </ul>\n\n                  {/* CTA */}\n                  <button className=\"btn mt-auto w-full md:max-w-xs\">\n                    Reservar ahora\n                  </button>\n                </div>\n              </section>\n            </Dialog.Panel>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                 Helpers                                    */\n/* -------------------------------------------------------------------------- */\nfunction Rating({ value }: { value: number }) {\n  return (\n    <div className=\"flex items-center gap-1\">\n      {Array.from({ length: 5 }).map((_, i) => (\n        <StarIcon\n          key={i}\n          className={clsx(\n            \"h-5 w-5\",\n            i < value ? \"fill-amber-400 stroke-amber-400\" : \"stroke-gray-300\"\n          )}\n        />\n      ))}\n      <span className=\"ml-1 text-xs text-gray-500\">\n        ({value.toFixed(1)})\n      </span>\n    </div>\n  );\n}\n\nfunction Feature({\n  icon: Icon,\n  text\n}: {\n  icon: (props: any) => JSX.Element;\n  text: string;\n}) {\n  return (\n    <li className=\"flex items-center gap-2\">\n      <Icon className=\"h-4 w-4 shrink-0 text-brand\" />\n      {text}\n    </li>\n  );\n}\n",
    "rental-mvp/frontend/src/components/ui/SocialButton.tsx": "// src/components/ui/SocialButton.tsx\nimport { IconType } from 'react-icons';\nimport clsx from 'clsx';\n\ntype Props = {\n  icon: IconType;\n  label: string;\n  provider: 'google' | 'github';\n};\n\nexport default function SocialButton({ icon: Icon, label, provider }: Props) {\n  return (\n    <a\n      href={`/api/oauth/${provider}`}           /* El backend redirige al proveedor */\n      className={clsx(\n        'btn flex w-full items-center justify-center gap-2',\n        provider === 'google' && 'bg-white text-gray-700 shadow border hover:bg-gray-50',\n        provider === 'github' && 'bg-gray-900 text-white hover:bg-gray-800'\n      )}\n    >\n      <Icon className=\"h-5 w-5\" />\n      {label}\n    </a>\n  );\n}\n",
    "rental-mvp/frontend/src/components/ui/QuickViewModal.tsx": "/* -------------------------------------------------------------------------- */\n/*  src/components/ui/QuickViewModal.tsx                                      */\n/* -------------------------------------------------------------------------- */\nimport { Fragment } from \"react\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport { XMarkIcon, StarIcon } from \"@heroicons/react/24/outline\";\nimport { Item } from \"../../features/items/useItems\";\nimport LazyImage from \"./LazyImage\";\nimport { resolveImage } from \"../../utils\";\nimport clsx from \"clsx\";\n\ntype Props = {\n  open: boolean;\n  onClose: () => void;\n  item: Item | null;\n};\n\nexport default function QuickViewModal({ open, onClose, item }: Props) {\n  if (!item) return null;\n\n  /* portada */\n  const cover = item.image_urls?.[0] ?? item.image_url;\n\n  const imgSrc = resolveImage(\n    cover,\n    `https://source.unsplash.com/800x600/?${encodeURIComponent(item.name)}`\n  );\n\n  return (\n    <Transition show={open} as={Fragment}>\n      <Dialog onClose={onClose} className=\"relative z-50\">\n        {/* ---------- Backdrop ---------- */}\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-200\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-150\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black/40 backdrop-blur-sm\" />\n        </Transition.Child>\n\n        {/* ---------- Panel ---------- */}\n        <div className=\"fixed inset-0 grid place-items-center p-4\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-200\"\n            enterFrom=\"scale-95 opacity-0\"\n            enterTo=\"scale-100 opacity-100\"\n            leave=\"ease-in duration-150\"\n            leaveFrom=\"scale-100 opacity-100\"\n            leaveTo=\"scale-95 opacity-0\"\n          >\n            <Dialog.Panel className=\"flex max-h-[90vh] w-full max-w-3xl flex-col overflow-hidden rounded-xl bg-white shadow-xl\">\n              {/* header */}\n              <div className=\"flex items-center justify-between border-b p-4\">\n                <Dialog.Title className=\"text-lg font-semibold\">\n                  {item.name}\n                </Dialog.Title>\n                <button\n                  onClick={onClose}\n                  className=\"rounded p-1 text-gray-500 hover:bg-gray-100\"\n                >\n                  <XMarkIcon className=\"h-5 w-5\" />\n                </button>\n              </div>\n\n              {/* body */}\n              <div className=\"grid gap-6 overflow-y-auto p-6 md:grid-cols-2\">\n                {/* imagen */}\n                <div className=\"flex items-center justify-center\">\n                  <LazyImage\n                    src={imgSrc}\n                    alt={item.name}\n                    className=\"w-full max-h-[60vh] rounded-lg object-contain\"\n                  />\n                </div>\n\n                {/* info */}\n                <div className=\"flex flex-col gap-4\">\n                  <p className=\"text-2xl font-bold text-brand\">\n                    {item.price_per_h.toFixed(2)} €/h\n                  </p>\n\n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: 5 }).map((_, i) => (\n                      <StarIcon\n                        key={i}\n                        className={clsx(\n                          \"h-5 w-5\",\n                          i < 4\n                            ? \"fill-amber-400 stroke-amber-400\"\n                            : \"stroke-gray-300\"\n                        )}\n                      />\n                    ))}\n                    <span className=\"ml-1 text-sm text-gray-500\">(4,0)</span>\n                  </div>\n\n                  {item.description ? (\n                    <p className=\"prose max-w-none text-sm leading-relaxed\">\n                      {item.description}\n                    </p>\n                  ) : (\n                    <p className=\"text-sm text-gray-500\">Sin descripción.</p>\n                  )}\n\n                  {!!item.categories?.length && (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {item.categories.map(c => (\n                        <span\n                          key={c.id}\n                          className=\"rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600\"\n                        >\n                          {c.name}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n\n                  <button className=\"btn mt-auto w-full\">Reservar ahora</button>\n                </div>\n              </div>\n            </Dialog.Panel>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n",
    "rental-mvp/frontend/src/components/shared/Section.tsx": "type Props = {\n  title?: string;\n  children: React.ReactNode;\n  id?: string;\n};\n\nexport default function Section({ title, children, id }: Props) {\n  return (\n    <section id={id} className=\"space-y-6 py-16\">\n      {title && (\n        <h2 className=\"text-center text-3xl font-bold tracking-tight\">{title}</h2>\n      )}\n      {children}\n    </section>\n  );\n}\n",
    "rental-mvp/frontend/src/components/shared/Container.tsx": "export default function Container({ children }: { children: React.ReactNode }) {\n  return <div className=\"container\">{children}</div>;\n}\n",
    "rental-mvp/frontend/src/components/layout/Footer.tsx": "export default function Footer() {\n  return (\n    <footer className=\"mt-24 border-t bg-white py-12 text-center text-sm text-gray-500\">\n      Rental‑MVP © {new Date().getFullYear()} · Hecho con ❤ en FastAPI + React\n    </footer>\n  );\n}\n",
    "rental-mvp/frontend/src/components/layout/Header.tsx": "// src/components/layout/Header.tsx\nimport { Link, NavLink } from 'react-router-dom';\nimport logo from '../../assets/logo.png';\nimport { useAuth } from '../../hooks/useAuth';\n\nexport default function Header() {\n  const { token, logout } = useAuth();\n\n  return (\n    <header className=\"sticky top-0 z-30 bg-white/80 backdrop-blur shadow-sm\">\n      {/* ↑ duplica el padding vertical para más “aire” */}\n      <div className=\"container flex items-center gap-8 py-4 lg:py-6\">\n        {/* Logo */}\n        <Link to=\"/\" aria-label=\"Inicio\" className=\"flex items-center\">\n          {/* será ≈96 px en desktop */}\n          <img\n            src={logo}\n            alt=\"Logo Rental-MVP\"\n            className=\"h-14 md:h-20 lg:h-24 w-auto select-none\"\n            decoding=\"async\"\n          />\n        </Link>\n\n        {/* Navegación */}\n        <nav className=\"ml-auto flex gap-8 text-base font-semibold text-gray-600\">\n          {token ? (\n            <>\n              <NavLink to=\"/dashboard\" className=\"hover:text-gray-900\">\n                Dashboard\n              </NavLink>\n              <button onClick={logout} className=\"hover:text-gray-900\">\n                Salir\n              </button>\n            </>\n          ) : (\n            <NavLink to=\"/login\" className=\"hover:text-gray-900\">\n              Login\n            </NavLink>\n          )}\n        </nav>\n      </div>\n    </header>\n  );\n}\n",
    "rental-mvp/frontend/src/components/Home/FAQ.tsx": "import { Disclosure } from '@headlessui/react';\nimport { ChevronUpIcon } from '@heroicons/react/24/outline';\nimport Container from '../shared/Container';\n\nconst FAQS = [\n  ['¿Cómo se gestionan los pagos?', 'Usamos Stripe Connect para retener la fianza y liberar el pago una vez devuelto el ítem.'],\n  ['¿Qué pasa si mi herramienta se daña?', 'Dispones de un seguro opcional a todo riesgo y sistema de valoraciones para vetar a malos usuarios.'],\n  ['¿Puedo cancelar una reserva?', 'Sí, hasta 12 h antes sin penalización.'],\n  ['¿Hay comisión?', 'Solo cobramos un 8 % al propietario cuando se confirma el alquiler.']\n];\n\nexport default function FAQ() {\n  return (\n    <section className=\"bg-gray-50 py-16\">\n      <Container>\n        <h2 className=\"mb-8 text-center text-3xl font-bold\">Preguntas frecuentes</h2>\n\n        <div className=\"mx-auto max-w-3xl space-y-4\">\n          {FAQS.map(([q, a]) => (\n            <Disclosure key={q}>\n              {({ open }) => (\n                <>\n                  <Disclosure.Button className=\"flex w-full items-center justify-between rounded-md bg-white px-4 py-3 text-left text-sm font-medium shadow\">\n                    {q}\n                    <ChevronUpIcon\n                      className={`h-5 w-5 transition-transform ${open ? 'rotate-180' : ''}`}\n                    />\n                  </Disclosure.Button>\n                  <Disclosure.Panel className=\"px-4 pt-2 text-sm text-gray-600\">\n                    {a}\n                  </Disclosure.Panel>\n                </>\n              )}\n            </Disclosure>\n          ))}\n        </div>\n      </Container>\n    </section>\n  );\n}\n",
    "rental-mvp/frontend/src/components/Home/Stats.tsx": "import { useEffect, useRef, useState } from 'react';\nimport Container from '../shared/Container';\n\nconst DATA = [\n  { label: 'Ítems publicados', value: 3124 },\n  { label: 'Usuarios registrados', value: 857 },\n  { label: '€ ahorrados', value: 24367 }\n];\n\nexport default function Stats() {\n  /* animate on scroll into view */\n  const ref = useRef<HTMLDivElement>(null);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    const el = ref.current;\n    if (!el) return;\n    const io = new IntersectionObserver(\n      ([e]) => e.isIntersecting && setVisible(true),\n      { threshold: 0.4 }\n    );\n    io.observe(el);\n    return () => io.disconnect();\n  }, []);\n\n  return (\n    <section ref={ref} className=\"bg-white py-12\">\n      <Container>\n        <div className=\"grid gap-8 sm:grid-cols-3\">\n          {DATA.map(({ label, value }) => (\n            <div key={label} className=\"text-center\">\n              <p className=\"text-4xl font-extrabold text-brand\">\n                {visible ? value.toLocaleString() : '0'}\n              </p>\n              <p className=\"mt-2 text-sm font-medium text-gray-600\">{label}</p>\n            </div>\n          ))}\n        </div>\n      </Container>\n    </section>\n  );\n}\n",
    "rental-mvp/frontend/src/components/Home/LogoCloud.tsx": "import Container from '../shared/Container';\n\nconst LOGOS = [\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=Bosch',\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=Makita',\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=Black+%26+Decker',\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=Dewalt',\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=GoPro',\n  'https://dummyimage.com/160x60/cccccc/ffffff?text=Xiaomi'\n];\n\nexport default function LogoCloud() {\n  return (\n    <SectionWrapper>\n      <Container>\n        <div className=\"grid grid-cols-2 items-center gap-8 opacity-70 sm:grid-cols-3 lg:grid-cols-6\">\n          {LOGOS.map(src => (\n            <img\n              key={src}\n              src={src}\n              alt=\"\"\n              className=\"mx-auto h-12 w-auto object-contain grayscale\"\n              loading=\"lazy\"\n            />\n          ))}\n        </div>\n      </Container>\n    </SectionWrapper>\n  );\n}\n\nfunction SectionWrapper({ children }: { children: React.ReactNode }) {\n  return <section className=\"bg-gray-50 py-12\">{children}</section>;\n}\n",
    "rental-mvp/frontend/src/components/Home/Testimonials.tsx": "import Container from '../shared/Container';\n\nconst TESTIMONIALS = [\n  {\n    name: 'Laura P.',\n    text: 'Alquilé mi cámara reflex y pagué las vacaciones. ¡Súper fácil!',\n    avatar: 'https://source.unsplash.com/48x48/?woman,face'\n  },\n  {\n    name: 'Carlos G.',\n    text: 'Encontré un taladro a 5 € y no tuve que comprar uno nuevo.',\n    avatar: 'https://source.unsplash.com/48x48/?man,face'\n  },\n  {\n    name: 'Marta S.',\n    text: 'Me encanta la seguridad del pago con fianza. Repetiré.',\n    avatar: 'https://source.unsplash.com/48x48/?lady,face'\n  }\n];\n\nexport default function Testimonials() {\n  return (\n    <SectionWrapper>\n      <Container>\n        <h2 className=\"mb-10 text-center text-3xl font-bold\">Historias reales</h2>\n\n        {/* slider */}\n        <div className=\"flex snap-x gap-6 overflow-x-auto pb-4 sm:justify-center\">\n          {TESTIMONIALS.map(t => (\n            <article\n              key={t.name}\n              className=\"snap-center shrink-0 rounded-xl bg-white p-6 shadow-card sm:w-80\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <img\n                  src={t.avatar}\n                  alt=\"\"\n                  className=\"h-10 w-10 rounded-full object-cover\"\n                  loading=\"lazy\"\n                />\n                <p className=\"font-semibold\">{t.name}</p>\n              </div>\n              <p className=\"mt-4 text-sm text-gray-600\">“{t.text}”</p>\n            </article>\n          ))}\n        </div>\n      </Container>\n    </SectionWrapper>\n  );\n}\n\nfunction SectionWrapper({ children }: { children: React.ReactNode }) {\n  return <section className=\"bg-white py-16\">{children}</section>;\n}\n",
    "rental-mvp/frontend/src/components/filters/FiltersSidebar.tsx": "import { Disclosure } from '@headlessui/react';\nimport useCategories, { Category } from '../../features/categories/useCategories';\n\ntype Filters = {\n  name?: string;\n  min_price?: number;\n  max_price?: number;\n  categories?: number[];\n  order?: 'price_asc' | 'price_desc' | 'name';\n};\n\ntype Props = {\n  value: Filters;\n  onChange: (f: Filters) => void;\n  onReset: () => void;\n};\n\nexport default function FiltersSidebar({ value, onChange, onReset }: Props) {\n  const { data: cats } = useCategories();\n\n  const toggleCat = (id: number) => {\n    const list = new Set(value.categories ?? []);\n    list.has(id) ? list.delete(id) : list.add(id);\n    onChange({ ...value, categories: [...list] });\n  };\n\n  return (\n    <div className=\"space-y-6 w-full md:w-60 lg:w-72\">\n      {/* Search */}\n      <input\n        placeholder=\"Buscar…\"\n        className=\"form-input w-full\"\n        value={value.name ?? ''}\n        onChange={e => onChange({ ...value, name: e.target.value || undefined })}\n      />\n\n      {/* Price */}\n      <Disclosure defaultOpen>\n        {({ open }) => (\n          <>\n            <Disclosure.Button className=\"flex w-full justify-between text-sm font-semibold\">\n              Precio {open ? '−' : '+'}\n            </Disclosure.Button>\n            <Disclosure.Panel className=\"mt-3 space-y-2\">\n              <input\n                type=\"number\"\n                min={0}\n                step={0.1}\n                placeholder=\"mín\"\n                className=\"form-input w-full\"\n                value={value.min_price ?? ''}\n                onChange={e =>\n                  onChange({\n                    ...value,\n                    min_price: e.target.value ? Number(e.target.value) : undefined\n                  })\n                }\n              />\n              <input\n                type=\"number\"\n                min={0}\n                step={0.1}\n                placeholder=\"máx\"\n                className=\"form-input w-full\"\n                value={value.max_price ?? ''}\n                onChange={e =>\n                  onChange({\n                    ...value,\n                    max_price: e.target.value ? Number(e.target.value) : undefined\n                  })\n                }\n              />\n            </Disclosure.Panel>\n          </>\n        )}\n      </Disclosure>\n\n      {/* Categories */}\n      <Disclosure defaultOpen>\n        {({ open }) => (\n          <>\n            <Disclosure.Button className=\"flex w-full justify-between text-sm font-semibold\">\n              Categorías {open ? '−' : '+'}\n            </Disclosure.Button>\n            <Disclosure.Panel className=\"mt-3 flex flex-wrap gap-2\">\n              {cats.map((c: Category) => {\n                const active = value.categories?.includes(c.id);\n                return (\n                  <button\n                    key={c.id}\n                    onClick={() => toggleCat(c.id)}\n                    className={\n                      active\n                        ? 'rounded-full bg-brand px-3 py-0.5 text-xs font-medium text-white'\n                        : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'\n                    }\n                  >\n                    {c.name}\n                  </button>\n                );\n              })}\n            </Disclosure.Panel>\n          </>\n        )}\n      </Disclosure>\n\n      {/* Order */}\n      <select\n        className=\"form-select w-full\"\n        value={value.order ?? ''}\n        onChange={e =>\n          onChange({\n            ...value,\n            order: e.target.value ? (e.target.value as Filters['order']) : undefined\n          })\n        }\n      >\n        <option value=\"\">Ordenar por…</option>\n        <option value=\"price_asc\">Precio ↑</option>\n        <option value=\"price_desc\">Precio ↓</option>\n        <option value=\"name\">Nombre</option>\n      </select>\n\n      <button onClick={onReset} className=\"btn--ghost w-full\">\n        Limpiar filtros\n      </button>\n    </div>\n  );\n}\n",
    "rental-mvp/app/main.py": "# app/main.py\nfrom fastapi import FastAPI\nfrom fastapi.staticfiles import StaticFiles          # 🆕\n\nfrom app import models  # noqa: F401\nfrom app.api import auth, items, rentals, categories, upload   # 🆕\n\napp = FastAPI(title=\"rental-mvp\")\n\n# Routers\napp.include_router(auth.router,       prefix=\"/api/auth\",      tags=[\"auth\"])\napp.include_router(items.router,      prefix=\"/api/items\",     tags=[\"items\"])\napp.include_router(rentals.router,    prefix=\"/api/rentals\",   tags=[\"rentals\"])\napp.include_router(categories.router, prefix=\"/api/categories\", tags=[\"categories\"])\napp.include_router(upload.router,     prefix=\"/api/upload\",    tags=[\"upload\"])  # 🆕\n\n# ► archivos subidos accesibles en /uploads/…\napp.mount(\"/uploads\", StaticFiles(directory=\"uploads\"), name=\"uploads\")         # 🆕\n",
    "rental-mvp/app/deps.py": "# app/deps.py\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom sqlalchemy.orm import Session\nfrom jose import JWTError, jwt\n\nfrom app.models.database import SessionLocal\nfrom app.models.models import User\nfrom app.core.config import settings\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/api/auth/token\")\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\ndef get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -> User:\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"No se pudo validar las credenciales\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n    except JWTError:\n        raise credentials_exception\n\n    user = db.query(User).filter(User.username == username).first()\n    if user is None:\n        raise credentials_exception\n    return user\n",
    "rental-mvp/app/models/models.py": "from __future__ import annotations\n\nimport datetime\nfrom sqlalchemy import (\n    Boolean,\n    Column,\n    DateTime,\n    Float,\n    ForeignKey,\n    Integer,\n    String,\n    Table,\n)\nfrom sqlalchemy.orm import relationship\n\nfrom .database import Base\n\n# ───────── relación Item ↔ Category ─────────\nitem_categories = Table(\n    \"item_categories\",\n    Base.metadata,\n    Column(\n        \"item_id\",\n        Integer,\n        ForeignKey(\"items.id\", ondelete=\"CASCADE\"),\n        primary_key=True,\n    ),\n    Column(\n        \"category_id\",\n        Integer,\n        ForeignKey(\"categories.id\", ondelete=\"CASCADE\"),\n        primary_key=True,\n    ),\n)\n\n# ───────── tabla de imágenes ─────────\nclass ItemImage(Base):\n    __tablename__ = \"item_images\"\n\n    id = Column(Integer, primary_key=True)\n    item_id = Column(\n        Integer,\n        ForeignKey(\"items.id\", ondelete=\"CASCADE\"),\n        nullable=False,\n    )\n    url = Column(String, nullable=False)\n\n    item = relationship(\"Item\", back_populates=\"images\")\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True, index=True, nullable=False)\n    email = Column(String, unique=True, index=True, nullable=False)\n    hashed_pw = Column(String, nullable=False)\n\n    items = relationship(\n        \"Item\",\n        back_populates=\"owner\",\n        cascade=\"all, delete-orphan\",\n    )\n    rentals = relationship(\n        \"Rental\",\n        back_populates=\"renter\",\n        cascade=\"all, delete-orphan\",\n    )\n\n\nclass Category(Base):\n    __tablename__ = \"categories\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String, unique=True, index=True, nullable=False)\n\n    items = relationship(\n        \"Item\",\n        secondary=item_categories,\n        back_populates=\"categories\",\n    )\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True, nullable=False)\n    description = Column(String)\n    price_per_h = Column(Float, nullable=False)\n\n    # Imagen destacada (compatibilidad retro)\n    image_url = Column(String, nullable=True)\n\n    owner_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    owner = relationship(\"User\", back_populates=\"items\")\n\n    available = Column(Boolean, default=True)\n\n    # relaciones\n    categories = relationship(\n        \"Category\",\n        secondary=item_categories,\n        back_populates=\"items\",\n    )\n    images = relationship(\n        \"ItemImage\",\n        back_populates=\"item\",\n        cascade=\"all, delete-orphan\",\n        order_by=\"ItemImage.id\",\n    )\n\n    # ──────────────────────── NUEVO ─────────────────────────\n    @property\n    def image_urls(self) -> List[str]:\n        \"\"\"Devuelve las URLs de la galería en el mismo orden que `images`.\"\"\"\n        return [img.url for img in self.images]\n\n\nclass Rental(Base):\n    __tablename__ = \"rentals\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    item_id = Column(Integer, ForeignKey(\"items.id\"), nullable=False)\n    renter_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n\n    start_at = Column(DateTime, default=datetime.datetime.utcnow)\n    end_at = Column(DateTime)\n\n    deposit = Column(Float, nullable=False)\n    returned = Column(Boolean, default=False)\n\n    item = relationship(\"Item\")\n    renter = relationship(\"User\", back_populates=\"rentals\")\n",
    "rental-mvp/app/models/__init__.py": "# app/models/__init__.py\n\"\"\"\nAl importar `app.models` se registran todos los modelos en `Base.metadata`.\n\"\"\"\nfrom .models import User, Category, Item, Rental  # noqa: F401\n",
    "rental-mvp/app/models/database.py": "# app/models/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom app.core.config import settings\n\n# Si usas SQLite hay que pasar connect_args\nconnect_args = {\"check_same_thread\": False} if settings.DATABASE_URL.startswith(\"sqlite\") else {}\n\nengine = create_engine(\n    settings.DATABASE_URL,\n    connect_args=connect_args,\n    echo=True,  # ponte True en dev para ver SQL en consola\n)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n",
    "rental-mvp/app/schemas/category.py": "# app/schemas/category.py\nfrom pydantic import BaseModel, Field\n\n\nclass CategoryBase(BaseModel):\n    name: str = Field(..., min_length=1, max_length=50)\n\n\nclass CategoryCreate(CategoryBase):\n    \"\"\"Crear categoría (solo nombre).\"\"\"\n    pass\n\n\nclass CategoryOut(CategoryBase):\n    id: int\n\n    class Config:\n        from_attributes = True\n",
    "rental-mvp/app/schemas/rental.py": "# app/schemas/rental.py\nfrom datetime import datetime\nfrom pydantic import BaseModel, field_validator\n\n\nclass RentalBase(BaseModel):\n    item_id: int\n    start_at: datetime\n    end_at: datetime\n\n\nclass RentalCreate(RentalBase):\n    \"\"\"\n    Al crear un alquiler nos aseguramos de que la hora de fin sea\n    posterior a la hora de inicio.\n    \"\"\"\n\n    @field_validator(\"end_at\")\n    def end_must_be_after_start(cls, v: datetime, info):\n        start = info.data.get(\"start_at\")\n        if start and v <= start:\n            raise ValueError(\"end_at debe ser posterior a start_at\")\n        return v\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"item_id\": 42,\n                    \"start_at\": \"2025-01-01T10:00:00Z\",\n                    \"end_at\": \"2025-01-01T12:00:00Z\",\n                }\n            ]\n        }\n    }\n\n\nclass RentalOut(RentalBase):\n    id: int\n    renter_id: int\n    deposit: float\n    returned: bool\n\n    class Config:\n        from_attributes = True\n",
    "rental-mvp/app/schemas/token.py": "# app/schemas/token.py\nfrom pydantic import BaseModel\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n",
    "rental-mvp/app/schemas/__init__.py": "# app/schemas/__init__.py\nfrom .user import UserCreate, UserOut\nfrom .category import CategoryCreate, CategoryOut\nfrom .item import ItemCreate, ItemUpdate, ItemOut\nfrom .rental import RentalCreate, RentalOut\nfrom .token import Token\n\n__all__ = [\n    # users\n    \"UserCreate\",\n    \"UserOut\",\n    # categories\n    \"CategoryCreate\",\n    \"CategoryOut\",\n    # items\n    \"ItemCreate\",\n    \"ItemUpdate\",\n    \"ItemOut\",\n    # rentals\n    \"RentalCreate\",\n    \"RentalOut\",\n    # auth\n    \"Token\",\n]\n",
    "rental-mvp/app/schemas/item.py": "from __future__ import annotations\nfrom typing import List, Optional\n\nfrom pydantic import BaseModel, Field, PositiveFloat, HttpUrl\n\nfrom .category import CategoryOut\n\n\n# ─────────────────────────── Base ──────────────────────────────────────────\nclass ItemBase(BaseModel):\n    name: str = Field(..., min_length=1, max_length=80)\n    description: Optional[str] = None\n    price_per_h: PositiveFloat\n\n\n# ─────────────────────────── Crear ─────────────────────────────────────────\nclass ItemCreate(ItemBase):\n    image_urls: List[HttpUrl] = Field(..., min_length=1, max_length=6)\n    categories: Optional[List[int]] = Field(\n        default=None,\n        description=\"IDs de categorías a asociar\",\n        examples=[[1, 2]],\n    )\n\n\n# ─────────────────────── Actualizar (PATCH) ────────────────────────────────\nclass ItemUpdate(BaseModel):\n    name: Optional[str] = Field(None, min_length=1, max_length=80)\n    description: Optional[str] = None\n    price_per_h: Optional[PositiveFloat] = None\n    image_urls: Optional[List[HttpUrl]] = Field(\n        default=None, min_length=1, max_length=6\n    )\n    categories: Optional[List[int]] = Field(\n        default=None, description=\"Lista completa de IDs (reemplaza)\"\n    )\n\n    model_config = {\"extra\": \"forbid\"}\n\n\n# ─────────────────────────── Salida ────────────────────────────────────────\nclass ItemOut(ItemBase):\n    id: int\n    owner_id: int\n    available: bool\n    categories: List[CategoryOut]\n    image_urls: List[HttpUrl]                        # ← NUEVO\n    # campo legacy para no romper clientes antiguos\n    image_url: Optional[HttpUrl] = None\n\n    class Config:\n        from_attributes = True\n",
    "rental-mvp/app/schemas/user.py": "# app/schemas/user.py\nfrom pydantic import BaseModel, EmailStr\n\nclass UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\n\n\nclass UserOut(BaseModel):\n    id: int\n    username: str\n    email: EmailStr\n\n    class Config:              # <-- aquí\n        from_attributes = True\n",
    "rental-mvp/app/crud/category.py": "# app/crud/category.py\nfrom typing import List, Optional\n\nfrom sqlalchemy.orm import Session\n\nfrom app.models.models import Category\nfrom app.schemas.category import CategoryCreate\n\n\ndef get_category(db: Session, category_id: int) -> Optional[Category]:\n    return db.query(Category).filter(Category.id == category_id).first()\n\n\ndef get_categories(db: Session) -> List[Category]:\n    return db.query(Category).order_by(Category.name).all()\n\n\ndef create_category(db: Session, cat_in: CategoryCreate) -> Category:\n    db_cat = Category(**cat_in.model_dump())\n    db.add(db_cat)\n    db.commit()\n    db.refresh(db_cat)\n    return db_cat\n",
    "rental-mvp/app/crud/rental.py": "# app/crud/rental.py\nfrom decimal import Decimal, ROUND_HALF_UP\nfrom datetime import datetime\nfrom typing import List\n\nfrom sqlalchemy.orm import Session\n\nfrom app.models.models import Item, Rental\nfrom app.schemas.rental import RentalCreate\n\n\ndef get_rental(db: Session, rental_id: int) -> Rental | None:\n    return db.query(Rental).filter(Rental.id == rental_id).first()\n\n\ndef get_rentals_by_user(db: Session, renter_id: int) -> List[Rental]:\n    return db.query(Rental).filter(Rental.renter_id == renter_id).all()\n\n\ndef create_rental(db: Session, renter_id: int, rent_in: RentalCreate) -> Rental:\n    \"\"\"Crea un alquiler y calcula el depósito como 120 % del coste estimado,\n    redondeado a 2 decimales para evitar errores de coma flotante.\"\"\"\n    item = db.query(Item).get(rent_in.item_id)  # legacy API, suficiente aquí\n    hours = (rent_in.end_at - rent_in.start_at).total_seconds() / 3600\n    estimated = hours * item.price_per_h\n\n    deposit = float(                      # guardamos como float en la BD\n        Decimal(estimated * 1.2).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n    )\n\n    db_rental = Rental(\n        renter_id=renter_id,\n        deposit=deposit,\n        returned=False,\n        **rent_in.model_dump(),           # pydantic v2\n    )\n\n    db.add(db_rental)\n    item.available = False\n    db.commit()\n    db.refresh(db_rental)\n    return db_rental\n\n\ndef mark_returned(db: Session, rental: Rental) -> Rental:\n    \"\"\"Marca el alquiler como devuelto y vuelve a poner el ítem disponible.\"\"\"\n    rental.returned = True\n    rental.item.available = True\n    db.commit()\n    db.refresh(rental)\n    return rental\n",
    "rental-mvp/app/crud/__init__.py": "\"\"\"\nAl importar ``app.crud`` re-exportamos helpers de todos los sub-módulos\npara poder usarlos como ``crud.algo`` sin tener que encadenar paquetes.\n\"\"\"\n\n# ───────────────────────────── users ──────────────────────────────────────\nfrom .user import (           # noqa: F401  (re-export)\n    get_user_by_username,\n    get_user_by_email,        # 🆕\n    create_user,\n    verify_password,\n)\n\n# ───────────────────────────── items ──────────────────────────────────────\nfrom .item import (           # noqa: F401\n    get_item,\n    get_items,\n    get_items_by_owner,\n    create_item,\n    update_item,\n    delete_item,\n)\n\n# ─────────────────────────── rentals ──────────────────────────────────────\nfrom .rental import (         # noqa: F401\n    get_rental,\n    get_rentals_by_user,\n    create_rental,\n    mark_returned,\n)\n\n# ───────────────────────── categories ─────────────────────────────────────\nfrom .category import (       # noqa: F401\n    get_category,\n    get_categories,\n    create_category,\n)\n\n__all__: list[str] = [\n    # users\n    \"get_user_by_username\",\n    \"get_user_by_email\",      # 🆕\n    \"create_user\",\n    \"verify_password\",\n    # items\n    \"get_item\",\n    \"get_items\",\n    \"get_items_by_owner\",\n    \"create_item\",\n    \"update_item\",\n    \"delete_item\",\n    # rentals\n    \"get_rental\",\n    \"get_rentals_by_user\",\n    \"create_rental\",\n    \"mark_returned\",\n    # categories\n    \"get_category\",\n    \"get_categories\",\n    \"create_category\",\n]\n",
    "rental-mvp/app/crud/item.py": "# app/crud/item.py\nfrom __future__ import annotations\n\nfrom typing import List, Optional, Tuple\n\nfrom sqlalchemy import asc, desc, or_\nfrom sqlalchemy.orm import Session, joinedload\n\nfrom app.models.models import Category, Item, ItemImage\nfrom app.schemas.item import ItemCreate, ItemUpdate\n\n# ───────────────────────── helpers privados ────────────────────────────────\ndef _get_categories_or_400(db: Session, ids: list[int]) -> list[Category]:\n    \"\"\"\n    Devuelve la lista de categorías cuyo id esté en *ids* o lanza ValueError\n    si alguna no existe.\n    \"\"\"\n    cats = db.query(Category).filter(Category.id.in_(ids)).all()\n    if len(cats) != len(ids):\n        missing = set(ids) - {c.id for c in cats}\n        raise ValueError(f\"Categoría(s) inexistente(s): {', '.join(map(str, missing))}\")\n    return cats\n\n\ndef _apply_ordering(query, order_by: str | None, order_dir: str | None):\n    \"\"\"\n    Aplica la ordenación solicitada.  El frontend envía:\n      · order_by  ∈ {\"price\", \"name\"}\n      · order_dir ∈ {\"asc\", \"desc\"}\n    \"\"\"\n    if not order_by:\n        return query  # sin ordenación\n\n    mapping = {\n        \"price\": Item.price_per_h,\n        \"name\": Item.name,\n        \"id\": Item.id,  # comodín por si acaso\n    }\n    column = mapping.get(order_by, Item.id)\n    return query.order_by(asc(column) if order_dir == \"asc\" else desc(column))\n\n\n# ─────────────────────────────── Lectura ────────────────────────────────────\ndef get_item(db: Session, item_id: int) -> Optional[Item]:\n    \"\"\"\n    Obtiene un ítem por id con categorías **y todas sus imágenes** pre-cargadas.\n    \"\"\"\n    return (\n        db.query(Item)\n        .options(joinedload(Item.categories), joinedload(Item.images))\n        .filter(Item.id == item_id)\n        .first()\n    )\n\n\ndef _build_items_query(\n    db: Session,\n    *,\n    name: Optional[str] = None,\n    min_price: Optional[float] = None,\n    max_price: Optional[float] = None,\n    available: Optional[bool] = None,\n    categories: Optional[List[int]] = None,\n    order_by: Optional[str] = None,\n    order_dir: Optional[str] = None,\n):\n    \"\"\"\n    Crea la consulta base aplicando filtros dinámicos y la ordenación.\n    \"\"\"\n    q = db.query(Item).options(joinedload(Item.categories), joinedload(Item.images))\n\n    # ── filtros texto / rango precio / disponibilidad ──────────────────────\n    if name:\n        pattern = f\"%{name}%\"\n        q = q.filter(or_(Item.name.ilike(pattern), Item.description.ilike(pattern)))\n\n    if min_price is not None:\n        q = q.filter(Item.price_per_h >= min_price)\n\n    if max_price is not None:\n        q = q.filter(Item.price_per_h <= max_price)\n\n    if available is not None:\n        q = q.filter(Item.available == available)\n\n    # ── filtro por categorías (al menos una coincidente) ───────────────────\n    if categories:\n        q = q.filter(Item.categories.any(Category.id.in_(categories)))\n\n    # ── ordenación ─────────────────────────────────────────────────────────\n    return _apply_ordering(q, order_by, order_dir)\n\n\ndef get_items(\n    db: Session,\n    skip: int = 0,\n    limit: int = 100,\n    *,\n    name: Optional[str] = None,\n    min_price: Optional[float] = None,\n    max_price: Optional[float] = None,\n    available: Optional[bool] = None,\n    categories: Optional[List[int]] = None,\n    order_by: Optional[str] = None,\n    order_dir: Optional[str] = None,\n) -> Tuple[List[Item], int]:\n    \"\"\"\n    Devuelve la lista paginada de ítems junto con el total de resultados\n    antes de la paginación (para cabecera X-Total-Count).\n    \"\"\"\n    q = _build_items_query(\n        db,\n        name=name,\n        min_price=min_price,\n        max_price=max_price,\n        available=available,\n        categories=categories,\n        order_by=order_by,\n        order_dir=order_dir,\n    )\n    total = q.count()\n    items = q.offset(skip).limit(limit).all()\n    return items, total\n\n\ndef get_items_by_owner(db: Session, owner_id: int) -> List[Item]:\n    \"\"\"\n    Lista todos los ítems propiedad de *owner_id* con categorías e imágenes.\n    \"\"\"\n    return (\n        db.query(Item)\n        .options(joinedload(Item.categories), joinedload(Item.images))\n        .filter(Item.owner_id == owner_id)\n        .all()\n    )\n\n\n# ─────────────────────────────── Escritura ──────────────────────────────────\ndef create_item(db: Session, item_in: ItemCreate, owner_id: int) -> Item:\n    \"\"\"\n    Crea un ítem, vincula categorías e **inserta todas las imágenes**.\n    \"\"\"\n    # la primera imagen se guarda también en el campo legacy `image_url`\n    main = str(item_in.image_urls[0])\n\n    db_item = Item(\n        name=item_in.name,\n        description=item_in.description,\n        price_per_h=item_in.price_per_h,\n        image_url=main,\n        owner_id=owner_id,\n    )\n\n    # categorías\n    if item_in.categories:\n        db_item.categories = _get_categories_or_400(db, item_in.categories)\n\n    # imágenes (tabla hija)\n    db_item.images = [ItemImage(url=str(url)) for url in item_in.image_urls]\n\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n\n\ndef update_item(db: Session, item: Item, item_in: ItemUpdate) -> Item:\n    \"\"\"\n    Actualiza los campos presentes en *item_in* (PATCH).\n    Si se envían nuevas `image_urls` se reemplaza la galería completa.\n    \"\"\"\n    data = item_in.model_dump(exclude_unset=True, exclude={\"categories\", \"image_urls\"})\n    for key, value in data.items():\n        setattr(item, key, value)\n\n    # categorías (si vienen)\n    if item_in.categories is not None:\n        item.categories = _get_categories_or_400(db, item_in.categories)\n\n    # imágenes\n    if item_in.image_urls is not None:\n        item.image_url = str(item_in.image_urls[0])  # sync campo destacado\n        item.images = [ItemImage(url=str(url)) for url in item_in.image_urls]\n\n    db.commit()\n    db.refresh(item)\n    return item\n\n\ndef delete_item(db: Session, item: Item) -> None:\n    \"\"\"Elimina un ítem (y cascada sus imágenes).\"\"\"\n    db.delete(item)\n    db.commit()\n",
    "rental-mvp/app/crud/user.py": "# app/crud/user.py\nfrom __future__ import annotations\n\nimport bcrypt\nfrom passlib.context import CryptContext\nfrom sqlalchemy.orm import Session\n\nfrom app.models.models import User\nfrom app.schemas.user import UserCreate\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n# ───────────────────────── helpers privados ──────────────────────────────\n\n\ndef _hash_password(pwd: str) -> str:\n    \"\"\"Devuelve el hash seguro de *pwd* usando passlib/bcrypt.\"\"\"\n    return pwd_context.hash(pwd)\n\n\n# ────────────────────────────── Lectura ───────────────────────────────────\n\n\ndef get_user_by_username(db: Session, username: str) -> User | None:\n    \"\"\"Busca un usuario por *username* (o None si no existe).\"\"\"\n    return db.query(User).filter(User.username == username).first()\n\n\ndef get_user_by_email(db: Session, email: str) -> User | None:\n    \"\"\"Busca un usuario por email (o None si no existe).\"\"\"\n    return db.query(User).filter(User.email == email).first()\n\n\n# ───────────────────────────── Escritura ──────────────────────────────────\n\n\ndef create_user(db: Session, user_in: UserCreate) -> User:\n    \"\"\"\n    Crea un nuevo usuario con contraseña hasheada y lo devuelve.\n    Lanza IntegrityError si el username/email ya existen.\n    \"\"\"\n    db_user = User(\n        username=user_in.username,\n        email=user_in.email,\n        hashed_pw=_hash_password(user_in.password),\n    )\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\n# ──────────────────────── Utilidades varias ──────────────────────────────\n\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    \"\"\"\n    Comprueba que *plain_password* coincide con el hash almacenado.\n    Se usa bcrypt directamente para evitar dependencias implícitas.\n    \"\"\"\n    try:\n        return bcrypt.checkpw(plain_password.encode(), hashed_password.encode())\n    except Exception:  # noqa: BLE001\n        # bcrypt lanza ValueError si el hash no es válido\n        return False\n",
    "rental-mvp/app/core/config.py": "# app/core/config.py\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    DATABASE_URL: str           # p. ej. sqlite:///./rental.db\n    SECRET_KEY: str             # usa algo largo y aleatorio\n    ALGORITHM: str = \"HS256\"\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60\n\n    class Config:\n        env_file = \".env\"\n\nsettings = Settings()\n",
    "rental-mvp/app/core/security.py": "# app/core/security.py\nfrom datetime import datetime, timedelta\nfrom jose import jwt\nfrom app.core.config import settings\n\ndef create_access_token(subject: str) -> str:\n    to_encode = {\"sub\": subject}\n    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)\n",
    "rental-mvp/app/api/rentals.py": "# app/api/rentals.py\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List\n\nfrom app import crud, schemas\nfrom app.deps import get_db, get_current_user\n\nrouter = APIRouter()\n\n@router.post(\"/\", response_model=schemas.RentalOut, status_code=status.HTTP_201_CREATED)\ndef rent_item(rent_in: schemas.RentalCreate,\n              db: Session = Depends(get_db),\n              current_user=Depends(get_current_user)):\n    # comprueba que el ítem está libre\n    item = crud.get_item(db, rent_in.item_id)\n    if not item or not item.available:\n        raise HTTPException(400, \"Item no disponible\")\n    return crud.create_rental(db, current_user.id, rent_in)\n\n@router.get(\"/me\", response_model=List[schemas.RentalOut])\ndef read_my_rentals(db: Session = Depends(get_db),\n                    current_user=Depends(get_current_user)):\n    return crud.get_rentals_by_user(db, current_user.id)\n\n@router.post(\"/{rental_id}/return\", response_model=schemas.RentalOut)\ndef return_item(rental_id: int,\n                db: Session = Depends(get_db),\n                current_user=Depends(get_current_user)):\n    rental = crud.get_rental(db, rental_id)\n    if not rental or rental.renter_id != current_user.id:\n        raise HTTPException(404, \"Alquiler no encontrado\")\n    return crud.mark_returned(db, rental)\n",
    "rental-mvp/app/api/items.py": "# app/api/items.py\nfrom typing import List, Optional\nfrom urllib.parse import urlencode\n\nfrom fastapi import (\n    APIRouter,\n    Depends,\n    HTTPException,\n    Query,\n    Request,\n    Response,\n    status,\n)\nfrom sqlalchemy.orm import Session\n\nfrom app import crud, schemas\nfrom app.deps import get_db, get_current_user\n\nrouter = APIRouter()\n\n# ──────────────────────────────── Crear ──────────────────────────────────────\n\n\n@router.post(\n    \"/\",\n    response_model=schemas.ItemOut,\n    status_code=status.HTTP_201_CREATED,\n)\ndef create_item(\n    item_in: schemas.ItemCreate,\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user),\n):\n    \"\"\"\n    Crea un ítem asociado al usuario autenticado.\n    \"\"\"\n    return crud.create_item(db, item_in, owner_id=current_user.id)\n\n\n# ────────────────────── helpers paginación (RFC-5988) ────────────────────────\n\n\ndef _build_pagination_links(\n    request: Request,\n    skip: int,\n    limit: int,\n    total: int,\n    **filters,\n) -> str:\n    \"\"\"\n    Devuelve la cabecera **Link** con rel=\"next\" y/o rel=\"prev\"\n    siguiendo la RFC-5988.\n    \"\"\"\n    links: list[str] = []\n\n    # eliminamos skip y limit existentes (solo se permite uno por llamada)\n    base_url = request.url.remove_query_params(\"skip\")\n    base_url = base_url.remove_query_params(\"limit\")\n\n    def _url(new_skip: int) -> str:\n        # ► descartamos filtros cuyo valor sea None para no enviar \"None\" literal\n        params = {k: v for k, v in filters.items() if v is not None}\n\n        # urlencode con doseq=True para repetir parámetros como categories=1&categories=2\n        params.update({\"skip\": new_skip, \"limit\": limit})\n        return f\"<{base_url}?{urlencode(params, doseq=True)}>\"\n\n    # next\n    if skip + limit < total:\n        links.append(f'{_url(skip + limit)}; rel=\"next\"')\n\n    # prev\n    if skip > 0:\n        prev_skip = max(skip - limit, 0)\n        links.append(f'{_url(prev_skip)}; rel=\"prev\"')\n\n    return \", \".join(links)\n\n\n# ──────────────────────────────── Leer ───────────────────────────────────────\n\n\n@router.get(\"/\", response_model=List[schemas.ItemOut])\ndef read_items(\n    request: Request,\n    response: Response,\n    # ------------- paginación -------------\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    # ------------- filtros ---------------\n    name: Optional[str] = None,\n    min_price: Optional[float] = Query(None, ge=0),\n    max_price: Optional[float] = Query(None, ge=0),\n    available: Optional[bool] = None,\n    categories: Optional[List[int]] = Query(    # ← nuevo\n        default=None,\n        description=\"IDs de categorías (cualquiera de ellas)\",\n    ),\n    # ------------- ordenación ------------\n    order_by: Optional[str] = Query(\n        None,\n        pattern=\"^(price|name|id)$\",\n        description=\"Campo de ordenación ('price'|'name'|'id')\",\n    ),\n    order_dir: Optional[str] = Query(\n        None,\n        pattern=\"^(asc|desc)$\",\n        description=\"Dirección ('asc'|'desc')\",\n    ),\n    # dependencia DB\n    db: Session = Depends(get_db),\n):\n    \"\"\"\n    Lista pública de ítems con filtros, paginación y soporte de ordenación.\n\n    Devuelve además cabeceras **X-Total-Count** y **Link** para facilitar la\n    integración con front-ends SPA.\n    \"\"\"\n    items, total = crud.get_items(\n        db,\n        skip=skip,\n        limit=limit,\n        name=name,\n        min_price=min_price,\n        max_price=max_price,\n        available=available,\n        categories=categories,\n        order_by=order_by,\n        order_dir=order_dir,\n    )\n\n    # ► cabeceras\n    response.headers[\"X-Total-Count\"] = str(total)\n    if total:\n        link = _build_pagination_links(\n            request,\n            skip,\n            limit,\n            total,\n            name=name,\n            min_price=min_price,\n            max_price=max_price,\n            available=available,\n            categories=categories,\n            order_by=order_by,\n            order_dir=order_dir,\n        )\n        if link:\n            response.headers[\"Link\"] = link\n\n    return items\n\n\n# ───────────────────────── Mis ítems ─────────────────────────────────────────\n\n\n@router.get(\"/me\", response_model=List[schemas.ItemOut])\ndef read_my_items(\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user),\n):\n    \"\"\"\n    Devuelve todos los ítems publicados por el usuario autenticado.\n    \"\"\"\n    return crud.get_items_by_owner(db, current_user.id)\n\n\n# ──────────────────────────── Actualizar ─────────────────────────────────────\n\n\n@router.patch(\"/{item_id}\", response_model=schemas.ItemOut)\ndef partial_update_item(\n    item_id: int,\n    item_in: schemas.ItemUpdate,\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user),\n):\n    db_item = crud.get_item(db, item_id)\n    if not db_item or db_item.owner_id != current_user.id:\n        raise HTTPException(404, \"Item no encontrado\")\n    return crud.update_item(db, db_item, item_in)\n\n\n@router.put(\"/{item_id}\", response_model=schemas.ItemOut)\ndef full_update_item(\n    item_id: int,\n    item_in: schemas.ItemCreate,\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user),\n):\n    db_item = crud.get_item(db, item_id)\n    if not db_item or db_item.owner_id != current_user.id:\n        raise HTTPException(404, \"Item no encontrado\")\n    # Reutilizamos la lógica de PATCH convirtiendo ItemCreate → ItemUpdate\n    return crud.update_item(\n        db,\n        db_item,\n        schemas.ItemUpdate(**item_in.model_dump()),\n    )\n\n\n# ──────────────────────────── Eliminar ───────────────────────────────────────\n\n\n@router.delete(\"/{item_id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_item(\n    item_id: int,\n    db: Session = Depends(get_db),\n    current_user=Depends(get_current_user),\n):\n    db_item = crud.get_item(db, item_id)\n    if not db_item or db_item.owner_id != current_user.id:\n        raise HTTPException(404, \"Item no encontrado\")\n    crud.delete_item(db, db_item)\n",
    "rental-mvp/app/api/categories.py": "# app/api/categories.py\nfrom typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\n\nfrom app import crud, schemas\nfrom app.deps import get_db\n\n# ⬇⬇⬇  ¡SIN prefix aquí!  ⬇⬇⬇\nrouter = APIRouter(tags=[\"categories\"])\n\n\n@router.get(\"/\", response_model=List[schemas.CategoryOut])\ndef list_categories(db: Session = Depends(get_db)):\n    \"\"\"Lista todas las categorías ordenadas alfabéticamente.\"\"\"\n    return crud.get_categories(db)\n\n\n@router.post(\"/\", response_model=schemas.CategoryOut,\n             status_code=status.HTTP_201_CREATED)\ndef create_category(cat_in: schemas.CategoryCreate,\n                    db: Session = Depends(get_db)):\n    \"\"\"Crea una nueva categoría (nombre único).\"\"\"\n    return crud.create_category(db, cat_in)\n\n\n@router.get(\"/{cat_id}\", response_model=schemas.CategoryOut)\ndef get_category(cat_id: int, db: Session = Depends(get_db)):\n    \"\"\"Obtiene una categoría por ID.\"\"\"\n    cat = crud.get_category(db, cat_id)\n    if not cat:\n        raise HTTPException(404, \"Categoría no encontrada\")\n    return cat\n",
    "rental-mvp/app/api/auth.py": "# app/api/auth.py\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom sqlalchemy.orm import Session\n\nfrom app import crud, schemas\nfrom app.deps import get_db\nfrom app.core.security import create_access_token\nfrom app.schemas.token import Token\n\nrouter = APIRouter()\n\n\n@router.post(\"/signup\", response_model=schemas.UserOut, status_code=status.HTTP_201_CREATED)\ndef signup(user_in: schemas.UserCreate, db: Session = Depends(get_db)):\n    if crud.get_user_by_username(db, user_in.username):\n        raise HTTPException(400, \"Nombre de usuario en uso\")\n    if crud.get_user_by_email(db, user_in.email):          # 🆕\n        raise HTTPException(400, \"Email ya registrado\")\n    return crud.create_user(db, user_in)\n\n\n@router.post(\"/token\", response_model=Token)\ndef login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n    db: Session = Depends(get_db),\n):\n    user = crud.get_user_by_username(db, form_data.username)\n    if not user or not crud.verify_password(form_data.password, user.hashed_pw):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Usuario o contraseña incorrectos\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token = create_access_token(subject=user.username)\n    return {\"access_token\": access_token}\n",
    "rental-mvp/app/api/__init__.py": "# app/api/__init__.py\n# paquete de routers\n",
    "rental-mvp/app/api/upload.py": "# app/api/upload.py\nimport os\nimport shutil\nimport uuid\nfrom fastapi import APIRouter, UploadFile, Depends, HTTPException, Request\nfrom starlette.status import HTTP_201_CREATED\n\nfrom app.deps import get_current_user\n\nUPLOAD_DIR = \"./uploads\"\nos.makedirs(UPLOAD_DIR, exist_ok=True)\n\nrouter = APIRouter()\n\n@router.post(\"/\", status_code=HTTP_201_CREATED)\nasync def upload_image(\n    file: UploadFile,\n    request: Request,\n    user=Depends(get_current_user),\n):\n    # ───── validación simple ─────\n    if file.content_type.split(\"/\")[0] != \"image\":\n        raise HTTPException(status_code=400, detail=\"Solo se permiten imágenes\")\n\n    # ───── guardado en disco ─────\n    ext  = os.path.splitext(file.filename)[1]\n    name = f\"{uuid.uuid4()}{ext}\"\n    path = os.path.join(UPLOAD_DIR, name)\n\n    with open(path, \"wb\") as buffer:\n        shutil.copyfileobj(file.file, buffer)\n\n    # ───── URL pública del archivo ─────\n    # Genera la ruta absoluta basándose en el mount StaticFiles →  /uploads/…\n    url = request.url_for(\"uploads\", path=name)      # http://<host>:<port>/uploads/<uuid>.<ext>\n\n    return {\"url\": str(url)}\n",
    "rental-mvp/tests/test_api.py": "import datetime\nfrom urllib.parse import parse_qs, urlparse\n\nfrom fastapi import status\n\n\n# ---------------------------------------------------------------------------\n# helpers\n# ---------------------------------------------------------------------------\n\ndef _signup(client, username=\"alice\", email=\"alice@example.com\", password=\"secret\"):\n    return client.post(\n        \"/api/auth/signup\",\n        json={\"username\": username, \"email\": email, \"password\": password},\n    )\n\n\ndef _login(client, username=\"alice\", password=\"secret\"):\n    res = client.post(\n        \"/api/auth/token\",\n        data={\"username\": username, \"password\": password},\n        headers={\"Content-Type\": \"application/x-www-form-urlencoded\"},\n    )\n    return res.json()[\"access_token\"]\n\n\n# ---------------------------------------------------------------------------\n# auth\n# ---------------------------------------------------------------------------\n\ndef test_signup_login(client):\n    r = _signup(client)\n    assert r.status_code == status.HTTP_201_CREATED\n    data = r.json()\n    assert data[\"username\"] == \"alice\"\n    assert data[\"email\"] == \"alice@example.com\"\n\n    token = _login(client)\n    assert token, \"No se devolvió access_token\"\n\n\n# ---------------------------------------------------------------------------\n# items + rentals flow\n# ---------------------------------------------------------------------------\n\ndef test_item_crud_and_rental_flow(client):\n    # usuarios\n    _signup(client, \"alice\", \"alice@example.com\", \"pwd\")\n    token_alice = _login(client, \"alice\", \"pwd\")\n    auth_alice = {\"Authorization\": f\"Bearer {token_alice}\"}\n\n    _signup(client, \"bob\", \"bob@example.com\", \"pwd\")\n    token_bob = _login(client, \"bob\", \"pwd\")\n    auth_bob = {\"Authorization\": f\"Bearer {token_bob}\"}\n\n    # ► Alice crea un ítem\n    r = client.post(\n        \"/api/items/\",\n        json={\"name\": \"Taladro Bosch\", \"description\": \"800 W\", \"price_per_h\": 4.5},\n        headers=auth_alice,\n    )\n    assert r.status_code == status.HTTP_201_CREATED\n    item_id = r.json()[\"id\"]\n\n    # ► Listado público incluye el ítem\n    r = client.get(\"/api/items/\")\n    assert any(it[\"id\"] == item_id for it in r.json())\n\n    # ► Bob alquila el ítem\n    start = datetime.datetime.utcnow()\n    end = start + datetime.timedelta(hours=2)\n    r = client.post(\n        \"/api/rentals/\",\n        json={\"item_id\": item_id, \"start_at\": start.isoformat(), \"end_at\": end.isoformat()},\n        headers=auth_bob,\n    )\n    assert r.status_code == status.HTTP_201_CREATED\n    rental = r.json()\n    assert rental[\"deposit\"] == round(2 * 4.5 * 1.2, 2)\n\n    # ► Devolución\n    r = client.post(f\"/api/rentals/{rental['id']}/return\", headers=auth_bob)\n    assert r.status_code == status.HTTP_200_OK\n    assert r.json()[\"returned\"] is True\n\n\n# ---------------------------------------------------------------------------\n# PUT completo\n# ---------------------------------------------------------------------------\n\ndef test_put_full_update_item(client):\n    _signup(client, \"neo\", \"n@e.o\", \"pwd\")\n    token = _login(client, \"neo\", \"pwd\")\n    auth = {\"Authorization\": f\"Bearer {token}\"}\n\n    # crea\n    r = client.post(\n        \"/api/items/\",\n        json={\"name\": \"Martillo\", \"description\": \"mango madera\", \"price_per_h\": 3},\n        headers=auth,\n    )\n    item_id = r.json()[\"id\"]\n\n    # reemplaza todos los campos\n    r = client.put(\n        f\"/api/items/{item_id}\",\n        json={\"name\": \"Martillo PRO\", \"description\": \"fibra\", \"price_per_h\": 4},\n        headers=auth,\n    )\n    assert r.status_code == status.HTTP_200_OK\n    data = r.json()\n    assert data[\"name\"] == \"Martillo PRO\"\n    assert data[\"price_per_h\"] == 4\n\n\n# ---------------------------------------------------------------------------\n# nuevas coberturas\n# ---------------------------------------------------------------------------\n\ndef test_rental_end_before_start_validation(client):\n    \"\"\"El esquema debe rechazar end_at ≤ start_at (422 Unprocessable Entity).\"\"\"\n    _signup(client, \"carl\", \"c@r.l\", \"pwd\")\n    token = _login(client, \"carl\", \"pwd\")\n    auth = {\"Authorization\": f\"Bearer {token}\"}\n\n    # necesita un ítem primero\n    r = client.post(\"/api/items/\", json={\"name\": \"Sierra\", \"price_per_h\": 2}, headers=auth)\n    item_id = r.json()[\"id\"]\n\n    now = datetime.datetime.utcnow()\n    r = client.post(\n        \"/api/rentals/\",\n        json={\"item_id\": item_id, \"start_at\": now.isoformat(), \"end_at\": now.isoformat()},\n        headers=auth,\n    )\n    assert r.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n\n\ndef test_items_pagination_headers(client):\n    \"\"\"Verifica `X-Total-Count` y cabecera Link paginada.\"\"\"\n    _signup(client, \"pag\", \"p@g.e\", \"pwd\")\n    token = _login(client, \"pag\", \"pwd\")\n    auth = {\"Authorization\": f\"Bearer {token}\"}\n\n    # crea 3 ítems\n    for i in range(3):\n        client.post(\n            \"/api/items/\",\n            json={\"name\": f\"Item{i}\", \"price_per_h\": 1 + i},\n            headers=auth,\n        )\n\n    # página 1 (2 resultados)\n    r = client.get(\"/api/items/?skip=0&limit=2\")\n    assert r.status_code == 200\n    assert len(r.json()) == 2\n    assert r.headers[\"X-Total-Count\"] == \"3\"\n    link = r.headers.get(\"Link\")\n    assert link and 'rel=\"next\"' in link\n\n    # parseamos la URL next\n    next_url = link.split(\";\")[0].strip(\"<>\")\n    qs = parse_qs(urlparse(next_url).query)\n    assert qs[\"skip\"] == [\"2\"]\n    assert qs[\"limit\"] == [\"2\"]\n\n    # página 2\n    r2 = client.get(next_url)\n    assert r2.status_code == 200\n    assert len(r2.json()) == 1\n    assert 'rel=\"prev\"' in r2.headers.get(\"Link\", \"\")\n",
    "rental-mvp/tests/conftest.py": "\"\"\"\nFixtures de prueba para FastAPI.\n\nPara evitar colisiones entre tests, cada test recibe su propia base SQLite\nen memoria.  Usamos un StaticPool para que todas las peticiones que se\nejecutan dentro del mismo test compartan la misma conexión.\n\"\"\"\n\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.pool import StaticPool\n\nfrom app.main import app\nfrom app.models.database import Base\nfrom app.deps import get_db\n\n\n@pytest.fixture()\ndef db():\n    \"\"\"\n    Crea una base de datos SQLite en memoria exclusiva para el test\n    y devuelve una sesión SQLAlchemy conectada a ella.\n    \"\"\"\n    engine = create_engine(\n        \"sqlite://\",\n        connect_args={\"check_same_thread\": False},\n        poolclass=StaticPool,           # <<— comparte conexión en el test\n    )\n    Base.metadata.create_all(bind=engine)\n\n    TestingSessionLocal = sessionmaker(\n        autocommit=False,\n        autoflush=False,\n        bind=engine,\n    )\n\n    session = TestingSessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()\n\n\n@pytest.fixture()\ndef client(db):\n    \"\"\"\n    Devuelve un TestClient que usa la sesión `db` anterior para todas\n    las dependencias `get_db` dentro de la app.\n    \"\"\"\n\n    def override_get_db():\n        try:\n            yield db\n        finally:\n            pass\n\n    # Sobrescribimos la dependencia\n    app.dependency_overrides[get_db] = override_get_db\n\n    with TestClient(app) as c:\n        yield c\n",
    "rental-mvp/.pytest_cache/.gitignore": "# Created by pytest automatically.\n*\n",
    "rental-mvp/.pytest_cache/README.md": "# pytest cache directory #\n\nThis directory contains data from the pytest's cache plugin,\nwhich provides the `--lf` and `--ff` options, as well as the `cache` fixture.\n\n**Do not** commit this to version control.\n\nSee [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.\n",
    "rental-mvp/.pytest_cache/CACHEDIR.TAG": "Signature: 8a477f597d28d172789f06886806bc55\n# This file is a cache directory tag created by pytest.\n# For information about cache directory tags, see:\n#\thttps://bford.info/cachedir/spec.html\n",
    "rental-mvp/.pytest_cache/v/cache/nodeids": "[\n  \"tests/test_api.py::test_item_crud_and_rental_flow\",\n  \"tests/test_api.py::test_items_pagination_headers\",\n  \"tests/test_api.py::test_put_full_update_item\",\n  \"tests/test_api.py::test_rental_end_before_start_validation\",\n  \"tests/test_api.py::test_signup_login\"\n]",
    "rental-mvp/.pytest_cache/v/cache/lastfailed": "{}",
    "rental-mvp/backend/Dockerfile": "FROM python:3.12-slim\n\n# Dependencias de sistema para compilar algunas wheels\nRUN apt-get update && apt-get install -y build-essential libffi-dev git \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY app ./app\nCOPY .env .\nCOPY uploads ./uploads\n\nEXPOSE 8000\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--workers\", \"4\"]\n"
}
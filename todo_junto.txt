--- frontend/index.html ---
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Rental-MVP</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


--- frontend/package.json ---
{
  "name": "rental-mvp-frontend",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint \"src/**/*.{ts,tsx}\" --max-warnings=0 --fix"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.4",
    "@heroicons/react": "^2.2.0",
    "@hookform/resolvers": "^3.3.4",
    "@tanstack/react-query": "^5.38.0",
    "axios": "^1.6.8",
    "clsx": "^2.1.1",
    "focus-trap-react": "^10.2.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.60.0",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.5.0",
    "react-router-dom": "^6.23.1",
    "zod": "^3.23.4",
    "zxcvbn": "^4.4.2"
  },
  "devDependencies": {
    "@tailwindcss/container-queries": "",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/line-clamp": "^0.4.4",
    "@tailwindcss/typography": "^0.5.16",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.2",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "@vitejs/plugin-react": "^4.2.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.5.0",
    "vite": "^5.3.1"
  }
}


--- frontend/vite.config.ts ---
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: {
      // ‚ñ∫ redirige API a tu back (FastAPI en :8000)
      "/api": "http://localhost:8000"
    }
  }
});


--- frontend/Dockerfile ---
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Etapa 1: build Vite ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FROM node:20 AS builder
WORKDIR /frontend

COPY package.json package-lock.json* ./
RUN npm ci

COPY . .
RUN npm run build          # genera /frontend/dist

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Etapa 2: Nginx ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FROM nginx:1.27-alpine

# Copia est√°ticos compilados
COPY --from=builder /frontend/dist /usr/share/nginx/html

# Proxy /api ‚Üí backend
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


--- frontend/nginx.conf ---
server {
    listen 80;
    server_name _;

    # est√°ticos de Vite
    root /usr/share/nginx/html;
    index index.html;

    # single-page
    location / {
        try_files $uri $uri/ /index.html;
    }

    # proxy API
    location /api/ {
        proxy_pass http://backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # subidas
    location /uploads/ {
        proxy_pass http://backend:8000;
    }
}


--- frontend/tsconfig.json ---
{
    "compilerOptions": {
        "target": "ES2022",
        "lib": [
            "DOM",
            "DOM.Iterable",
            "ES2022"
        ],
        "module": "ESNext",
        "moduleResolution": "Node",
        "types": [
            "vite/client"
        ],
        "strict": true,
        "jsx": "react-jsx",
        "resolveJsonModule": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
    },
    "include": [
        "src"
    ]
}

--- frontend/postcss.config.js ---
// rental-mvp/frontend/postcss.config.js
export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {}
    }
};


--- frontend/tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: ['./index.html', './src/**/*.{ts,tsx}'],
    theme: {
        //   ‚Üì‚Üì‚Üì breakpoints fluidos
        screens: {
            xs: '375px',
            sm: '640px',
            md: '768px',
            lg: '1024px',
            xl: '1280px',
            '2xl': '1440px',
            '3xl': '1920px'
        },
        container: { center: true, padding: '1rem' },
        extend: {
            fontFamily: { sans: ['Inter', 'system-ui', 'sans-serif'] },
            colors: {
                brand: { DEFAULT: '#0d6efd', hover: '#0b5ed7' },
                surface: '#ffffff'
            },
            boxShadow: {
                card: '0 1px 3px rgba(0,0,0,.08)',
                cardHover: '0 4px 12px rgba(0,0,0,.12)'
            }
        }
    },
    plugins: [
        require('@tailwindcss/forms'),
        require('@tailwindcss/typography'),
        require('@tailwindcss/line-clamp'),
        require('@tailwindcss/container-queries') // üÜï
    ]
};


--- frontend/src/App.tsx ---
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

import { AuthProvider } from "./hooks/useAuth";
import Header from "./components/layout/Header";
import Footer from "./components/layout/Footer";
import Home from "./pages/Home";
import Login from "./pages/Login";
import Register from "./pages/Register";
import Dashboard from "./pages/Dashboard";
import Protected from "./Protected";

import "./styles/global.css";

const queryClient = new QueryClient();

export default function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <BrowserRouter>
          <Header />

          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/login" element={<Login />} />
            <Route path="/register" element={<Register />} />

            {/*  RUTA SEGURA  */}
            <Route
              path="/dashboard"
              element={
                <Protected>
                  <Dashboard />
                </Protected>
              }
            />
          </Routes>

          <Footer />
        </BrowserRouter>
      </AuthProvider>
    </QueryClientProvider>
  );
}


--- frontend/src/api.ts ---
import axios from "axios";

/**
 * Singleton Axios con:
 *  ¬∑ baseURL "/api"
 *  ¬∑ Authorization autom√°tico si hay token en localStorage
 */
export const api = axios.create({ baseURL: "/api" });

api.interceptors.request.use(cfg => {
  const token = localStorage.getItem("token");
  if (token) cfg.headers.Authorization = `Bearer ${token}`;
  return cfg;
});


--- frontend/src/main.tsx ---
// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Toaster } from 'react-hot-toast';          // üÜï
import './styles/global.css';

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <App />
    <Toaster                                         // üÜï
      position="top-right"
      toastOptions={{
        style: { fontSize: '0.875rem' },            // 14 px
        duration: 3000
      }}
    />
  </React.StrictMode>
);


--- frontend/src/utils.ts ---
// utils.ts
/**
 * URL base de la API.  Ajusta en .env.local si no usas localhost:8000
 *   VITE_API_BASE_URL=https://tu-dominio.com
 */
export const API_BASE =
  import.meta.env.VITE_API_BASE_URL ?? "http://localhost:8000";

/**  
 * Devuelve una URL de imagen v√°lida.
 * - Si ya es absoluta ‚Üí la deja tal cual.
 * - Si empieza por ‚Äú/‚Äù ‚Üí la concatena con API_BASE.
 * - Si viene `undefined` ‚Üí usa el *fallback*.
 */
export function resolveImage(url: string | undefined, fallback: string) {
  if (!url) return fallback;
  if (/^https?:\/\//i.test(url)) return url; // absoluta
  return `${API_BASE}${url.startsWith("/") ? "" : "/"}${url}`;
}


--- frontend/src/Protected.tsx ---
import { Navigate, useLocation } from "react-router-dom";
import { useAuth } from "./hooks/useAuth";

export default function Protected({ children }: { children: JSX.Element }) {
  const { token } = useAuth();
  const loc = useLocation();
  return token ? children : <Navigate to="/login" replace state={{ from: loc }} />;
}


--- frontend/src/hooks/useAuth.tsx ---
import React, { createContext, useContext, useState } from "react";

/* ------------------------------------------------------------------ */
/*                       Contexto & proveedor                         */
/* ------------------------------------------------------------------ */
type AuthContextT = {
  token: string | null;
  login: (t: string) => void;
  logout: () => void;
};
const AuthContext = createContext<AuthContextT | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  children
}) => {
  const [token, setToken] = useState<string | null>(
    () => localStorage.getItem("token")
  );

  const login = (t: string) => {
    localStorage.setItem("token", t);
    setToken(t);
  };

  const logout = () => {
    localStorage.removeItem("token");
    setToken(null);
  };

  return (
    <AuthContext.Provider value={{ token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

/* ------------------------------------------------------------------ */
/*                           Hooks util                               */
/* ------------------------------------------------------------------ */
export const useAuth = () => {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth debe usarse dentro de <AuthProvider>");
  return ctx;
};

/** Lee el token directo de localStorage (v√°lido fuera de React). */
export const getTokenLS = () => localStorage.getItem("token");


--- frontend/src/styles/global.css ---
/* frontend/src/styles/global.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* ---------- BASE ---------- */
@layer base {
  html { @apply scroll-smooth; }
  body { @apply bg-gray-50 text-gray-800 antialiased font-sans; }
}

/* ---------- COMPONENTS ---------- */
@layer components {
  /* Botones */
  .btn        { @apply inline-flex items-center justify-center rounded-md bg-brand px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors hover:bg-brand-hover disabled:opacity-60; }
  .btn--ghost { @apply inline-flex items-center justify-center rounded-md border border-brand px-4 py-2 text-sm font-medium text-brand transition-colors hover:bg-brand/5; }

  /* Badges */
  .badge         { @apply inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium; }
  .badge--ok     { @apply badge bg-green-100 text-green-800; }
  .badge--danger { @apply badge bg-red-100 text-red-800; }

  /* Campos select gen√©rico */
  .form-select { @apply block w-full rounded-md border-gray-300 text-sm shadow-sm focus:border-brand focus:ring-brand; }

  /* Toast */
  .toast-success { @apply bg-green-600 text-white; }
  .toast-error   { @apply bg-red-600 text-white; }

  /* T√≠tulos fluidos (ejemplo h1) */
  h1 { font-size: clamp(2.25rem, 5vw + 1rem, 3.5rem); } /* 36 px ‚Üí 56 px aprox */
}

/* ---------- UTILITIES PERSONALIZADAS ---------- */
@layer utilities {
  .text-balance { text-wrap: balance; }

  /* Evita re-pintados innecesarios en grandes listas */
  .content-auto { content-visibility: auto; }

  /* Oculta scrollbar (usarlo con cuidado) */
  .scrollbar-none::-webkit-scrollbar { display: none; }
}


--- frontend/src/features/auth/register.ts ---
import { api } from "../../api";

/** Lanza 400 si el username o el email ya est√°n en uso. */
export async function register(
  username: string,
  email: string,
  password: string
): Promise<void> {
  await api.post("/auth/signup", { username, email, password });
}


--- frontend/src/features/auth/login.ts ---
import { api } from "../../api";

export async function login(username: string, password: string): Promise<string> {
  const { data } = await api.post(
    "/auth/token",
    new URLSearchParams({ username, password }),
    { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
  );
  return data.access_token as string;
}


--- frontend/src/features/categories/useCategories.ts ---
import { useEffect, useState } from 'react';
import axios from 'axios';

export type Category = { id: number; name: string };

export default function useCategories() {
  const [data, setData] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    axios
      .get<Category[]>('/api/categories/')
      .then(r => setData(r.data))
      .finally(() => setLoading(false));
  }, []);

  return { data, loading };
}


--- frontend/src/features/items/useItems.ts ---
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";

export type Item = {
  id: number;
  name: string;
  description?: string;
  price_per_h: number;
  available: boolean;
  image_url?: string;
  categories?: { id: number; name: string }[];
};

export function useItems(params?: URLSearchParams) {
  const queryKey = ["items", params?.toString() ?? ""];

  const { data, isLoading, refetch } = useQuery<Item[]>({
    queryKey,
    queryFn: () =>
      api.get<Item[]>("/items/", { params }).then(r => r.data),
    staleTime: 60_000      // 1 min sin refetch
  });

  return { data: data ?? [], loading: isLoading, refetch };
}


--- frontend/src/features/items/AddItemModal.tsx ---
import { Fragment, useEffect, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { XMarkIcon, PhotoIcon } from "@heroicons/react/24/outline";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import axios from "axios";
import toast from "react-hot-toast";
import useCategories, { Category } from "../categories/useCategories";
import { useAuth } from "../../hooks/useAuth";

/* -------------------------------------------------------------------------- */
/*                               schema + types                               */
/* -------------------------------------------------------------------------- */

const priceRegex = /^\d+([.,]\d{1,2})?$/; // hasta 2 decimales

const schema = z.object({
  name: z.string().min(3, "M√≠nimo 3 caracteres"),
  description: z.string().max(500).optional(),
  price_per_h: z
    .string()
    .regex(priceRegex, "Precio inv√°lido")
    .transform(v => Number(v.replace(",", "."))),
  categories: z.array(z.number()).min(1, "Selecciona al menos una categor√≠a"),
  image: z
    .instanceof(File)
    .refine(f => f.size < 5 * 1024 * 1024, "M√°x. 5 MB")
    .optional()
});

type FormData = z.infer<typeof schema>;

type Props = {
  open: boolean;
  onClose: () => void;
  onCreated: () => void; // callback para refrescar listado
};

/* -------------------------------------------------------------------------- */

export default function AddItemModal({ open, onClose, onCreated }: Props) {
  const { data: cats } = useCategories();
  const { token } = useAuth();

  const {
    register,
    handleSubmit,
    watch,
    reset,
    setValue,
    formState: { errors, isSubmitting }
  } = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: { categories: [] }
  });

  /* preview de imagen ------------------------------------------------------ */
  const file = watch("image");
  const [preview, setPreview] = useState<string | null>(null);

  useEffect(() => {
    if (file && file instanceof File) {
      const url = URL.createObjectURL(file);
      setPreview(url);
      return () => URL.revokeObjectURL(url);
    }
    setPreview(null);
  }, [file]);

  /* submit ----------------------------------------------------------------- */
  async function onSubmit(data: FormData) {
    if (!token) {
      toast.error("Debes haber iniciado sesi√≥n");
      return;
    }
    try {
      /* 1.- subimos imagen (opcional) */
      let image_url: string | undefined;
      if (data.image) {
        const fd = new FormData();
        fd.append("file", data.image);
        const up = await axios.post<{ url: string }>("/api/upload/", fd, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data"
          }
        });
        image_url = up.data.url;
      }

      /* 2.- creamos √≠tem */
      await axios.post(
        "/api/items/",
        {
          name: data.name,
          description: data.description,
          price_per_h: data.price_per_h,
          categories: data.categories,
          image_url
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      toast.success("¬°Producto publicado!");
      reset();          // limpia formulario
      onCreated();      // refresca lista en parent
      onClose();        // cierra modal
    } catch (err: any) {
      console.error(err);
      toast.error(err.response?.data?.detail ?? "Error al crear producto");
    }
  }

  /* interfaz ---------------------------------------------------------------- */

  return (
    <Transition show={open} as={Fragment}>
      <Dialog
        onClose={() => {
          reset();
          onClose();
        }}
        className="relative z-50"
      >
        {/* backdrop */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* panel */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel className="max-w-2xl w-full overflow-hidden rounded-xl bg-white shadow-xl">
              {/* header */}
              <div className="flex items-center justify-between border-b px-6 py-4">
                <Dialog.Title className="text-lg font-semibold">
                  Nuevo producto
                </Dialog.Title>
                <button
                  className="rounded p-1 text-gray-500 hover:bg-gray-100"
                  onClick={() => {
                    reset();
                    onClose();
                  }}
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>

              {/* form */}
              <form
                onSubmit={handleSubmit(onSubmit)}
                className="grid gap-6 px-6 py-8 md:grid-cols-2"
              >
                {/* ---- columna 1 ---- */}
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium">Nombre</label>
                    <input
                      {...register("name")}
                      className="form-input mt-1 w-full"
                      placeholder="Taladro Bosch 800 W"
                    />
                    {errors.name && (
                      <p className="text-xs text-red-600">
                        {errors.name.message}
                      </p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium">
                      Descripci√≥n
                    </label>
                    <textarea
                      {...register("description")}
                      rows={5}
                      className="form-input mt-1 w-full resize-none"
                      placeholder="A√±ade detalles t√©cnicos, estado, accesorios incluidos‚Ä¶"
                    />
                    {errors.description && (
                      <p className="text-xs text-red-600">
                        {errors.description.message}
                      </p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium">
                      Precio / hora (‚Ç¨)
                    </label>
                    <input
                      {...register("price_per_h")}
                      className="form-input mt-1 w-full"
                      placeholder="3.5"
                      inputMode="decimal"
                    />
                    {errors.price_per_h && (
                      <p className="text-xs text-red-600">
                        {errors.price_per_h.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* ---- columna 2 ---- */}
                <div className="space-y-4">
                  {/* imagen ------------------------------------------------ */}
                  <div>
                    <label className="block text-sm font-medium">Imagen</label>

                    <label className="mt-1 flex h-48 w-full cursor-pointer items-center justify-center rounded border-2 border-dashed border-gray-300 text-sm text-gray-500 hover:border-brand hover:text-brand">
                      {preview ? (
                        <img
                          src={preview}
                          alt="preview"
                          className="h-full w-full object-cover"
                        />
                      ) : (
                        <span className="flex flex-col items-center gap-1">
                          <PhotoIcon className="h-8 w-8" />
                          <span>PNG, JPG, m√°x. 5 MB</span>
                        </span>
                      )}
                      <input
                        type="file"
                        accept="image/*"
                        className="sr-only"
                        onChange={e =>
                          setValue("image", e.target.files?.[0] as File)
                        }
                      />
                    </label>
                    {errors.image && (
                      <p className="text-xs text-red-600">
                        {errors.image.message}
                      </p>
                    )}
                  </div>

                  {/* categor√≠as ------------------------------------------ */}
                  <div>
                    <p className="mb-1 text-sm font-medium">Categor√≠as</p>
                    <div className="flex flex-wrap gap-2">
                      {cats.map((c: Category) => {
                        const selected = watch("categories").includes(c.id);
                        return (
                          <button
                            type="button"
                            key={c.id}
                            onClick={() => {
                              const current = new Set(watch("categories"));
                              selected
                                ? current.delete(c.id)
                                : current.add(c.id);
                              setValue("categories", [...current]);
                            }}
                            className={
                              selected
                                ? "rounded-full bg-brand px-3 py-0.5 text-xs text-white"
                                : "rounded-full border px-3 py-0.5 text-xs text-gray-600"
                            }
                          >
                            {c.name}
                          </button>
                        );
                      })}
                    </div>
                    {errors.categories && (
                      <p className="text-xs text-red-600">
                        {errors.categories.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* ---- footer ---- */}
                <div className="md:col-span-2 flex justify-end gap-3">
                  <button
                    type="button"
                    className="btn--ghost"
                    onClick={() => {
                      reset();
                      onClose();
                    }}
                  >
                    Cancelar
                  </button>
                  <button className="btn" disabled={isSubmitting}>
                    Publicar
                  </button>
                </div>
              </form>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
}


--- frontend/src/features/items/ItemList.tsx ---
import { useEffect, useMemo, useRef, useState } from 'react';
import axios from 'axios';
import Container from '../../components/shared/Container';
import ItemCard from '../../components/ui/ItemCard';
import SkeletonCard from '../../components/ui/SkeletonCard';
import FiltersSidebar from '../../components/filters/FiltersSidebar';
import { useItems } from './useItems';
import { useAuth } from '../../hooks/useAuth';
import AddItemModal from './AddItemModal';
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';

/* -------------------------------------------------- */
/*                    Tipado filtros                  */
/* -------------------------------------------------- */
type FiltersT = {
  name?: string;
  min_price?: number;
  max_price?: number;
  categories?: number[];
  order?: 'price_asc' | 'price_desc' | 'name';
};

export default function ItemList() {
  /* ------------------------------ filtros ------------------------------ */
  const [filters, setFilters] = useState<FiltersT>({});

  /* Serializamos filtros ‚Üí query-string */
  const params = useMemo(() => {
    const p = new URLSearchParams();

    Object.entries(filters).forEach(([k, v]) => {
      if (v === undefined || v === '') return;
      if (Array.isArray(v)) v.forEach(val => p.append(k, String(val)));
      else p.set(k, String(v));
    });

    /* orden (price_asc | price_desc | name) */
    if (filters.order) {
      const [field, dir] = filters.order.split('_');
      p.set('order_by', field === 'price' ? 'price' : 'name');
      p.set('order_dir', dir);
    }
    return p;
  }, [filters]);

  const { data: items, loading, refetch } = useItems(params);
  const { token } = useAuth();

  /* ----------------------- drawer m√≥vil filtros ----------------------- */
  const [openFilters, setOpenFilters] = useState(false);

  /* ------------------------ infinite-scroll demo ---------------------- */
  const sentinel = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!sentinel.current) return;
    const ob = new IntersectionObserver(
      entries => {
        if (entries[0].isIntersecting && !loading) {
          /* Aqu√≠ podr√≠as paginar ‚Üí aumentar offset y refetch() */
        }
      },
      { rootMargin: '600px' }
    );
    ob.observe(sentinel.current);
    return () => ob.disconnect();
  }, [loading]);

  /* ----------------------- modal ‚Äúa√±adir √≠tem‚Äù ------------------------ */
  const [addOpen, setAddOpen] = useState(false);

  /* -------------------------------------------------------------------- */
  return (
    <Container>
      {/* ---------- bot√≥n abrir filtros (solo xs-sm) ---------- */}
      <button onClick={() => setOpenFilters(true)} className="btn mb-4 md:hidden">
        <Bars3Icon className="mr-2 h-5 w-5" />
        Filtros
      </button>

      <div className="flex flex-col gap-10 md:flex-row">
        {/* ---------- Filtros (off-canvas en m√≥vil) ---------- */}
        {/* Backdrop */}
        <div
          className={`
            fixed inset-0 z-40 bg-black/40 backdrop-blur-sm transition-opacity md:hidden
            ${openFilters ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'}
          `}
          onClick={() => setOpenFilters(false)}
        />

        {/* Panel */}
        <aside
          className={`
            fixed left-0 top-0 z-50 h-full w-72 bg-white p-6 shadow-xl transition-transform
            md:static md:h-auto md:w-auto md:translate-x-0 md:bg-transparent md:shadow-none
            ${openFilters ? 'translate-x-0' : '-translate-x-full'}
          `}
        >
          {/* Cerrar (solo m√≥vil) */}
          <button onClick={() => setOpenFilters(false)} className="mb-4 md:hidden">
            <XMarkIcon className="h-6 w-6" />
          </button>

          <FiltersSidebar
            value={filters}
            onChange={setFilters}
            onReset={() => setFilters({})}
          />
        </aside>

        {/* -------------------- listado de tarjetas -------------------- */}
        <section className="flex-1">
          {/* CTA a√±adir producto (solo usuarios logueados) */}
          {token && (
            <div className="flex justify-end">
              <button className="btn mb-4" onClick={() => setAddOpen(true)}>
                A√±adir producto
              </button>
            </div>
          )}

          {/* loader inicial */}
          {loading && !items.length ? (
            <GridSkeleton />
          ) : (
            <Grid>
              {items.map(it => (
                <ItemCard key={it.id} item={it} />
              ))}
              {/* sentinel infinite-scroll */}
              <div ref={sentinel} />
            </Grid>
          )}

          {/* vac√≠o */}
          {!loading && !items.length && (
            <p className="py-6 text-center text-gray-500">No hay resultados.</p>
          )}
        </section>
      </div>

      {/* modal a√±adir */}
      <AddItemModal open={addOpen} onClose={() => setAddOpen(false)} onCreated={refetch} />
    </Container>
  );
}

/* -------------------------------------------------- */
/*                       Helpers                      */
/* -------------------------------------------------- */

/* Grid responsive: min-width 12 rem (‚âà192 px) y se
   auto-ajusta con container-queries si el padre pasa
   a ser un ‚Äúcontainer‚Äù ‚Äî funciona tambi√©n sin CQ. */
const Grid = ({ children }: { children: React.ReactNode }) => (
  <div
    className="
      grid gap-6 py-6 content-auto
      @container lg:[grid-template-columns:repeat(auto-fill,minmax(14rem,1fr))]
      [grid-template-columns:repeat(auto-fill,minmax(12rem,1fr))]
    "
  >
    {children}
  </div>
);

const GridSkeleton = () => (
  <Grid>
    {Array.from({ length: 8 }).map((_, i) => (
      <SkeletonCard key={i} />
    ))}
  </Grid>
);


--- frontend/src/features/rentals/RentalList.tsx ---
import { useAuth } from "../../hooks/useAuth";
import { useRentals } from "./useRentals";

export default function RentalList() {
  const { token } = useAuth();
  const { data: rentals, loading } = useRentals(token);   // ‚Üê sin cambios extra

  if (!token)   return <p className="text-gray-500">Debes iniciar sesi√≥n para ver tus alquileres.</p>;
  if (loading)  return <p className="text-gray-500">Cargando‚Ä¶</p>;
  if (!rentals.length) return <p className="text-gray-500">No tienes alquileres activos.</p>;

  return (
    <div className="space-y-2">
      {rentals.map(r => (
        <div
          key={r.id}
          className="flex items-center justify-between rounded-md bg-white p-3 shadow"
        >
          <span className="font-medium">{r.item.name}</span>
          <span className={r.returned ? "badge--ok" : "badge badge--danger"}>
            {r.returned ? "Devuelto" : "Pendiente"}
          </span>
        </div>
      ))}
    </div>
  );
}


--- frontend/src/features/rentals/useRentals.ts ---
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";
import { Item } from "../items/useItems";

export type Rental = {
  id: number;
  item: Item;
  start_at: string;
  end_at: string;
  deposit: number;
  returned: boolean;
};

/**
 * Devuelve la lista de alquileres del usuario.  
 * Solo dispara la petici√≥n cuando `token` es *truthy*.
 */
export function useRentals(token: string | null) {
  const enabled = Boolean(token);          // ‚Üê normalizamos

  const { data, isLoading } = useQuery<Rental[]>({
    queryKey: ["rentals"],
    queryFn: () => api.get<Rental[]>("/rentals/me").then(r => r.data),
    enabled,                               // ‚úì ahora siempre boolean
    staleTime: 60_000,
    retry: false
  });

  return { data: data ?? [], loading: isLoading };
}


--- frontend/src/pages/Register.tsx ---
// src/pages/Register.tsx
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import zxcvbn from "zxcvbn";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import clsx from "clsx";

import { register as apiRegister } from "../features/auth/register";
import { login as apiLogin } from "../features/auth/login";
import { useAuth } from "../hooks/useAuth";

import Container from "../components/shared/Container";
import SocialButton from "../components/ui/SocialButton";
import { FcGoogle } from "react-icons/fc";
import { FaGithub } from "react-icons/fa";

/* -------- validation schema -------- */
const schema = z
  .object({
    username: z.string().min(3, "M√≠n. 3 caracteres"),
    email: z.string().email("Email inv√°lido"),
    password: z.string().min(8, "M√≠n. 8 caracteres"),
    confirm: z.string(),
    terms: z.literal(true, {
      errorMap: () => ({ message: "Acepta los t√©rminos" }),
    }),
  })
  .refine(data => data.password === data.confirm, {
    message: "Las contrase√±as no coinciden",
    path: ["confirm"],
  });

type FormData = z.infer<typeof schema>;

export default function Register() {
  const navigate = useNavigate();
  const { login: saveToken } = useAuth();

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors, isSubmitting },
  } = useForm<FormData>({ resolver: zodResolver(schema) });

  const pwd = watch("password", "");

  /* -------------------------------------------------------------------- */
  const onSubmit = async (data: FormData) => {
    try {
      // 1) signup
      await apiRegister(data.username, data.email, data.password);

      // 2) auto-login
      const token = await apiLogin(data.username, data.password);
      saveToken(token);

      toast.success("Cuenta creada, ¬°bienvenido!");
      navigate("/dashboard");
    } catch (err: any) {
      // FastAPI devuelve detail en .response.data.detail
      const msg =
        err?.response?.data?.detail ??
        "No se pudo crear la cuenta. Int√©ntalo m√°s tarde.";
      toast.error(msg);
    }
  };

  /* -------------------------------------------------------------------- */
  const strength = zxcvbn(pwd).score; // 0-4

  return (
    <Container>
      <main className="flex min-h-[70vh] items-center justify-center">
        <div className="w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card">
          <h1 className="text-center text-2xl font-bold">Crear cuenta</h1>

          {/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ login social ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */}
          <div className="space-y-3">
            <SocialButton provider="google" icon={FcGoogle} label="Con Google" />
            <SocialButton provider="github" icon={FaGithub} label="Con GitHub" />
          </div>

          <div className="relative text-xs text-gray-400">
            <hr />
            <span className="absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-2">
              o reg√≠strate con email
            </span>
          </div>

          {/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ formulario ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */}
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <input
              {...register("username")}
              placeholder="Nombre de usuario"
              className="form-input w-full"
            />
            {errors.username && (
              <p className="text-xs text-red-600">{errors.username.message}</p>
            )}

            <input
              {...register("email")}
              type="email"
              placeholder="Email"
              className="form-input w-full"
            />
            {errors.email && (
              <p className="text-xs text-red-600">{errors.email.message}</p>
            )}

            <input
              {...register("password")}
              type="password"
              placeholder="Contrase√±a"
              className="form-input w-full"
            />

            {/* strength meter */}
            {pwd && (
              <div className="h-2 w-full overflow-hidden rounded bg-gray-200">
                <div
                  style={{ width: `${(strength + 1) * 20}%` }}
                  className={clsx(
                    "h-full transition-all",
                    [
                      "bg-red-500",
                      "bg-orange-400",
                      "bg-yellow-400",
                      "bg-lime-500",
                      "bg-green-600",
                    ][strength],
                  )}
                />
              </div>
            )}
            {errors.password && (
              <p className="text-xs text-red-600">
                {errors.password.message}
              </p>
            )}

            <input
              {...register("confirm")}
              type="password"
              placeholder="Repite contrase√±a"
              className="form-input w-full"
            />
            {errors.confirm && (
              <p className="text-xs text-red-600">{errors.confirm.message}</p>
            )}

            {/* terms */}
            <label className="flex gap-2 text-xs text-gray-600">
              <input type="checkbox" {...register("terms")} />
              Acepto los&nbsp;
              <a href="/terms" className="text-brand hover:underline">
                T√©rminos y la Pol√≠tica de privacidad
              </a>
            </label>
            {errors.terms && (
              <p className="text-xs text-red-600">{errors.terms.message}</p>
            )}

            <button className="btn w-full" disabled={isSubmitting}>
              {isSubmitting ? "Creando‚Ä¶" : "Crear cuenta"}
            </button>
          </form>
        </div>
      </main>
    </Container>
  );
}


--- frontend/src/pages/Login.tsx ---
// src/pages/Login.tsx
import { FormEvent, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { login as apiLogin } from '../features/auth/login';

import { FcGoogle } from 'react-icons/fc';
import { FaGithub } from 'react-icons/fa';
import SocialButton from '../components/ui/SocialButton';
import Container from '../components/shared/Container';
import toast from 'react-hot-toast';  

export default function Login() {
  const [user, setUser] = useState('');
  const [pwd, setPwd] = useState('');
  const [error, setError] = useState<string | null>(null);

  const { login: saveToken } = useAuth();
  const nav = useNavigate();

  async function handleSubmit(e: FormEvent) {
    e.preventDefault();
    try {
  const token = await apiLogin(user, pwd);
  saveToken(token);
  nav('/dashboard');
  toast.success('¬°Bienvenido de nuevo!');            // üÜï
} catch {
  toast.error('Usuario o contrase√±a incorrectos');   // üÜï
}
  }

  return (
    <Container>
      <main className="flex min-h-[70vh] items-center justify-center">
        <div className="w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card">
          {/* T√≠tulo */}
          <h1 className="text-center text-2xl font-bold">Iniciar sesi√≥n</h1>

          {/* Social login */}
          <div className="space-y-3">
            <SocialButton
              provider="google"
              icon={FcGoogle}
              label="Entrar con Google"
            />
            <SocialButton
              provider="github"
              icon={FaGithub}
              label="Entrar con GitHub"
            />
          </div>

          <div className="relative">
            <hr />
            <span className="absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-2 text-xs text-gray-400">
              o contin√∫a con tu cuenta
            </span>
          </div>

          {/* Form tradicional */}
          {error && <p className="text-center text-sm text-red-600">{error}</p>}
          <form onSubmit={handleSubmit} className="space-y-4">
            <input
              className="form-input w-full"
              placeholder="Usuario"
              value={user}
              onChange={e => setUser(e.target.value)}
              required
            />
            <input
              className="form-input w-full"
              type="password"
              placeholder="Contrase√±a"
              value={pwd}
              onChange={e => setPwd(e.target.value)}
              required
            />
            <button className="btn w-full">Entrar</button>
          </form>

          <p className="text-center text-xs text-gray-500">
            ¬øNo tienes cuenta?{' '}
            <a href="/register" className="font-medium text-brand hover:underline">
              Reg√≠strate
            </a>
          </p>
        </div>
      </main>
    </Container>
  );
}


--- frontend/src/pages/Dashboard.tsx ---
import Container from '../components/shared/Container';
import ItemList from '../features/items/ItemList';
import RentalList from '../features/rentals/RentalList';
import Section from '../components/shared/Section';

export default function Dashboard() {
  return (
    <Container>
      <Section title="Mis alquileres">
        <RentalList />
      </Section>

      <Section title="Cat√°logo p√∫blico">
        <ItemList />
      </Section>
    </Container>
  );
}


--- frontend/src/pages/Home.tsx ---
import { Link } from 'react-router-dom';
import { ArrowRightIcon } from '@heroicons/react/24/solid';
import Container from '../components/shared/Container';
import Section from '../components/shared/Section';

export default function Home() {
  return (
    <>
      {/* HERO */}
      <section className="relative overflow-hidden bg-brand text-white">
        <Container>
          <div className="flex min-h-[60vh] flex-col items-center justify-center gap-6 py-24 text-center">
            <h1 className="max-w-3xl text-balance text-5xl font-extrabold leading-tight">
              Alquila y gana dinero con tus herramientas que no usas a diario
            </h1>
            <p className="max-w-xl text-lg/relaxed text-white/90">
              Conecta con gente de tu zona, protege tus transacciones y ahorra comprando.
            </p>
            <Link to="/dashboard" className="btn inline-flex gap-2">
              Explorar cat√°logo <ArrowRightIcon className="h-5 w-5" />
            </Link>
          </div>
        </Container>
      </section>

      {/* HOW IT WORKS */}
      <Section title="¬øC√≥mo funciona?">
        <Container>
          <div className="grid gap-12 md:grid-cols-3">
            {[
              ['Publica', 'Sube tu producto y fija tu precio.'],
              ['Reserva', 'Los usuarios reservan y pagan la fianza.'],
              ['Gana', 'Entrega el √≠tem y recibe tu dinero.']
            ].map(([t, d]) => (
              <div key={t} className="space-y-3 text-center">
                <div className="mx-auto h-12 w-12 rounded-full bg-brand/10" />
                <h3 className="text-xl font-semibold">{t}</h3>
                <p className="text-gray-600">{d}</p>
              </div>
            ))}
          </div>
        </Container>
      </Section>
    </>
  );
}


--- frontend/src/components/ui/SkeletonCard.tsx ---
export default function SkeletonCard() {
  return (
    <article
      className="
        flex flex-col overflow-hidden rounded-lg bg-white shadow-card
        animate-pulse
      "
    >
      {/* zona de imagen (mantiene proporci√≥n 4:3) */}
      <div className="aspect-[4/3] w-full bg-gray-200" />

      {/* zona de texto */}
      <div className="space-y-2 p-4">
        <div className="h-4 w-2/3 rounded bg-gray-200" />
        <div className="h-4 w-1/3 rounded bg-gray-200" />
      </div>
    </article>
  );
}


--- frontend/src/components/ui/LazyImage.tsx ---
import { useState } from 'react';

type Props = {
  src: string;
  alt: string;
  className?: string;
  /** ancho estimado para el atributo `sizes` (ej. "100vw", "50vw") */
  sizes?: string;
};

export default function LazyImage({
  src,
  alt,
  className = '',
  sizes = '100vw'
}: Props) {
  const [loaded, setLoaded] = useState(false);

  /* genera srcset (320-640-960 px) */
  const srcset = [320, 640, 960]
    .map(w => `${src.replace(/(\?.*)?$/, '')}?w=${w} ${w}w`)
    .join(', ');

  return (
    <img
      src={src}
      srcSet={srcset}
      sizes={sizes}
      loading="lazy"
      decoding="async"                    /* üÜï */
      onLoad={() => setLoaded(true)}
      className={`${className} transition-opacity duration-500 ${
        loaded ? 'opacity-100' : 'opacity-0'
      }`}
      alt={alt}
    />
  );
}


--- frontend/src/components/ui/ItemCard.tsx ---
import { useState } from 'react';
import { Item } from '../../features/items/useItems';
import LazyImage from './LazyImage';
import { resolveImage } from '../../utils';
import QuickViewModal from './QuickViewModal';
import clsx from 'clsx';
import { HeartIcon, EyeIcon } from '@heroicons/react/24/solid';

export default function ItemCard({ item }: { item: Item }) {
  const [open, setOpen] = useState(false);

  const imgSrc = resolveImage(
    item.image_url,
    `https://source.unsplash.com/640x480/?${encodeURIComponent(item.name)}`
  );

  return (
    <>
      <article
        className="
          flex flex-col overflow-hidden rounded-lg bg-surface shadow-card
          transition-transform duration-200 hover:-translate-y-1 hover:shadow-cardHover
        "
      >
        {/* ---------- Foto ---------- */}
        <div className="relative">
          <LazyImage
            src={imgSrc}
            alt={item.name}
            className="aspect-[4/3] w-full object-contain p-2"
            onClick={() => setOpen(true)}
          />

          {!item.available && (
            <span className="absolute left-0 top-0 rounded-br-md bg-red-600/90 px-2 py-0.5 text-xs font-semibold uppercase tracking-wide text-white">
              Alquilado
            </span>
          )}

          <div className="absolute inset-0 flex items-start justify-end gap-2 p-2 opacity-0 transition-opacity hover:opacity-100">
            <IconBtn title="Vista r√°pida" onClick={() => setOpen(true)}>
              <EyeIcon className="h-5 w-5" />
            </IconBtn>
            <IconBtn title="Favorito">
              <HeartIcon className="h-5 w-5" />
            </IconBtn>
          </div>
        </div>

        {/* ---------- Info ---------- */}
        <div className="flex flex-1 flex-col gap-2 px-4 pb-4">
          <h3 className="line-clamp-1 text-lg font-semibold">{item.name}</h3>

          {item.description && (
            <p className="line-clamp-2 text-sm text-gray-600">
              {item.description}
            </p>
          )}

          <div className="mt-auto flex items-center justify-between">
            <p className="text-base font-bold text-brand">
              {item.price_per_h.toFixed(2)} ‚Ç¨/h
            </p>
            <span
              className={clsx(
                'badge',
                item.available ? 'badge--ok' : 'badge--danger'
              )}
            >
              {item.available ? 'Disponible' : 'Alquilado'}
            </span>
          </div>
        </div>
      </article>

      <QuickViewModal open={open} onClose={() => setOpen(false)} item={item} />
    </>
  );
}

function IconBtn({
  children,
  onClick,
  title,
}: {
  children: React.ReactNode;
  onClick?: () => void;
  title: string;
}) {
  return (
    <button
      type="button"
      title={title}
      onClick={e => {
        e.stopPropagation();
        onClick?.();
      }}
      className="rounded-full bg-white/90 p-1 text-gray-600 shadow transition-colors hover:bg-white"
    >
      {children}
    </button>
  );
}


--- frontend/src/components/ui/SearchBar.tsx ---
import { useForm } from 'react-hook-form';

type Props = { onSubmit: (q: URLSearchParams) => void };

export default function SearchBar({ onSubmit }: Props) {
  const { register, handleSubmit, reset } = useForm<{
    q: string;
    min: number | undefined;
    max: number | undefined;
  }>({ defaultValues: { q: '', min: undefined, max: undefined } });

  return (
    <form
      onSubmit={handleSubmit(values => {
        const params = new URLSearchParams();
        if (values.q) params.set('name', values.q);
        if (values.min) params.set('min_price', values.min.toString());
        if (values.max) params.set('max_price', values.max.toString());
        onSubmit(params);
      })}
      className="flex flex-wrap items-end gap-3"
    >
      <input
        {...register('q')}
        placeholder="Buscar producto‚Ä¶"
        className="form-input w-52"
      />
      <input
        {...register('min', { valueAsNumber: true })}
        type="number"
        step="0.1"
        min={0}
        placeholder="‚Ç¨ m√≠nimo"
        className="form-input w-32"
      />
      <input
        {...register('max', { valueAsNumber: true })}
        type="number"
        step="0.1"
        min={0}
        placeholder="‚Ç¨ m√°ximo"
        className="form-input w-32"
      />
      <button className="btn">Filtrar</button>
      <button
        type="button"
        onClick={() => {
          reset();
          onSubmit(new URLSearchParams());
        }}
        className="btn--ghost"
      >
        Limpiar
      </button>
    </form>
  );
}


--- frontend/src/components/ui/SocialButton.tsx ---
// src/components/ui/SocialButton.tsx
import { IconType } from 'react-icons';
import clsx from 'clsx';

type Props = {
  icon: IconType;
  label: string;
  provider: 'google' | 'github';
};

export default function SocialButton({ icon: Icon, label, provider }: Props) {
  return (
    <a
      href={`/api/oauth/${provider}`}           /* El backend redirige al proveedor */
      className={clsx(
        'btn flex w-full items-center justify-center gap-2',
        provider === 'google' && 'bg-white text-gray-700 shadow border hover:bg-gray-50',
        provider === 'github' && 'bg-gray-900 text-white hover:bg-gray-800'
      )}
    >
      <Icon className="h-5 w-5" />
      {label}
    </a>
  );
}


--- frontend/src/components/ui/QuickViewModal.tsx ---
import { Fragment } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { XMarkIcon, StarIcon } from '@heroicons/react/24/outline';
import { Item } from '../../features/items/useItems';
import LazyImage from './LazyImage';
import { resolveImage } from '../../utils';
import clsx from 'clsx';

type Props = {
  open: boolean;
  onClose: () => void;
  item: Item | null;
};

export default function QuickViewModal({ open, onClose, item }: Props) {
  /* -------- si a√∫n no hay datos -------- */
  if (!item) return null;

  /* -------- URL de la imagen -------- */
  const imgSrc = resolveImage(
    item.image_url,
    `https://source.unsplash.com/800x600/?${encodeURIComponent(item.name)}`
  );

  return (
    <Transition show={open} as={Fragment}>
      <Dialog onClose={onClose} className="relative z-50">
        {/* ---------------- Backdrop ---------------- */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* ---------------- Panel ---------------- */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel
              className="
                flex max-h-[90vh] w-full max-w-3xl flex-col overflow-hidden
                rounded-xl bg-white shadow-xl
              "
            >
              {/* ---------- Header ---------- */}
              <div className="flex items-center justify-between border-b p-4">
                <Dialog.Title className="text-lg font-semibold">
                  {item.name}
                </Dialog.Title>
                <button
                  onClick={onClose}
                  className="rounded p-1 text-gray-500 hover:bg-gray-100"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>

              {/* ---------- Body ---------- */}
              <div
                className="
                  grid gap-6 overflow-y-auto p-6
                  md:grid-cols-2                    /* 1 col ‚Üí xs-sm | 2 col ‚Üí ‚â• md */
                "
              >
                {/* ----- Imagen ----- */}
                <div className="flex items-center justify-center">
                  <LazyImage
                    src={imgSrc}
                    alt={item.name}
                    className="
                      w-full rounded-lg object-contain
                      max-h-[60vh]                 /* nunca se sale de la viewport */
                    "
                  />
                </div>

                {/* ----- Info ----- */}
                <div className="flex flex-col gap-4">
                  {/* Precio */}
                  <p className="text-2xl font-bold text-brand">
                    {item.price_per_h.toFixed(2)} ‚Ç¨/h
                  </p>

                  {/* Rating (demo) */}
                  <div className="flex items-center gap-1">
                    {Array.from({ length: 5 }).map((_, i) => (
                      <StarIcon
                        key={i}
                        className={clsx(
                          'h-5 w-5',
                          i < 4
                            ? 'fill-amber-400 stroke-amber-400'
                            : 'stroke-gray-300'
                        )}
                      />
                    ))}
                    <span className="ml-1 text-sm text-gray-500">(4,0)</span>
                  </div>

                  {/* Descripci√≥n */}
                  {item.description ? (
                    <p className="prose max-w-none text-sm leading-relaxed">
                      {item.description}
                    </p>
                  ) : (
                    <p className="text-sm text-gray-500">Sin descripci√≥n.</p>
                  )}

                  {/* Categor√≠as */}
                  {item.categories?.length ? (
                    <div className="flex flex-wrap gap-2">
                      {item.categories.map(c => (
                        <span
                          key={c.id}
                          className="rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600"
                        >
                          {c.name}
                        </span>
                      ))}
                    </div>
                  ) : null}

                  {/* CTA */}
                  <button className="btn mt-auto w-full">Reservar ahora</button>
                </div>
              </div>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
}


--- frontend/src/components/shared/Section.tsx ---
type Props = {
  title?: string;
  children: React.ReactNode;
  id?: string;
};

export default function Section({ title, children, id }: Props) {
  return (
    <section id={id} className="space-y-6 py-16">
      {title && (
        <h2 className="text-center text-3xl font-bold tracking-tight">{title}</h2>
      )}
      {children}
    </section>
  );
}


--- frontend/src/components/shared/Container.tsx ---
export default function Container({ children }: { children: React.ReactNode }) {
  return <div className="container">{children}</div>;
}


--- frontend/src/components/layout/Footer.tsx ---
export default function Footer() {
  return (
    <footer className="mt-24 border-t bg-white py-12 text-center text-sm text-gray-500">
      Rental‚ÄëMVP ¬© {new Date().getFullYear()} ¬∑ Hecho con‚ÄØ‚ù§ en FastAPI¬†+¬†React
    </footer>
  );
}


--- frontend/src/components/layout/Header.tsx ---
// src/components/layout/Header.tsx
import { Link, NavLink } from 'react-router-dom';
import logo from '../../assets/logo.png';
import { useAuth } from '../../hooks/useAuth';

export default function Header() {
  const { token, logout } = useAuth();

  return (
    <header className="sticky top-0 z-30 bg-white/80 backdrop-blur shadow-sm">
      {/* ‚Üë duplica el padding vertical para m√°s ‚Äúaire‚Äù */}
      <div className="container flex items-center gap-8 py-4 lg:py-6">
        {/* Logo */}
        <Link to="/" aria-label="Inicio" className="flex items-center">
          {/* ser√° ‚âà96 px en desktop */}
          <img
            src={logo}
            alt="Logo Rental-MVP"
            className="h-14 md:h-20 lg:h-24 w-auto select-none"
            decoding="async"
          />
        </Link>

        {/* Navegaci√≥n */}
        <nav className="ml-auto flex gap-8 text-base font-semibold text-gray-600">
          {token ? (
            <>
              <NavLink to="/dashboard" className="hover:text-gray-900">
                Dashboard
              </NavLink>
              <button onClick={logout} className="hover:text-gray-900">
                Salir
              </button>
            </>
          ) : (
            <NavLink to="/login" className="hover:text-gray-900">
              Login
            </NavLink>
          )}
        </nav>
      </div>
    </header>
  );
}


--- frontend/src/components/filters/FiltersSidebar.tsx ---
import { Disclosure } from '@headlessui/react';
import useCategories, { Category } from '../../features/categories/useCategories';

type Filters = {
  name?: string;
  min_price?: number;
  max_price?: number;
  categories?: number[];
  order?: 'price_asc' | 'price_desc' | 'name';
};

type Props = {
  value: Filters;
  onChange: (f: Filters) => void;
  onReset: () => void;
};

export default function FiltersSidebar({ value, onChange, onReset }: Props) {
  const { data: cats } = useCategories();

  const toggleCat = (id: number) => {
    const list = new Set(value.categories ?? []);
    list.has(id) ? list.delete(id) : list.add(id);
    onChange({ ...value, categories: [...list] });
  };

  return (
    <div className="space-y-6 w-full md:w-60 lg:w-72">
      {/* Search */}
      <input
        placeholder="Buscar‚Ä¶"
        className="form-input w-full"
        value={value.name ?? ''}
        onChange={e => onChange({ ...value, name: e.target.value || undefined })}
      />

      {/* Price */}
      <Disclosure defaultOpen>
        {({ open }) => (
          <>
            <Disclosure.Button className="flex w-full justify-between text-sm font-semibold">
              Precio {open ? '‚àí' : '+'}
            </Disclosure.Button>
            <Disclosure.Panel className="mt-3 space-y-2">
              <input
                type="number"
                min={0}
                step={0.1}
                placeholder="m√≠n"
                className="form-input w-full"
                value={value.min_price ?? ''}
                onChange={e =>
                  onChange({
                    ...value,
                    min_price: e.target.value ? Number(e.target.value) : undefined
                  })
                }
              />
              <input
                type="number"
                min={0}
                step={0.1}
                placeholder="m√°x"
                className="form-input w-full"
                value={value.max_price ?? ''}
                onChange={e =>
                  onChange({
                    ...value,
                    max_price: e.target.value ? Number(e.target.value) : undefined
                  })
                }
              />
            </Disclosure.Panel>
          </>
        )}
      </Disclosure>

      {/* Categories */}
      <Disclosure defaultOpen>
        {({ open }) => (
          <>
            <Disclosure.Button className="flex w-full justify-between text-sm font-semibold">
              Categor√≠as {open ? '‚àí' : '+'}
            </Disclosure.Button>
            <Disclosure.Panel className="mt-3 flex flex-wrap gap-2">
              {cats.map((c: Category) => {
                const active = value.categories?.includes(c.id);
                return (
                  <button
                    key={c.id}
                    onClick={() => toggleCat(c.id)}
                    className={
                      active
                        ? 'rounded-full bg-brand px-3 py-0.5 text-xs font-medium text-white'
                        : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'
                    }
                  >
                    {c.name}
                  </button>
                );
              })}
            </Disclosure.Panel>
          </>
        )}
      </Disclosure>

      {/* Order */}
      <select
        className="form-select w-full"
        value={value.order ?? ''}
        onChange={e =>
          onChange({
            ...value,
            order: e.target.value ? (e.target.value as Filters['order']) : undefined
          })
        }
      >
        <option value="">Ordenar por‚Ä¶</option>
        <option value="price_asc">Precio ‚Üë</option>
        <option value="price_desc">Precio ‚Üì</option>
        <option value="name">Nombre</option>
      </select>

      <button onClick={onReset} className="btn--ghost w-full">
        Limpiar filtros
      </button>
    </div>
  );
}



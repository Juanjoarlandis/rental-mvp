--- rental-mvp/estructura_directorios.json ---
[
    {
        "name": "rental-mvp",
        "dirs": [
            {
                "name": "uploads",
                "dirs": [],
                "files": [
                    "813d5d79-c6ed-4454-bcf8-cea86969abef.png",
                    "3d304b92-4fce-4616-a08f-b74313d0008c.png",
                    "2a373a03-bd9c-4d50-93bc-e546e44bd6f1.png",
                    "41671a81-0d71-4490-9dd9-1629cd2811ee.png",
                    "013d8629-ca65-48d5-85b5-44572aec0ab6.png",
                    "282022c2-0d6d-4f87-bcc9-ecd08d43a362.png",
                    "249e28c1-feb7-4a38-a488-3bea7af0c2fd.png",
                    "570df2ae-13d6-4156-968d-6cde19da881d.png",
                    "a08a849a-2bcf-4c62-8f50-320a0d3b843f.jpg",
                    "ebefe732-4f9a-46dd-a033-8072611d8ad9.png",
                    "f528fc74-9c61-432c-a79a-0eb5da4f6b76.png",
                    "aa787f08-437e-4068-80bf-71d891088c56.png",
                    "5ce5fe11-0cef-4e78-a78b-aa643b94a56d.png"
                ]
            },
            {
                "name": "frontend",
                "dirs": [
                    {
                        "name": "src",
                        "dirs": [
                            {
                                "name": "assets",
                                "dirs": [],
                                "files": [
                                    "logo.png"
                                ]
                            },
                            {
                                "name": "hooks",
                                "dirs": [],
                                "files": [
                                    "useAuth.tsx"
                                ]
                            },
                            {
                                "name": "styles",
                                "dirs": [],
                                "files": [
                                    "global.css"
                                ]
                            },
                            {
                                "name": "features",
                                "dirs": [
                                    {
                                        "name": "auth",
                                        "dirs": [],
                                        "files": [
                                            "register.ts",
                                            "login.ts"
                                        ]
                                    },
                                    {
                                        "name": "categories",
                                        "dirs": [],
                                        "files": [
                                            "useCategories.ts"
                                        ]
                                    },
                                    {
                                        "name": "items",
                                        "dirs": [],
                                        "files": [
                                            "useItems.ts",
                                            "AddItemModal.tsx",
                                            "ItemList.tsx"
                                        ]
                                    },
                                    {
                                        "name": "rentals",
                                        "dirs": [],
                                        "files": [
                                            "RentalList.tsx",
                                            "useRentals.ts"
                                        ]
                                    }
                                ],
                                "files": []
                            },
                            {
                                "name": "pages",
                                "dirs": [],
                                "files": [
                                    "Register.tsx",
                                    "Login.tsx",
                                    "Dashboard.tsx",
                                    "Home.tsx"
                                ]
                            },
                            {
                                "name": "components",
                                "dirs": [
                                    {
                                        "name": "ui",
                                        "dirs": [],
                                        "files": [
                                            "SkeletonCard.tsx",
                                            "LazyImage.tsx",
                                            "ItemCard.tsx",
                                            "SearchBar.tsx",
                                            "ItemDetailModal.tsx",
                                            "SocialButton.tsx",
                                            "QuickViewModal.tsx"
                                        ]
                                    },
                                    {
                                        "name": "shared",
                                        "dirs": [],
                                        "files": [
                                            "Section.tsx",
                                            "Container.tsx"
                                        ]
                                    },
                                    {
                                        "name": "layout",
                                        "dirs": [],
                                        "files": [
                                            "Footer.tsx",
                                            "Header.tsx"
                                        ]
                                    },
                                    {
                                        "name": "Home",
                                        "dirs": [],
                                        "files": [
                                            "FAQ.tsx",
                                            "Stats.tsx",
                                            "LogoCloud.tsx",
                                            "Testimonials.tsx"
                                        ]
                                    },
                                    {
                                        "name": "filters",
                                        "dirs": [],
                                        "files": [
                                            "FiltersSidebar.tsx"
                                        ]
                                    }
                                ],
                                "files": []
                            }
                        ],
                        "files": [
                            "App.tsx",
                            "api.ts",
                            "ErrorBoundary.tsx",
                            "main.tsx",
                            "utils.ts",
                            "Protected.tsx"
                        ]
                    }
                ],
                "files": [
                    "index.html",
                    "package.json",
                    "vite.config.ts",
                    "Dockerfile",
                    "nginx.conf",
                    "tsconfig.json",
                    "postcss.config.js",
                    "tailwind.config.js"
                ]
            },
            {
                "name": "app",
                "dirs": [
                    {
                        "name": "models",
                        "dirs": [],
                        "files": [
                            "models.py",
                            "__init__.py",
                            "database.py"
                        ]
                    },
                    {
                        "name": "schemas",
                        "dirs": [],
                        "files": [
                            "category.py",
                            "rental.py",
                            "token.py",
                            "__init__.py",
                            "item.py",
                            "user.py"
                        ]
                    },
                    {
                        "name": "crud",
                        "dirs": [],
                        "files": [
                            "category.py",
                            "rental.py",
                            "__init__.py",
                            "item.py",
                            "user.py"
                        ]
                    },
                    {
                        "name": "core",
                        "dirs": [],
                        "files": [
                            "config.py",
                            "security.py"
                        ]
                    },
                    {
                        "name": "api",
                        "dirs": [],
                        "files": [
                            "rentals.py",
                            "items.py",
                            "categories.py",
                            "auth.py",
                            "__init__.py",
                            "upload.py"
                        ]
                    }
                ],
                "files": [
                    "main.py",
                    "deps.py"
                ]
            },
            {
                "name": "tests",
                "dirs": [],
                "files": [
                    "test_api.py",
                    "conftest.py"
                ]
            },
            {
                "name": ".pytest_cache",
                "dirs": [
                    {
                        "name": "v",
                        "dirs": [
                            {
                                "name": "cache",
                                "dirs": [],
                                "files": [
                                    "nodeids",
                                    "lastfailed"
                                ]
                            }
                        ],
                        "files": []
                    }
                ],
                "files": [
                    ".gitignore",
                    "README.md",
                    "CACHEDIR.TAG"
                ]
            },
            {
                "name": "backend",
                "dirs": [],
                "files": [
                    "Dockerfile"
                ]
            }
        ],
        "files": [
            "estructura_directorios.json",
            "requirements.txt",
            "package.json",
            ".gitignore",
            "docker-compose.prod.yml",
            "pytest.ini",
            ".env",
            "rental.db",
            "alembic.ini"
        ]
    }
]

--- rental-mvp/requirements.txt ---
# rental-mvp/requirements.txt
alembic==1.16.3
annotated-types==0.7.0
anyio==4.9.0
bcrypt==3.2.2  
cffi==1.17.1
click==8.2.1
cryptography==45.0.5
ecdsa==0.19.1
exceptiongroup==1.3.0
fastapi==0.116.0
greenlet==3.2.3
h11==0.16.0
httptools==0.6.4
idna==3.10
Mako==1.3.10
MarkupSafe==3.0.2
passlib==1.7.4
pyasn1==0.6.1
pycparser==2.22
pydantic==2.11.7
pydantic-core==2.33.2
pydantic-settings==2.10.1
python-dotenv==1.1.1
python-jose[cryptography]==3.5.0
python-multipart==0.0.6
PyYAML==6.0.2
rsa==4.9.1
six==1.17.0
sniffio==1.3.1
SQLAlchemy==2.0.41
starlette==0.46.2
tomli==2.2.1
typing-inspection==0.4.1
typing-extensions==4.14.1
uvicorn==0.35.0
uvloop==0.21.0
watchfiles==1.1.0
websockets==15.0.1
email-validator
pytest>=7.4
httpx>=0.27

--- rental-mvp/package.json ---
{
  "devDependencies": {
    "@tailwindcss/container-queries": "^0.1.1"
  }
}


--- rental-mvp/.gitignore ---
backend/__pycache__/
__pycache__/


--- rental-mvp/docker-compose.prod.yml ---
version: "3.9"

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    env_file: .env
    volumes:
      - uploads:/app/uploads          # imágenes persisten
      - ./rental.db:/app/rental.db    # sqlite fuera de la imagen
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend             # ← nuevo contexto
      dockerfile: Dockerfile          # (vive dentro de frontend/)
    depends_on:
      - backend
    ports:
      - "80:80"                       # expone HTTP
    restart: unless-stopped

volumes:
  uploads:


--- rental-mvp/pytest.ini ---
# pytest.ini
[pytest]
pythonpath = .
addopts = -q


--- rental-mvp/.env ---
# .env (en la raíz)
DATABASE_URL=sqlite:///./rental.db
SECRET_KEY=tu_clave_super_secreta_aleatoria


--- rental-mvp/alembic.ini ---
# A generic, single database configuration.

[alembic]
# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = %(here)s/alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.  for multiple paths, the path separator
# is defined by "path_separator" below.
prepend_sys_path = .


# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "path_separator"
# below.
# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions

# path_separator; This indicates what character is used to split lists of file
# paths, including version_locations and prepend_sys_path within configparser
# files such as alembic.ini.
# The default rendered in new alembic.ini files is "os", which uses os.pathsep
# to provide os-dependent path splitting.
#
# Note that in order to support legacy alembic.ini files, this default does NOT
# take place if path_separator is not present in alembic.ini.  If this
# option is omitted entirely, fallback logic is as follows:
#
# 1. Parsing of the version_locations option falls back to using the legacy
#    "version_path_separator" key, which if absent then falls back to the legacy
#    behavior of splitting on spaces and/or commas.
# 2. Parsing of the prepend_sys_path option falls back to the legacy
#    behavior of splitting on spaces, commas, or colons.
#
# Valid values for path_separator are:
#
# path_separator = :
# path_separator = ;
# path_separator = space
# path_separator = newline
#
# Use os.pathsep. Default configuration used for new projects.
path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# database URL.  This is consumed by the user-maintained env.py script only.
# other means of configuring database URLs may be customized within the env.py
# file.
sqlalchemy.url = sqlite:///./rental.db


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# hooks = ruff
# ruff.type = module
# ruff.module = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Alternatively, use the exec runner to execute a binary found on your PATH
# hooks = ruff
# ruff.type = exec
# ruff.executable = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Logging configuration.  This is also consumed by the user-maintained
# env.py script only.
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S


--- rental-mvp/frontend/index.html ---
<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Rental-MVP</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


--- rental-mvp/frontend/package.json ---
{
  "name": "rental-mvp-frontend",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint \"src/**/*.{ts,tsx}\" --max-warnings=0 --fix"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.4",
    "@heroicons/react": "^2.2.0",
    "@hookform/resolvers": "^3.3.4",
    "@tanstack/react-query": "^5.38.0",
    "axios": "^1.6.8",
    "clsx": "^2.1.1",
    "focus-trap-react": "^10.2.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.60.0",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.5.0",
    "react-router-dom": "^6.23.1",
    "zod": "^3.23.4",
    "zxcvbn": "^4.4.2"
  },
  "devDependencies": {
    "@tailwindcss/container-queries": "",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/line-clamp": "^0.4.4",
    "@tailwindcss/typography": "^0.5.16",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.2",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "@vitejs/plugin-react": "^4.2.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.5.0",
    "vite": "^5.3.1"
  }
}


--- rental-mvp/frontend/vite.config.ts ---
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: {
      // ► redirige API a tu back (FastAPI en :8000)
      "/api": "http://localhost:8000"
    }
  }
});


--- rental-mvp/frontend/Dockerfile ---
# ───────────── Etapa 1: build Vite ─────────────
FROM node:20 AS builder
WORKDIR /frontend

COPY package.json package-lock.json* ./
RUN npm ci

COPY . .
RUN npm run build          # genera /frontend/dist

# ───────────── Etapa 2: Nginx ─────────────
FROM nginx:1.27-alpine

# Copia estáticos compilados
COPY --from=builder /frontend/dist /usr/share/nginx/html

# Proxy /api → backend
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


--- rental-mvp/frontend/nginx.conf ---
server {
    listen 80;
    server_name _;

    # estáticos de Vite
    root /usr/share/nginx/html;
    index index.html;
    client_max_body_size 100M; 

    # single-page
    location / {
        try_files $uri $uri/ /index.html;
    }

    # proxy API
    location /api/ {
        proxy_pass http://backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # subidas
    location /uploads/ {
        proxy_pass http://backend:8000;
    }
}


--- rental-mvp/frontend/tsconfig.json ---
{
    "compilerOptions": {
        "target": "ES2022",
        "lib": [
            "DOM",
            "DOM.Iterable",
            "ES2022"
        ],
        "module": "ESNext",
        "moduleResolution": "Node",
        "types": [
            "vite/client"
        ],
        "strict": true,
        "jsx": "react-jsx",
        "resolveJsonModule": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
    },
    "include": [
        "src"
    ]
}

--- rental-mvp/frontend/postcss.config.js ---
// rental-mvp/frontend/postcss.config.js
export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {}
    }
};


--- rental-mvp/frontend/tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: ['./index.html', './src/**/*.{ts,tsx}'],
    theme: {
        //   ↓↓↓ breakpoints fluidos
        screens: {
            xs: '375px',
            sm: '640px',
            md: '768px',
            lg: '1024px',
            xl: '1280px',
            '2xl': '1440px',
            '3xl': '1920px'
        },
        container: { center: true, padding: '1rem' },
        extend: {
            fontFamily: { sans: ['Inter', 'system-ui', 'sans-serif'] },
            colors: {
                brand: { DEFAULT: '#0d6efd', hover: '#0b5ed7' },
                surface: '#ffffff'
            },
            boxShadow: {
                card: '0 1px 3px rgba(0,0,0,.08)',
                cardHover: '0 4px 12px rgba(0,0,0,.12)'
            }
        }
    },
    plugins: [
        require('@tailwindcss/forms'),
        require('@tailwindcss/typography'),
        require('@tailwindcss/line-clamp'),
        require('@tailwindcss/container-queries') // 🆕
    ]
};


--- rental-mvp/frontend/src/App.tsx ---
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { Suspense } from "react";

import ErrorBoundary from "./ErrorBoundary";
import { AuthProvider } from "./hooks/useAuth";

import Header from "./components/layout/Header";
import Footer from "./components/layout/Footer";

import Home from "./pages/Home";
import Login from "./pages/Login";
import Register from "./pages/Register";
import Dashboard from "./pages/Dashboard";
import Protected from "./Protected";

import "./styles/global.css";

const queryClient = new QueryClient();

export default function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <BrowserRouter>
          <ErrorBoundary>
            <Header />

            <Suspense
              fallback={
                <p className="py-32 text-center text-gray-500">Cargando…</p>
              }
            >
              <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/login" element={<Login />} />
                <Route path="/register" element={<Register />} />

                {/*  RUTA SEGURA  */}
                <Route
                  path="/dashboard"
                  element={
                    <Protected>
                      <Dashboard />
                    </Protected>
                  }
                />
              </Routes>
            </Suspense>

            <Footer />
          </ErrorBoundary>
        </BrowserRouter>
      </AuthProvider>
    </QueryClientProvider>
  );
}


--- rental-mvp/frontend/src/api.ts ---
import axios from "axios";

/**
 * Singleton Axios con:
 *  · baseURL "/api"
 *  · Authorization automático si hay token en localStorage
 */
export const api = axios.create({ baseURL: "/api" });

api.interceptors.request.use(cfg => {
  const token = localStorage.getItem("token");
  if (token) cfg.headers.Authorization = `Bearer ${token}`;
  return cfg;
});


--- rental-mvp/frontend/src/ErrorBoundary.tsx ---
import React, { ErrorInfo, ReactNode } from "react";

type Props = { children: ReactNode };
type State = { hasError: boolean };

class ErrorBoundary extends React.Component<Props, State> {
  state: State = { hasError: false };

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: Error, info: ErrorInfo) {
    // Aquí podrías enviar logs a Sentry, LogRocket, etc.
    console.error("⛔ Unhandled error:", error, info);
  }

  render() {
    if (this.state.hasError) {
      return (
        <main className="flex min-h-[60vh] items-center justify-center">
          <p className="rounded-md bg-red-50 p-6 text-center text-lg text-red-600 shadow">
            ¡Ups! Algo ha ido mal.<br />
            Intenta recargar la página.
          </p>
        </main>
      );
    }
    return this.props.children;
  }
}

export default ErrorBoundary;


--- rental-mvp/frontend/src/main.tsx ---
// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Toaster } from 'react-hot-toast';          // 🆕
import './styles/global.css';

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <App />
    <Toaster                                         // 🆕
      position="top-right"
      toastOptions={{
        style: { fontSize: '0.875rem' },            // 14 px
        duration: 3000
      }}
    />
  </React.StrictMode>
);


--- rental-mvp/frontend/src/utils.ts ---
// utils.ts
/**
 * URL base de la API.  Ajusta en .env.local si no usas localhost:8000
 *   VITE_API_BASE_URL=https://tu-dominio.com
 */
export const API_BASE =
  import.meta.env.VITE_API_BASE_URL ?? "http://localhost:8000";

/**  
 * Devuelve una URL de imagen válida.
 * - Si ya es absoluta → la deja tal cual.
 * - Si empieza por “/” → la concatena con API_BASE.
 * - Si viene `undefined` → usa el *fallback*.
 */
export function resolveImage(url: string | undefined, fallback: string) {
  if (!url) return fallback;
  if (/^https?:\/\//i.test(url)) return url; // absoluta
  return `${API_BASE}${url.startsWith("/") ? "" : "/"}${url}`;
}


--- rental-mvp/frontend/src/Protected.tsx ---
import { Navigate, useLocation } from "react-router-dom";
import { useAuth } from "./hooks/useAuth";

export default function Protected({ children }: { children: JSX.Element }) {
  const { token } = useAuth();
  const loc = useLocation();
  return token ? children : <Navigate to="/login" replace state={{ from: loc }} />;
}


--- rental-mvp/frontend/src/hooks/useAuth.tsx ---
import React, { createContext, useContext, useState } from "react";

/* ------------------------------------------------------------------ */
/*                       Contexto & proveedor                         */
/* ------------------------------------------------------------------ */
type AuthContextT = {
  token: string | null;
  login: (t: string) => void;
  logout: () => void;
};
const AuthContext = createContext<AuthContextT | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  children
}) => {
  const [token, setToken] = useState<string | null>(
    () => localStorage.getItem("token")
  );

  const login = (t: string) => {
    localStorage.setItem("token", t);
    setToken(t);
  };

  const logout = () => {
    localStorage.removeItem("token");
    setToken(null);
  };

  return (
    <AuthContext.Provider value={{ token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

/* ------------------------------------------------------------------ */
/*                           Hooks util                               */
/* ------------------------------------------------------------------ */
export const useAuth = () => {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth debe usarse dentro de <AuthProvider>");
  return ctx;
};

/** Lee el token directo de localStorage (válido fuera de React). */
export const getTokenLS = () => localStorage.getItem("token");


--- rental-mvp/frontend/src/styles/global.css ---
/* frontend/src/styles/global.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* ---------- BASE ---------- */
@layer base {
  html { @apply scroll-smooth; }
  body { @apply bg-gray-50 text-gray-800 antialiased font-sans; }
}

/* ---------- COMPONENTS ---------- */
@layer components {
  /* Botones */
  .btn        { @apply inline-flex items-center justify-center rounded-md bg-brand px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors hover:bg-brand-hover disabled:opacity-60; }
  .btn--ghost { @apply inline-flex items-center justify-center rounded-md border border-brand px-4 py-2 text-sm font-medium text-brand transition-colors hover:bg-brand/5; }

  /* Badges */
  .badge         { @apply inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium; }
  .badge--ok     { @apply badge bg-green-100 text-green-800; }
  .badge--danger { @apply badge bg-red-100 text-red-800; }

  /* Campos select genérico */
  .form-select { @apply block w-full rounded-md border-gray-300 text-sm shadow-sm focus:border-brand focus:ring-brand; }

  /* Toast */
  .toast-success { @apply bg-green-600 text-white; }
  .toast-error   { @apply bg-red-600 text-white; }

  /* Títulos fluidos (ejemplo h1) */
  h1 { font-size: clamp(2.25rem, 5vw + 1rem, 3.5rem); } /* 36 px → 56 px aprox */
}

/* ---------- UTILITIES PERSONALIZADAS ---------- */
@layer utilities {
  .text-balance { text-wrap: balance; }

  /* Evita re-pintados innecesarios en grandes listas */
  .content-auto { content-visibility: auto; }

  /* Oculta scrollbar (usarlo con cuidado) */
  .scrollbar-none::-webkit-scrollbar { display: none; }
}


--- rental-mvp/frontend/src/features/auth/register.ts ---
import { api } from "../../api";

/** Lanza 400 si el username o el email ya están en uso. */
export async function register(
  username: string,
  email: string,
  password: string
): Promise<void> {
  await api.post("/auth/signup", { username, email, password });
}


--- rental-mvp/frontend/src/features/auth/login.ts ---
import { api } from "../../api";

export async function login(username: string, password: string): Promise<string> {
  const { data } = await api.post(
    "/auth/token",
    new URLSearchParams({ username, password }),
    { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
  );
  return data.access_token as string;
}


--- rental-mvp/frontend/src/features/categories/useCategories.ts ---
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";

export type Category = { id: number; name: string };

export default function useCategories() {
  const { data, isLoading } = useQuery<Category[]>({
    queryKey: ["categories"],
    queryFn: () => api.get<Category[]>("/categories/").then(r => r.data),
    staleTime: 5 * 60_000 // 5 min
  });

  return { data: data ?? [], loading: isLoading };
}


--- rental-mvp/frontend/src/features/items/useItems.ts ---
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";

export type Item = {
  id: number;
  name: string;
  description?: string;
  price_per_h: number;
  available: boolean;

  /* ---- imágenes ---- */
  /** 1 sola (compat.) */
  image_url?: string;
  /** varias (nuevo)   */
  image_urls?: string[];

  categories?: { id: number; name: string }[];
};

export function useItems(params?: URLSearchParams) {
  const queryKey = ["items", params?.toString() ?? ""];

  const { data, isLoading, refetch } = useQuery<Item[]>({
    queryKey,
    queryFn: () =>
      api.get<Item[]>("/items/", { params }).then(r => r.data),
    staleTime: 60_000 // 1 min sin refetch
  });

  return { data: data ?? [], loading: isLoading, refetch };
}


--- rental-mvp/frontend/src/features/items/AddItemModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/features/items/AddItemModal.tsx                                       */
/* -------------------------------------------------------------------------- */
import { Fragment, useEffect, useState } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import { XMarkIcon, PhotoIcon, TrashIcon } from '@heroicons/react/24/outline';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import toast from 'react-hot-toast';

import useCategories, { Category } from '../categories/useCategories';
import { useAuth } from '../../hooks/useAuth';
import { api } from '../../api';

/* -------------------------------------------------------------------------- */
/*                               schema + types                               */
/* -------------------------------------------------------------------------- */

const MB = 1024 * 1024;
const MAX_IMAGES = 6;

const priceRegex = /^\d+([.,]\d{1,2})?$/; // hasta 2 decimales

const schema = z.object({
  name: z.string().min(3, 'Mínimo 3 caracteres'),
  description: z.string().max(500).optional(),
  price_per_h: z
    .string()
    .regex(priceRegex, 'Precio inválido')
    .transform(v => Number(v.replace(',', '.'))),
  categories: z.array(z.number()).min(1, 'Selecciona al menos una categoría'),
  images: z
    .array(
      z
        .instanceof(File)
        .refine(f => f.size <= 5 * MB, 'Cada imagen máx. 5 MB')
    )
    .min(1, 'Al menos 1 imagen')
    .max(MAX_IMAGES, `Máx. ${MAX_IMAGES} imágenes`)
});

type FormData = z.infer<typeof schema>;

type Props = {
  open: boolean;
  onClose: () => void;
  onCreated: () => void; // callback para refrescar listado
};

/* -------------------------------------------------------------------------- */
/*                           Componente principal                             */
/* -------------------------------------------------------------------------- */
export default function AddItemModal({ open, onClose, onCreated }: Props) {
  const { data: cats } = useCategories();
  const { token } = useAuth();

  const {
    register,
    handleSubmit,
    watch,
    reset,
    setValue,
    formState: { errors, isSubmitting }
  } = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: { categories: [], images: [] }
  });

  /* --------------------------- previews dinámicos -------------------------- */
  const files = watch('images'); // File[]
  const [previews, setPreviews] = useState<string[]>([]);

  useEffect(() => {
    const urls = files.map(f => URL.createObjectURL(f));
    setPreviews(urls);
    return () => urls.forEach(URL.revokeObjectURL); // cleanup
  }, [files]);

  /* ------------------------------- submit --------------------------------- */
  async function onSubmit(data: FormData) {
    if (!token) {
      toast.error('Debes haber iniciado sesión');
      return;
    }

    try {
      /* 1.- subimos imágenes (paralelo) */
      let image_urls: string[] = [];
      if (data.images.length) {
        const uploads = await Promise.all(
          data.images.map(async img => {
            const fd = new FormData();
            fd.append('file', img);
            const r = await api.post<{ url: string }>('/upload/', fd, {
              headers: { 'Content-Type': 'multipart/form-data' }
            });
            return r.data.url;
          })
        );
        image_urls = uploads;
      }

      /* 2.- creamos ítem */
      await api.post('/items/', {
        name: data.name,
        description: data.description,
        price_per_h: data.price_per_h,
        categories: data.categories,
        image_urls           // 🔥 ahora array
      });

      toast.success('¡Producto publicado!');
      reset();
      onCreated();
      onClose();
    } catch (err: any) {
      console.error(err);
      toast.error(err.response?.data?.detail ?? 'Error al crear producto');
    }
  }

  /* ------------------------------------------------------------------------ */
  /*                                   UI                                     */
  /* ------------------------------------------------------------------------ */
  return (
    <Transition show={open} as={Fragment}>
      <Dialog
        onClose={() => {
          reset();
          onClose();
        }}
        className="relative z-50"
      >
        {/* ---------- Backdrop ---------- */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* ---------- Wrapper ---------- */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel className="flex w-full max-w-2xl max-h-[90vh] flex-col overflow-x-hidden rounded-xl bg-white shadow-xl">
              {/* ---------- Header ---------- */}
              <header className="flex items-center justify-between border-b px-6 py-4">
                <Dialog.Title className="text-lg font-semibold">
                  Nuevo producto
                </Dialog.Title>
                <button
                  type="button"
                  className="rounded p-1 text-gray-500 hover:bg-gray-100"
                  onClick={() => {
                    reset();
                    onClose();
                  }}
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </header>

              {/* ---------- Form (scrollable) ---------- */}
              <form
                onSubmit={handleSubmit(onSubmit)}
                className="grid flex-1 grid-cols-1 gap-6 overflow-y-auto px-6 py-8 md:grid-cols-2"
              >
                {/* --------------------------- Columna 1 --------------------------- */}
                <div className="space-y-4">
                  {/* Nombre */}
                  <div>
                    <label className="block text-sm font-medium">Nombre</label>
                    <input
                      {...register('name')}
                      className="form-input mt-1 w-full"
                      placeholder="Taladro Bosch 800 W"
                    />
                    {errors.name && (
                      <p className="text-xs text-red-600">
                        {errors.name.message}
                      </p>
                    )}
                  </div>

                  {/* Descripción */}
                  <div>
                    <label className="block text-sm font-medium">
                      Descripción
                    </label>
                    <textarea
                      {...register('description')}
                      rows={5}
                      className="form-input mt-1 w-full resize-none"
                      placeholder="Añade detalles técnicos, estado, accesorios incluidos…"
                    />
                    {errors.description && (
                      <p className="text-xs text-red-600">
                        {errors.description.message}
                      </p>
                    )}
                  </div>

                  {/* Precio */}
                  <div>
                    <label className="block text-sm font-medium">
                      Precio / hora (€)
                    </label>
                    <input
                      {...register('price_per_h')}
                      className="form-input mt-1 w-full"
                      placeholder="3.5"
                      inputMode="decimal"
                    />
                    {errors.price_per_h && (
                      <p className="text-xs text-red-600">
                        {errors.price_per_h.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* --------------------------- Columna 2 --------------------------- */}
                <div className="space-y-4">
                  {/* Imágenes */}
                  <div>
                    <label className="block text-sm font-medium">
                      Imágenes ({files.length}/{MAX_IMAGES})
                    </label>

                    {/* zona de drop / input */}
                    <label className="mt-1 flex min-h-[4rem] w-full cursor-pointer flex-col items-center justify-center rounded border-2 border-dashed border-gray-300 p-4 text-center text-sm text-gray-500 hover:border-brand hover:text-brand">
                      <PhotoIcon className="h-8 w-8" />
                      <span className="mt-1">
                        PNG, JPG · máx. 5 MB c/u · hasta {MAX_IMAGES}
                      </span>
                      <input
                        type="file"
                        accept="image/*"
                        multiple
                        className="sr-only"
                        onChange={e =>
                          setValue(
                            'images',
                            [...(e.target.files ?? [])] as File[],
                            { shouldValidate: true }
                          )
                        }
                      />
                    </label>

                    {/* previews */}
                    {previews.length > 0 && (
                      <div className="mt-4 grid grid-cols-3 gap-2">
                        {previews.map((src, i) => (
                          <div key={i} className="relative">
                            <img
                              src={src}
                              alt={`preview ${i + 1}`}
                              className="h-24 w-full rounded object-cover"
                            />
                            <button
                              type="button"
                              title="Eliminar"
                              onClick={() => {
                                const copy = [...files];
                                copy.splice(i, 1);
                                setValue('images', copy, { shouldValidate: true });
                              }}
                              className="absolute right-0 top-0 rounded-bl bg-black/60 p-0.5 text-white transition-colors hover:bg-black/80"
                            >
                              <TrashIcon className="h-4 w-4" />
                            </button>
                          </div>
                        ))}
                      </div>
                    )}

                    {errors.images && (
                      <p className="mt-1 text-xs text-red-600">
                        {errors.images.message as string}
                      </p>
                    )}
                  </div>

                  {/* Categorías */}
                  <div>
                    <p className="mb-1 text-sm font-medium">Categorías</p>
                    <div className="flex flex-wrap gap-2">
                      {cats.map((c: Category) => {
                        const selected = watch('categories').includes(c.id);
                        return (
                          <button
                            type="button"
                            key={c.id}
                            onClick={() => {
                              const current = new Set(watch('categories'));
                              selected
                                ? current.delete(c.id)
                                : current.add(c.id);
                              setValue('categories', [...current]);
                            }}
                            className={
                              selected
                                ? 'rounded-full bg-brand px-3 py-0.5 text-xs text-white'
                                : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'
                            }
                          >
                            {c.name}
                          </button>
                        );
                      })}
                    </div>
                    {errors.categories && (
                      <p className="text-xs text-red-600">
                        {errors.categories.message}
                      </p>
                    )}
                  </div>
                </div>

                {/* --------------------------- Footer --------------------------- */}
                <div className="md:col-span-2 flex justify-end gap-3">
                  <button
                    type="button"
                    className="btn--ghost"
                    onClick={() => {
                      reset();
                      onClose();
                    }}
                  >
                    Cancelar
                  </button>
                  <button className="btn" disabled={isSubmitting}>
                    {isSubmitting ? 'Publicando…' : 'Publicar'}
                  </button>
                </div>
              </form>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
}


--- rental-mvp/frontend/src/features/items/ItemList.tsx ---
import { useEffect, useMemo, useRef, useState } from 'react';
import axios from 'axios';
import Container from '../../components/shared/Container';
import ItemCard from '../../components/ui/ItemCard';
import SkeletonCard from '../../components/ui/SkeletonCard';
import FiltersSidebar from '../../components/filters/FiltersSidebar';
import { useItems } from './useItems';
import { useAuth } from '../../hooks/useAuth';
import AddItemModal from './AddItemModal';
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';

/* -------------------------------------------------- */
/*                    Tipado filtros                  */
/* -------------------------------------------------- */
type FiltersT = {
  name?: string;
  min_price?: number;
  max_price?: number;
  categories?: number[];
  order?: 'price_asc' | 'price_desc' | 'name';
};

export default function ItemList() {
  /* ------------------------------ filtros ------------------------------ */
  const [filters, setFilters] = useState<FiltersT>({});

  /* Serializamos filtros → query-string */
  const params = useMemo(() => {
    const p = new URLSearchParams();

    Object.entries(filters).forEach(([k, v]) => {
      if (v === undefined || v === '') return;
      if (Array.isArray(v)) v.forEach(val => p.append(k, String(val)));
      else p.set(k, String(v));
    });

    /* orden (price_asc | price_desc | name) */
    if (filters.order) {
      const [field, dir] = filters.order.split('_');
      p.set('order_by', field === 'price' ? 'price' : 'name');
      p.set('order_dir', dir);
    }
    return p;
  }, [filters]);

  const { data: items, loading, refetch } = useItems(params);
  const { token } = useAuth();

  /* ----------------------- drawer móvil filtros ----------------------- */
  const [openFilters, setOpenFilters] = useState(false);

  /* ------------------------ infinite-scroll demo ---------------------- */
  const sentinel = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!sentinel.current) return;
    const ob = new IntersectionObserver(
      entries => {
        if (entries[0].isIntersecting && !loading) {
          /* Aquí podrías paginar → aumentar offset y refetch() */
        }
      },
      { rootMargin: '600px' }
    );
    ob.observe(sentinel.current);
    return () => ob.disconnect();
  }, [loading]);

  /* ----------------------- modal “añadir ítem” ------------------------ */
  const [addOpen, setAddOpen] = useState(false);

  /* -------------------------------------------------------------------- */
  return (
    <Container>
      {/* ---------- botón abrir filtros (solo xs-sm) ---------- */}
      <button onClick={() => setOpenFilters(true)} className="btn mb-4 md:hidden">
        <Bars3Icon className="mr-2 h-5 w-5" />
        Filtros
      </button>

      <div className="flex flex-col gap-10 md:flex-row">
        {/* ---------- Filtros (off-canvas en móvil) ---------- */}
        {/* Backdrop */}
        <div
          className={`
            fixed inset-0 z-40 bg-black/40 backdrop-blur-sm transition-opacity md:hidden
            ${openFilters ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'}
          `}
          onClick={() => setOpenFilters(false)}
        />

        {/* Panel */}
        <aside
          className={`
            fixed left-0 top-0 z-50 h-full w-72 bg-white p-6 shadow-xl transition-transform
            md:static md:h-auto md:w-auto md:translate-x-0 md:bg-transparent md:shadow-none
            ${openFilters ? 'translate-x-0' : '-translate-x-full'}
          `}
        >
          {/* Cerrar (solo móvil) */}
          <button onClick={() => setOpenFilters(false)} className="mb-4 md:hidden">
            <XMarkIcon className="h-6 w-6" />
          </button>

          <FiltersSidebar
            value={filters}
            onChange={setFilters}
            onReset={() => setFilters({})}
          />
        </aside>

        {/* -------------------- listado de tarjetas -------------------- */}
        <section className="flex-1">
          {/* CTA añadir producto (solo usuarios logueados) */}
          {token && (
            <div className="flex justify-end">
              <button className="btn mb-4" onClick={() => setAddOpen(true)}>
                Añadir producto
              </button>
            </div>
          )}

          {/* loader inicial */}
          {loading && !items.length ? (
            <GridSkeleton />
          ) : (
            <Grid>
              {items.map(it => (
                <ItemCard key={it.id} item={it} />
              ))}
              {/* sentinel infinite-scroll */}
              <div ref={sentinel} />
            </Grid>
          )}

          {/* vacío */}
          {!loading && !items.length && (
            <p className="py-6 text-center text-gray-500">No hay resultados.</p>
          )}
        </section>
      </div>

      {/* modal añadir */}
      <AddItemModal open={addOpen} onClose={() => setAddOpen(false)} onCreated={refetch} />
    </Container>
  );
}

/* -------------------------------------------------- */
/*                       Helpers                      */
/* -------------------------------------------------- */

/* Grid responsive: min-width 12 rem (≈192 px) y se
   auto-ajusta con container-queries si el padre pasa
   a ser un “container” — funciona también sin CQ. */
const Grid = ({ children }: { children: React.ReactNode }) => (
  <div
    className="
      grid gap-6 py-6 content-auto
      @container lg:[grid-template-columns:repeat(auto-fill,minmax(14rem,1fr))]
      [grid-template-columns:repeat(auto-fill,minmax(12rem,1fr))]
    "
  >
    {children}
  </div>
);

const GridSkeleton = () => (
  <Grid>
    {Array.from({ length: 8 }).map((_, i) => (
      <SkeletonCard key={i} />
    ))}
  </Grid>
);


--- rental-mvp/frontend/src/features/rentals/RentalList.tsx ---
import { useAuth } from "../../hooks/useAuth";
import { useRentals } from "./useRentals";

export default function RentalList() {
  const { token } = useAuth();
  const { data: rentals, loading } = useRentals(token);   // ← sin cambios extra

  if (!token)   return <p className="text-gray-500">Debes iniciar sesión para ver tus alquileres.</p>;
  if (loading)  return <p className="text-gray-500">Cargando…</p>;
  if (!rentals.length) return <p className="text-gray-500">No tienes alquileres activos.</p>;

  return (
    <div className="space-y-2">
      {rentals.map(r => (
        <div
          key={r.id}
          className="flex items-center justify-between rounded-md bg-white p-3 shadow"
        >
          <span className="font-medium">{r.item.name}</span>
          <span className={r.returned ? "badge--ok" : "badge badge--danger"}>
            {r.returned ? "Devuelto" : "Pendiente"}
          </span>
        </div>
      ))}
    </div>
  );
}


--- rental-mvp/frontend/src/features/rentals/useRentals.ts ---
import { useQuery } from "@tanstack/react-query";
import { api } from "../../api";
import { Item } from "../items/useItems";

export type Rental = {
  id: number;
  item: Item;
  start_at: string;
  end_at: string;
  deposit: number;
  returned: boolean;
};

/**
 * Devuelve la lista de alquileres del usuario.  
 * Solo dispara la petición cuando `token` es *truthy*.
 */
export function useRentals(token: string | null) {
  const enabled = Boolean(token);          // ← normalizamos

  const { data, isLoading } = useQuery<Rental[]>({
    queryKey: ["rentals"],
    queryFn: () => api.get<Rental[]>("/rentals/me").then(r => r.data),
    enabled,                               // ✓ ahora siempre boolean
    staleTime: 60_000,
    retry: false
  });

  return { data: data ?? [], loading: isLoading };
}


--- rental-mvp/frontend/src/pages/Register.tsx ---
// src/pages/Register.tsx
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import zxcvbn from "zxcvbn";
import { useNavigate } from "react-router-dom";
import toast from "react-hot-toast";
import clsx from "clsx";

import { register as apiRegister } from "../features/auth/register";
import { login as apiLogin } from "../features/auth/login";
import { useAuth } from "../hooks/useAuth";

import Container from "../components/shared/Container";
import SocialButton from "../components/ui/SocialButton";
import { FcGoogle } from "react-icons/fc";
import { FaGithub } from "react-icons/fa";

/* -------- validation schema -------- */
const schema = z
  .object({
    username: z.string().min(3, "Mín. 3 caracteres"),
    email: z.string().email("Email inválido"),
    password: z.string().min(8, "Mín. 8 caracteres"),
    confirm: z.string(),
    terms: z.literal(true, {
      errorMap: () => ({ message: "Acepta los términos" }),
    }),
  })
  .refine(data => data.password === data.confirm, {
    message: "Las contraseñas no coinciden",
    path: ["confirm"],
  });

type FormData = z.infer<typeof schema>;

export default function Register() {
  const navigate = useNavigate();
  const { login: saveToken } = useAuth();

  const {
    register,
    handleSubmit,
    watch,
    formState: { errors, isSubmitting },
  } = useForm<FormData>({ resolver: zodResolver(schema) });

  const pwd = watch("password", "");

  /* -------------------------------------------------------------------- */
  const onSubmit = async (data: FormData) => {
    try {
      // 1) signup
      await apiRegister(data.username, data.email, data.password);

      // 2) auto-login
      const token = await apiLogin(data.username, data.password);
      saveToken(token);

      toast.success("Cuenta creada, ¡bienvenido!");
      navigate("/dashboard");
    } catch (err: any) {
      // FastAPI devuelve detail en .response.data.detail
      const msg =
        err?.response?.data?.detail ??
        "No se pudo crear la cuenta. Inténtalo más tarde.";
      toast.error(msg);
    }
  };

  /* -------------------------------------------------------------------- */
  const strength = zxcvbn(pwd).score; // 0-4

  return (
    <Container>
      <main className="flex min-h-[70vh] items-center justify-center">
        <div className="w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card">
          <h1 className="text-center text-2xl font-bold">Crear cuenta</h1>

          {/* ───── login social ───── */}
          <div className="space-y-3">
            <SocialButton provider="google" icon={FcGoogle} label="Con Google" />
            <SocialButton provider="github" icon={FaGithub} label="Con GitHub" />
          </div>

          <div className="relative text-xs text-gray-400">
            <hr />
            <span className="absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-2">
              o regístrate con email
            </span>
          </div>

          {/* ───── formulario ───── */}
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <input
              {...register("username")}
              placeholder="Nombre de usuario"
              className="form-input w-full"
            />
            {errors.username && (
              <p className="text-xs text-red-600">{errors.username.message}</p>
            )}

            <input
              {...register("email")}
              type="email"
              placeholder="Email"
              className="form-input w-full"
            />
            {errors.email && (
              <p className="text-xs text-red-600">{errors.email.message}</p>
            )}

            <input
              {...register("password")}
              type="password"
              placeholder="Contraseña"
              className="form-input w-full"
            />

            {/* strength meter */}
            {pwd && (
              <div className="h-2 w-full overflow-hidden rounded bg-gray-200">
                <div
                  style={{ width: `${(strength + 1) * 20}%` }}
                  className={clsx(
                    "h-full transition-all",
                    [
                      "bg-red-500",
                      "bg-orange-400",
                      "bg-yellow-400",
                      "bg-lime-500",
                      "bg-green-600",
                    ][strength],
                  )}
                />
              </div>
            )}
            {errors.password && (
              <p className="text-xs text-red-600">
                {errors.password.message}
              </p>
            )}

            <input
              {...register("confirm")}
              type="password"
              placeholder="Repite contraseña"
              className="form-input w-full"
            />
            {errors.confirm && (
              <p className="text-xs text-red-600">{errors.confirm.message}</p>
            )}

            {/* terms */}
            <label className="flex gap-2 text-xs text-gray-600">
              <input type="checkbox" {...register("terms")} />
              Acepto los&nbsp;
              <a href="/terms" className="text-brand hover:underline">
                Términos y la Política de privacidad
              </a>
            </label>
            {errors.terms && (
              <p className="text-xs text-red-600">{errors.terms.message}</p>
            )}

            <button className="btn w-full" disabled={isSubmitting}>
              {isSubmitting ? "Creando…" : "Crear cuenta"}
            </button>
          </form>
        </div>
      </main>
    </Container>
  );
}


--- rental-mvp/frontend/src/pages/Login.tsx ---
// src/pages/Login.tsx
import { FormEvent, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { login as apiLogin } from '../features/auth/login';

import { FcGoogle } from 'react-icons/fc';
import { FaGithub } from 'react-icons/fa';
import SocialButton from '../components/ui/SocialButton';
import Container from '../components/shared/Container';
import toast from 'react-hot-toast';  

export default function Login() {
  const [user, setUser] = useState('');
  const [pwd, setPwd] = useState('');
  const [error, setError] = useState<string | null>(null);

  const { login: saveToken } = useAuth();
  const nav = useNavigate();

  async function handleSubmit(e: FormEvent) {
    e.preventDefault();
    try {
  const token = await apiLogin(user, pwd);
  saveToken(token);
  nav('/dashboard');
  toast.success('¡Bienvenido de nuevo!');            // 🆕
} catch {
  toast.error('Usuario o contraseña incorrectos');   // 🆕
}
  }

  return (
    <Container>
      <main className="flex min-h-[70vh] items-center justify-center">
        <div className="w-full max-w-md space-y-6 rounded-xl bg-white p-8 shadow-card">
          {/* Título */}
          <h1 className="text-center text-2xl font-bold">Iniciar sesión</h1>

          {/* Social login */}
          <div className="space-y-3">
            <SocialButton
              provider="google"
              icon={FcGoogle}
              label="Entrar con Google"
            />
            <SocialButton
              provider="github"
              icon={FaGithub}
              label="Entrar con GitHub"
            />
          </div>

          <div className="relative">
            <hr />
            <span className="absolute left-1/2 top-1/2 -translate-x-1/2 bg-white px-2 text-xs text-gray-400">
              o continúa con tu cuenta
            </span>
          </div>

          {/* Form tradicional */}
          {error && <p className="text-center text-sm text-red-600">{error}</p>}
          <form onSubmit={handleSubmit} className="space-y-4">
            <input
              className="form-input w-full"
              placeholder="Usuario"
              value={user}
              onChange={e => setUser(e.target.value)}
              required
            />
            <input
              className="form-input w-full"
              type="password"
              placeholder="Contraseña"
              value={pwd}
              onChange={e => setPwd(e.target.value)}
              required
            />
            <button className="btn w-full">Entrar</button>
          </form>

          <p className="text-center text-xs text-gray-500">
            ¿No tienes cuenta?{' '}
            <a href="/register" className="font-medium text-brand hover:underline">
              Regístrate
            </a>
          </p>
        </div>
      </main>
    </Container>
  );
}


--- rental-mvp/frontend/src/pages/Dashboard.tsx ---
import Container from '../components/shared/Container';
import ItemList from '../features/items/ItemList';
import RentalList from '../features/rentals/RentalList';
import Section from '../components/shared/Section';

export default function Dashboard() {
  return (
    <Container>
      <Section title="Mis alquileres">
        <RentalList />
      </Section>

      <Section title="Catálogo público">
        <ItemList />
      </Section>
    </Container>
  );
}


--- rental-mvp/frontend/src/pages/Home.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/pages/Home.tsx                                                        */
/* -------------------------------------------------------------------------- */
import { Link } from 'react-router-dom';
import {
  ArrowRightIcon,
  PlusIcon,
  CloudArrowUpIcon,
  CalendarDaysIcon,
  BanknotesIcon,
} from '@heroicons/react/24/solid';

import Container from '../components/shared/Container';
import Section from '../components/shared/Section';

import Stats from '../components/Home/Stats';
import LogoCloud from '../components/Home/LogoCloud';
import Testimonials from '../components/Home/Testimonials';
import FAQ from '../components/Home/FAQ';

export default function Home() {
  /* Pasos del “cómo funciona” con su icono */
  const STEPS = [
    {
      title: 'Publica',
      desc: 'Sube tu producto, ponle precio y límites de uso.',
      icon: CloudArrowUpIcon,
    },
    {
      title: 'Reserva',
      desc: 'Los usuarios pagan la fianza y reservan al instante.',
      icon: CalendarDaysIcon,
    },
    {
      title: 'Gana',
      desc: 'Entregas el ítem, recibes el pago y valoraciones ⭐',
      icon: BanknotesIcon,
    },
  ];

  return (
    <>
      {/* ---------- HERO ---------- */}
      <section className="relative isolate overflow-hidden bg-brand text-white">
        {/* background blur blob */}
        <span className="pointer-events-none absolute -top-16 left-1/2 -z-10 h-[500px] w-[500px] -translate-x-1/2 rounded-full bg-white/10 blur-3xl" />

        <Container>
          <div className="flex min-h-[70vh] flex-col items-center justify-center gap-6 py-28 text-center">
            <h1 className="max-w-3xl text-balance text-5xl font-extrabold leading-tight">
              Dónde tus cosas <br className="hidden sm:inline" />
              <span className="text-white/80">cambian de mano</span>
            </h1>

            <p className="max-w-xl text-lg/relaxed text-white/90">
              Alquila herramientas, gadgets o equipamiento deportivo y monetiza lo
              que ya tienes. ¡Conecta con tu barrio y ahorra al planeta!
            </p>

            <div className="flex flex-wrap justify-center gap-4">
              <Link to="/dashboard" className="btn inline-flex gap-2">
                Explorar catálogo <ArrowRightIcon className="h-5 w-5" />
              </Link>
              <Link to="/dashboard#add" className="btn--ghost inline-flex gap-2">
                <PlusIcon className="h-5 w-5" />
                Publicar mi primer ítem
              </Link>
            </div>
          </div>
        </Container>

        {/* wave separator */}
        <svg
          aria-hidden
          viewBox="0 0 1440 120"
          className="block w-full text-brand"
          preserveAspectRatio="none"
        >
          <path
            d="M0,96L48,106.7C96,117,192,139,288,128C384,117,480,75,576,58.7C672,43,768,53,864,74.7C960,96,1056,128,1152,138.7C1248,149,1344,139,1392,133.3L1440,128L1440,0L1392,0C1344,0,1248,0,1152,0C1056,0,960,0,864,0C768,0,672,0,576,0C480,0,384,0,288,0C192,0,96,0,48,0L0,0Z"
            className="fill-white"
          />
        </svg>
      </section>

      {/* ---------- STATS ---------- */}
      <Stats />

      {/* ---------- LOGO CLOUD ---------- */}
      <LogoCloud />

      {/* ---------- CÓMO FUNCIONA ---------- */}
      <Section title="¿Cómo funciona?">
        <Container>
          <div className="grid gap-12 md:grid-cols-3">
            {STEPS.map(({ title, desc, icon: Icon }) => (
              <div key={title} className="space-y-4 text-center">
                <div className="mx-auto flex h-14 w-14 items-center justify-center rounded-full bg-brand/10">
                  <Icon className="h-6 w-6 text-brand" />
                </div>
                <h3 className="text-xl font-semibold">{title}</h3>
                <p className="text-gray-600">{desc}</p>
              </div>
            ))}
          </div>
        </Container>
      </Section>

      {/* ---------- TESTIMONIOS ---------- */}
      <Testimonials />

      {/* ---------- FAQ ---------- */}
      <FAQ />

      {/* ---------- CTA FINAL ---------- */}
      <section className="bg-brand py-16 text-center text-white">
        <Container>
          <h2 className="mb-6 text-3xl font-bold">
            ¿Listo para estrenar ingresos extra?
          </h2>
          <Link to="/register" className="btn">
            Crear cuenta gratis
          </Link>
        </Container>
      </section>
    </>
  );
}


--- rental-mvp/frontend/src/components/ui/SkeletonCard.tsx ---
export default function SkeletonCard() {
  return (
    <article
      className="
        flex flex-col overflow-hidden rounded-lg bg-white shadow-card
        animate-pulse
      "
    >
      {/* zona de imagen (mantiene proporción 4:3) */}
      <div className="aspect-[4/3] w-full bg-gray-200" />

      {/* zona de texto */}
      <div className="space-y-2 p-4">
        <div className="h-4 w-2/3 rounded bg-gray-200" />
        <div className="h-4 w-1/3 rounded bg-gray-200" />
      </div>
    </article>
  );
}


--- rental-mvp/frontend/src/components/ui/LazyImage.tsx ---
import { useState } from 'react';

type Props = {
  src: string;
  alt: string;
  className?: string;
  /** ancho estimado para el atributo `sizes` (ej. "100vw", "50vw") */
  sizes?: string;
};

export default function LazyImage({
  src,
  alt,
  className = '',
  sizes = '100vw'
}: Props) {
  const [loaded, setLoaded] = useState(false);

  /* genera srcset (320-640-960 px) */
  const srcset = [320, 640, 960]
    .map(w => `${src.replace(/(\?.*)?$/, '')}?w=${w} ${w}w`)
    .join(', ');

  return (
    <img
      src={src}
      srcSet={srcset}
      sizes={sizes}
      loading="lazy"
      decoding="async"                    /* 🆕 */
      onLoad={() => setLoaded(true)}
      className={`${className} transition-opacity duration-500 ${
        loaded ? 'opacity-100' : 'opacity-0'
      }`}
      alt={alt}
    />
  );
}


--- rental-mvp/frontend/src/components/ui/ItemCard.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/ItemCard.tsx                                            */
/* -------------------------------------------------------------------------- */
import { useState } from "react";
import { HeartIcon, EyeIcon } from "@heroicons/react/24/solid";
import clsx from "clsx";

import { Item } from "../../features/items/useItems";
import { resolveImage } from "../../utils";
import LazyImage from "./LazyImage";
import ItemDetailModal from "./ItemDetailModal";

export default function ItemCard({ item }: { item: Item }) {
  const [open, setOpen] = useState(false);

  /* -------- portada (1ª del array o la legacy) -------- */
  const cover = item.image_urls?.[0] ?? item.image_url;

  const imgSrc = resolveImage(
    cover,
    `https://source.unsplash.com/640x480/?${encodeURIComponent(item.name)}`
  );

  return (
    <>
      <article
        onClick={() => setOpen(true)}
        className="flex cursor-pointer flex-col overflow-hidden rounded-lg bg-surface shadow-card transition-transform duration-200 hover:-translate-y-1 hover:shadow-cardHover"
      >
        {/* ---------- Foto ---------- */}
        <div className="relative">
          <LazyImage
            src={imgSrc}
            alt={item.name}
            className="aspect-[4/3] w-full object-contain p-2"
          />

          {!item.available && (
            <span className="absolute left-0 top-0 rounded-br-md bg-red-600/90 px-2 py-0.5 text-xs font-semibold uppercase tracking-wide text-white">
              Alquilado
            </span>
          )}

          {/* acciones rápidas */}
          <div className="absolute inset-0 flex items-start justify-end gap-2 p-2 opacity-0 transition-opacity hover:opacity-100">
            <IconBtn title="Vista rápida">
              <EyeIcon className="h-5 w-5" />
            </IconBtn>
            <IconBtn title="Favorito">
              <HeartIcon className="h-5 w-5" />
            </IconBtn>
          </div>
        </div>

        {/* ---------- Info ---------- */}
        <div className="flex flex-1 flex-col gap-2 px-4 pb-4">
          <h3 className="line-clamp-1 text-lg font-semibold">{item.name}</h3>

          {item.description && (
            <p className="line-clamp-2 text-sm text-gray-600">
              {item.description}
            </p>
          )}

          <div className="mt-auto flex items-center justify-between">
            <p className="text-base font-bold text-brand">
              {item.price_per_h.toFixed(2)} €/h
            </p>
            <span
              className={clsx(
                "badge",
                item.available ? "badge--ok" : "badge--danger"
              )}
            >
              {item.available ? "Disponible" : "Alquilado"}
            </span>
          </div>
        </div>
      </article>

      {/* ---------- Modal de detalle ---------- */}
      <ItemDetailModal open={open} onClose={() => setOpen(false)} item={item} />
    </>
  );
}

/* -------------------------------------------------------------------------- */
/*                                 Helpers                                    */
/* -------------------------------------------------------------------------- */
function IconBtn({
  children,
  title
}: {
  children: React.ReactNode;
  title: string;
}) {
  return (
    <button
      type="button"
      title={title}
      onClick={e => e.stopPropagation()}
      className="rounded-full bg-white/90 p-1 text-gray-600 shadow transition-colors hover:bg-white"
    >
      {children}
    </button>
  );
}


--- rental-mvp/frontend/src/components/ui/SearchBar.tsx ---
import { useForm } from 'react-hook-form';

type Props = { onSubmit: (q: URLSearchParams) => void };

export default function SearchBar({ onSubmit }: Props) {
  const { register, handleSubmit, reset } = useForm<{
    q: string;
    min: number | undefined;
    max: number | undefined;
  }>({ defaultValues: { q: '', min: undefined, max: undefined } });

  return (
    <form
      onSubmit={handleSubmit(values => {
        const params = new URLSearchParams();
        if (values.q) params.set('name', values.q);
        if (values.min) params.set('min_price', values.min.toString());
        if (values.max) params.set('max_price', values.max.toString());
        onSubmit(params);
      })}
      className="flex flex-wrap items-end gap-3"
    >
      <input
        {...register('q')}
        placeholder="Buscar producto…"
        className="form-input w-52"
      />
      <input
        {...register('min', { valueAsNumber: true })}
        type="number"
        step="0.1"
        min={0}
        placeholder="€ mínimo"
        className="form-input w-32"
      />
      <input
        {...register('max', { valueAsNumber: true })}
        type="number"
        step="0.1"
        min={0}
        placeholder="€ máximo"
        className="form-input w-32"
      />
      <button className="btn">Filtrar</button>
      <button
        type="button"
        onClick={() => {
          reset();
          onSubmit(new URLSearchParams());
        }}
        className="btn--ghost"
      >
        Limpiar
      </button>
    </form>
  );
}


--- rental-mvp/frontend/src/components/ui/ItemDetailModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/ItemDetailModal.tsx                                     */
/* -------------------------------------------------------------------------- */
import { Fragment, useState } from "react";
import { Dialog, Transition } from "@headlessui/react";
import {
  XMarkIcon,
  StarIcon,
  ShieldCheckIcon,
  ClockIcon
} from "@heroicons/react/24/outline";
import { Item } from "../../features/items/useItems";
import { resolveImage } from "../../utils";
import LazyImage from "./LazyImage";
import clsx from "clsx";

type Props = {
  open: boolean;
  onClose: () => void;
  item: Item | null;
};

export default function ItemDetailModal({ open, onClose, item }: Props) {
  if (!item) return null;

  /* ---------- galería: imágenes reales o fallback ---------- */
  const gallery =
    item.image_urls && item.image_urls.length
      ? item.image_urls
      : [
          resolveImage(
            item.image_url,
            `https://source.unsplash.com/800x600/?${encodeURIComponent(
              item.name
            )}`
          )
        ];

  const [active, setActive] = useState(0);

  return (
    <Transition show={open} as={Fragment}>
      <Dialog onClose={onClose} className="relative z-50">
        {/* ---------- Backdrop ---------- */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* ---------- Wrapper ---------- */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel className="flex w-full max-w-5xl max-h-[95vh] flex-col overflow-hidden rounded-xl bg-white shadow-xl">
              {/* ---------------- Header ---------------- */}
              <header className="flex items-center justify-between border-b px-6 py-4">
                <Dialog.Title className="text-lg font-semibold">
                  {item.name}
                </Dialog.Title>
                <button
                  onClick={onClose}
                  className="rounded p-1 text-gray-500 hover:bg-gray-100 focus:outline-none"
                >
                  <XMarkIcon className="h-6 w-6" />
                </button>
              </header>

              {/* ---------------- Body ---------------- */}
              <section className="flex flex-1 flex-col gap-8 overflow-y-auto p-6 md:flex-row">
                {/* ---------- Galería ---------- */}
                <div className="md:w-1/2">
                  {/* principal */}
                  <div className="aspect-video overflow-hidden rounded-lg border">
                    <LazyImage
                      src={gallery[active]}
                      alt={item.name}
                      className="h-full w-full object-contain"
                      sizes="(min-width:768px) 50vw, 90vw"
                    />
                  </div>

                  {/* thumbnails */}
                  {gallery.length > 1 && (
                    <div className="mt-4 flex gap-2 overflow-x-auto">
                      {gallery.map((src, i) => (
                        <button
                          key={i}
                          onClick={() => setActive(i)}
                          className={clsx(
                            "shrink-0 overflow-hidden rounded-md border",
                            active === i && "ring-2 ring-brand"
                          )}
                        >
                          <LazyImage
                            src={src}
                            alt=""
                            className="h-16 w-24 object-cover"
                            sizes="96px"
                          />
                        </button>
                      ))}
                    </div>
                  )}
                </div>

                {/* ---------- Ficha ---------- */}
                <div className="flex flex-1 flex-col gap-6 md:pr-4">
                  {/* precio + rating */}
                  <div className="flex items-center justify-between">
                    <p className="text-3xl font-bold text-brand">
                      {item.price_per_h.toFixed(2)} €/h
                    </p>
                    <Rating value={4} />
                  </div>

                  {/* descripción */}
                  {item.description ? (
                    <p className="prose max-w-none text-sm leading-relaxed">
                      {item.description}
                    </p>
                  ) : (
                    <p className="text-sm text-gray-500">Sin descripción.</p>
                  )}

                  {/* categorías */}
                  {!!item.categories?.length && (
                    <div className="flex flex-wrap gap-2">
                      {item.categories.map(c => (
                        <span
                          key={c.id}
                          className="rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600"
                        >
                          {c.name}
                        </span>
                      ))}
                    </div>
                  )}

                  {/* ventajas rápidas */}
                  <ul className="space-y-2 text-sm">
                    <Feature icon={ShieldCheckIcon} text="Pago seguro con fianza" />
                    <Feature
                      icon={ClockIcon}
                      text="Cancelación gratis hasta 12 h antes"
                    />
                  </ul>

                  {/* CTA */}
                  <button className="btn mt-auto w-full md:max-w-xs">
                    Reservar ahora
                  </button>
                </div>
              </section>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
}

/* -------------------------------------------------------------------------- */
/*                                 Helpers                                    */
/* -------------------------------------------------------------------------- */
function Rating({ value }: { value: number }) {
  return (
    <div className="flex items-center gap-1">
      {Array.from({ length: 5 }).map((_, i) => (
        <StarIcon
          key={i}
          className={clsx(
            "h-5 w-5",
            i < value ? "fill-amber-400 stroke-amber-400" : "stroke-gray-300"
          )}
        />
      ))}
      <span className="ml-1 text-xs text-gray-500">
        ({value.toFixed(1)})
      </span>
    </div>
  );
}

function Feature({
  icon: Icon,
  text
}: {
  icon: (props: any) => JSX.Element;
  text: string;
}) {
  return (
    <li className="flex items-center gap-2">
      <Icon className="h-4 w-4 shrink-0 text-brand" />
      {text}
    </li>
  );
}


--- rental-mvp/frontend/src/components/ui/SocialButton.tsx ---
// src/components/ui/SocialButton.tsx
import { IconType } from 'react-icons';
import clsx from 'clsx';

type Props = {
  icon: IconType;
  label: string;
  provider: 'google' | 'github';
};

export default function SocialButton({ icon: Icon, label, provider }: Props) {
  return (
    <a
      href={`/api/oauth/${provider}`}           /* El backend redirige al proveedor */
      className={clsx(
        'btn flex w-full items-center justify-center gap-2',
        provider === 'google' && 'bg-white text-gray-700 shadow border hover:bg-gray-50',
        provider === 'github' && 'bg-gray-900 text-white hover:bg-gray-800'
      )}
    >
      <Icon className="h-5 w-5" />
      {label}
    </a>
  );
}


--- rental-mvp/frontend/src/components/ui/QuickViewModal.tsx ---
/* -------------------------------------------------------------------------- */
/*  src/components/ui/QuickViewModal.tsx                                      */
/* -------------------------------------------------------------------------- */
import { Fragment } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { XMarkIcon, StarIcon } from "@heroicons/react/24/outline";
import { Item } from "../../features/items/useItems";
import LazyImage from "./LazyImage";
import { resolveImage } from "../../utils";
import clsx from "clsx";

type Props = {
  open: boolean;
  onClose: () => void;
  item: Item | null;
};

export default function QuickViewModal({ open, onClose, item }: Props) {
  if (!item) return null;

  /* portada */
  const cover = item.image_urls?.[0] ?? item.image_url;

  const imgSrc = resolveImage(
    cover,
    `https://source.unsplash.com/800x600/?${encodeURIComponent(item.name)}`
  );

  return (
    <Transition show={open} as={Fragment}>
      <Dialog onClose={onClose} className="relative z-50">
        {/* ---------- Backdrop ---------- */}
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-150"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40 backdrop-blur-sm" />
        </Transition.Child>

        {/* ---------- Panel ---------- */}
        <div className="fixed inset-0 grid place-items-center p-4">
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-200"
            enterFrom="scale-95 opacity-0"
            enterTo="scale-100 opacity-100"
            leave="ease-in duration-150"
            leaveFrom="scale-100 opacity-100"
            leaveTo="scale-95 opacity-0"
          >
            <Dialog.Panel className="flex max-h-[90vh] w-full max-w-3xl flex-col overflow-hidden rounded-xl bg-white shadow-xl">
              {/* header */}
              <div className="flex items-center justify-between border-b p-4">
                <Dialog.Title className="text-lg font-semibold">
                  {item.name}
                </Dialog.Title>
                <button
                  onClick={onClose}
                  className="rounded p-1 text-gray-500 hover:bg-gray-100"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>

              {/* body */}
              <div className="grid gap-6 overflow-y-auto p-6 md:grid-cols-2">
                {/* imagen */}
                <div className="flex items-center justify-center">
                  <LazyImage
                    src={imgSrc}
                    alt={item.name}
                    className="w-full max-h-[60vh] rounded-lg object-contain"
                  />
                </div>

                {/* info */}
                <div className="flex flex-col gap-4">
                  <p className="text-2xl font-bold text-brand">
                    {item.price_per_h.toFixed(2)} €/h
                  </p>

                  <div className="flex items-center gap-1">
                    {Array.from({ length: 5 }).map((_, i) => (
                      <StarIcon
                        key={i}
                        className={clsx(
                          "h-5 w-5",
                          i < 4
                            ? "fill-amber-400 stroke-amber-400"
                            : "stroke-gray-300"
                        )}
                      />
                    ))}
                    <span className="ml-1 text-sm text-gray-500">(4,0)</span>
                  </div>

                  {item.description ? (
                    <p className="prose max-w-none text-sm leading-relaxed">
                      {item.description}
                    </p>
                  ) : (
                    <p className="text-sm text-gray-500">Sin descripción.</p>
                  )}

                  {!!item.categories?.length && (
                    <div className="flex flex-wrap gap-2">
                      {item.categories.map(c => (
                        <span
                          key={c.id}
                          className="rounded-full bg-gray-100 px-3 py-0.5 text-xs text-gray-600"
                        >
                          {c.name}
                        </span>
                      ))}
                    </div>
                  )}

                  <button className="btn mt-auto w-full">Reservar ahora</button>
                </div>
              </div>
            </Dialog.Panel>
          </Transition.Child>
        </div>
      </Dialog>
    </Transition>
  );
}


--- rental-mvp/frontend/src/components/shared/Section.tsx ---
type Props = {
  title?: string;
  children: React.ReactNode;
  id?: string;
};

export default function Section({ title, children, id }: Props) {
  return (
    <section id={id} className="space-y-6 py-16">
      {title && (
        <h2 className="text-center text-3xl font-bold tracking-tight">{title}</h2>
      )}
      {children}
    </section>
  );
}


--- rental-mvp/frontend/src/components/shared/Container.tsx ---
export default function Container({ children }: { children: React.ReactNode }) {
  return <div className="container">{children}</div>;
}


--- rental-mvp/frontend/src/components/layout/Footer.tsx ---
export default function Footer() {
  return (
    <footer className="mt-24 border-t bg-white py-12 text-center text-sm text-gray-500">
      Rental‑MVP © {new Date().getFullYear()} · Hecho con ❤ en FastAPI + React
    </footer>
  );
}


--- rental-mvp/frontend/src/components/layout/Header.tsx ---
// src/components/layout/Header.tsx
import { Link, NavLink } from 'react-router-dom';
import logo from '../../assets/logo.png';
import { useAuth } from '../../hooks/useAuth';

export default function Header() {
  const { token, logout } = useAuth();

  return (
    <header className="sticky top-0 z-30 bg-white/80 backdrop-blur shadow-sm">
      {/* ↑ duplica el padding vertical para más “aire” */}
      <div className="container flex items-center gap-8 py-4 lg:py-6">
        {/* Logo */}
        <Link to="/" aria-label="Inicio" className="flex items-center">
          {/* será ≈96 px en desktop */}
          <img
            src={logo}
            alt="Logo Rental-MVP"
            className="h-14 md:h-20 lg:h-24 w-auto select-none"
            decoding="async"
          />
        </Link>

        {/* Navegación */}
        <nav className="ml-auto flex gap-8 text-base font-semibold text-gray-600">
          {token ? (
            <>
              <NavLink to="/dashboard" className="hover:text-gray-900">
                Dashboard
              </NavLink>
              <button onClick={logout} className="hover:text-gray-900">
                Salir
              </button>
            </>
          ) : (
            <NavLink to="/login" className="hover:text-gray-900">
              Login
            </NavLink>
          )}
        </nav>
      </div>
    </header>
  );
}


--- rental-mvp/frontend/src/components/Home/FAQ.tsx ---
import { Disclosure } from '@headlessui/react';
import { ChevronUpIcon } from '@heroicons/react/24/outline';
import Container from '../shared/Container';

const FAQS = [
  ['¿Cómo se gestionan los pagos?', 'Usamos Stripe Connect para retener la fianza y liberar el pago una vez devuelto el ítem.'],
  ['¿Qué pasa si mi herramienta se daña?', 'Dispones de un seguro opcional a todo riesgo y sistema de valoraciones para vetar a malos usuarios.'],
  ['¿Puedo cancelar una reserva?', 'Sí, hasta 12 h antes sin penalización.'],
  ['¿Hay comisión?', 'Solo cobramos un 8 % al propietario cuando se confirma el alquiler.']
];

export default function FAQ() {
  return (
    <section className="bg-gray-50 py-16">
      <Container>
        <h2 className="mb-8 text-center text-3xl font-bold">Preguntas frecuentes</h2>

        <div className="mx-auto max-w-3xl space-y-4">
          {FAQS.map(([q, a]) => (
            <Disclosure key={q}>
              {({ open }) => (
                <>
                  <Disclosure.Button className="flex w-full items-center justify-between rounded-md bg-white px-4 py-3 text-left text-sm font-medium shadow">
                    {q}
                    <ChevronUpIcon
                      className={`h-5 w-5 transition-transform ${open ? 'rotate-180' : ''}`}
                    />
                  </Disclosure.Button>
                  <Disclosure.Panel className="px-4 pt-2 text-sm text-gray-600">
                    {a}
                  </Disclosure.Panel>
                </>
              )}
            </Disclosure>
          ))}
        </div>
      </Container>
    </section>
  );
}


--- rental-mvp/frontend/src/components/Home/Stats.tsx ---
import { useEffect, useRef, useState } from 'react';
import Container from '../shared/Container';

const DATA = [
  { label: 'Ítems publicados', value: 3124 },
  { label: 'Usuarios registrados', value: 857 },
  { label: '€ ahorrados', value: 24367 }
];

export default function Stats() {
  /* animate on scroll into view */
  const ref = useRef<HTMLDivElement>(null);
  const [visible, setVisible] = useState(false);

  useEffect(() => {
    const el = ref.current;
    if (!el) return;
    const io = new IntersectionObserver(
      ([e]) => e.isIntersecting && setVisible(true),
      { threshold: 0.4 }
    );
    io.observe(el);
    return () => io.disconnect();
  }, []);

  return (
    <section ref={ref} className="bg-white py-12">
      <Container>
        <div className="grid gap-8 sm:grid-cols-3">
          {DATA.map(({ label, value }) => (
            <div key={label} className="text-center">
              <p className="text-4xl font-extrabold text-brand">
                {visible ? value.toLocaleString() : '0'}
              </p>
              <p className="mt-2 text-sm font-medium text-gray-600">{label}</p>
            </div>
          ))}
        </div>
      </Container>
    </section>
  );
}


--- rental-mvp/frontend/src/components/Home/LogoCloud.tsx ---
import Container from '../shared/Container';

const LOGOS = [
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Bosch',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Makita',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Black+%26+Decker',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Dewalt',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=GoPro',
  'https://dummyimage.com/160x60/cccccc/ffffff?text=Xiaomi'
];

export default function LogoCloud() {
  return (
    <SectionWrapper>
      <Container>
        <div className="grid grid-cols-2 items-center gap-8 opacity-70 sm:grid-cols-3 lg:grid-cols-6">
          {LOGOS.map(src => (
            <img
              key={src}
              src={src}
              alt=""
              className="mx-auto h-12 w-auto object-contain grayscale"
              loading="lazy"
            />
          ))}
        </div>
      </Container>
    </SectionWrapper>
  );
}

function SectionWrapper({ children }: { children: React.ReactNode }) {
  return <section className="bg-gray-50 py-12">{children}</section>;
}


--- rental-mvp/frontend/src/components/Home/Testimonials.tsx ---
import Container from '../shared/Container';

const TESTIMONIALS = [
  {
    name: 'Laura P.',
    text: 'Alquilé mi cámara reflex y pagué las vacaciones. ¡Súper fácil!',
    avatar: 'https://source.unsplash.com/48x48/?woman,face'
  },
  {
    name: 'Carlos G.',
    text: 'Encontré un taladro a 5 € y no tuve que comprar uno nuevo.',
    avatar: 'https://source.unsplash.com/48x48/?man,face'
  },
  {
    name: 'Marta S.',
    text: 'Me encanta la seguridad del pago con fianza. Repetiré.',
    avatar: 'https://source.unsplash.com/48x48/?lady,face'
  }
];

export default function Testimonials() {
  return (
    <SectionWrapper>
      <Container>
        <h2 className="mb-10 text-center text-3xl font-bold">Historias reales</h2>

        {/* slider */}
        <div className="flex snap-x gap-6 overflow-x-auto pb-4 sm:justify-center">
          {TESTIMONIALS.map(t => (
            <article
              key={t.name}
              className="snap-center shrink-0 rounded-xl bg-white p-6 shadow-card sm:w-80"
            >
              <div className="flex items-center gap-3">
                <img
                  src={t.avatar}
                  alt=""
                  className="h-10 w-10 rounded-full object-cover"
                  loading="lazy"
                />
                <p className="font-semibold">{t.name}</p>
              </div>
              <p className="mt-4 text-sm text-gray-600">“{t.text}”</p>
            </article>
          ))}
        </div>
      </Container>
    </SectionWrapper>
  );
}

function SectionWrapper({ children }: { children: React.ReactNode }) {
  return <section className="bg-white py-16">{children}</section>;
}


--- rental-mvp/frontend/src/components/filters/FiltersSidebar.tsx ---
import { Disclosure } from '@headlessui/react';
import useCategories, { Category } from '../../features/categories/useCategories';

type Filters = {
  name?: string;
  min_price?: number;
  max_price?: number;
  categories?: number[];
  order?: 'price_asc' | 'price_desc' | 'name';
};

type Props = {
  value: Filters;
  onChange: (f: Filters) => void;
  onReset: () => void;
};

export default function FiltersSidebar({ value, onChange, onReset }: Props) {
  const { data: cats } = useCategories();

  const toggleCat = (id: number) => {
    const list = new Set(value.categories ?? []);
    list.has(id) ? list.delete(id) : list.add(id);
    onChange({ ...value, categories: [...list] });
  };

  return (
    <div className="space-y-6 w-full md:w-60 lg:w-72">
      {/* Search */}
      <input
        placeholder="Buscar…"
        className="form-input w-full"
        value={value.name ?? ''}
        onChange={e => onChange({ ...value, name: e.target.value || undefined })}
      />

      {/* Price */}
      <Disclosure defaultOpen>
        {({ open }) => (
          <>
            <Disclosure.Button className="flex w-full justify-between text-sm font-semibold">
              Precio {open ? '−' : '+'}
            </Disclosure.Button>
            <Disclosure.Panel className="mt-3 space-y-2">
              <input
                type="number"
                min={0}
                step={0.1}
                placeholder="mín"
                className="form-input w-full"
                value={value.min_price ?? ''}
                onChange={e =>
                  onChange({
                    ...value,
                    min_price: e.target.value ? Number(e.target.value) : undefined
                  })
                }
              />
              <input
                type="number"
                min={0}
                step={0.1}
                placeholder="máx"
                className="form-input w-full"
                value={value.max_price ?? ''}
                onChange={e =>
                  onChange({
                    ...value,
                    max_price: e.target.value ? Number(e.target.value) : undefined
                  })
                }
              />
            </Disclosure.Panel>
          </>
        )}
      </Disclosure>

      {/* Categories */}
      <Disclosure defaultOpen>
        {({ open }) => (
          <>
            <Disclosure.Button className="flex w-full justify-between text-sm font-semibold">
              Categorías {open ? '−' : '+'}
            </Disclosure.Button>
            <Disclosure.Panel className="mt-3 flex flex-wrap gap-2">
              {cats.map((c: Category) => {
                const active = value.categories?.includes(c.id);
                return (
                  <button
                    key={c.id}
                    onClick={() => toggleCat(c.id)}
                    className={
                      active
                        ? 'rounded-full bg-brand px-3 py-0.5 text-xs font-medium text-white'
                        : 'rounded-full border px-3 py-0.5 text-xs text-gray-600'
                    }
                  >
                    {c.name}
                  </button>
                );
              })}
            </Disclosure.Panel>
          </>
        )}
      </Disclosure>

      {/* Order */}
      <select
        className="form-select w-full"
        value={value.order ?? ''}
        onChange={e =>
          onChange({
            ...value,
            order: e.target.value ? (e.target.value as Filters['order']) : undefined
          })
        }
      >
        <option value="">Ordenar por…</option>
        <option value="price_asc">Precio ↑</option>
        <option value="price_desc">Precio ↓</option>
        <option value="name">Nombre</option>
      </select>

      <button onClick={onReset} className="btn--ghost w-full">
        Limpiar filtros
      </button>
    </div>
  );
}


--- rental-mvp/app/main.py ---
# app/main.py
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles          # 🆕

from app import models  # noqa: F401
from app.api import auth, items, rentals, categories, upload   # 🆕

app = FastAPI(title="rental-mvp")

# Routers
app.include_router(auth.router,       prefix="/api/auth",      tags=["auth"])
app.include_router(items.router,      prefix="/api/items",     tags=["items"])
app.include_router(rentals.router,    prefix="/api/rentals",   tags=["rentals"])
app.include_router(categories.router, prefix="/api/categories", tags=["categories"])
app.include_router(upload.router,     prefix="/api/upload",    tags=["upload"])  # 🆕

# ► archivos subidos accesibles en /uploads/…
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")         # 🆕


--- rental-mvp/app/deps.py ---
# app/deps.py
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from jose import JWTError, jwt

from app.models.database import SessionLocal
from app.models.models import User
from app.core.config import settings

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/auth/token")

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -> User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="No se pudo validar las credenciales",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    user = db.query(User).filter(User.username == username).first()
    if user is None:
        raise credentials_exception
    return user


--- rental-mvp/app/models/models.py ---
from __future__ import annotations

import datetime
from sqlalchemy import (
    Boolean,
    Column,
    DateTime,
    Float,
    ForeignKey,
    Integer,
    String,
    Table,
)
from sqlalchemy.orm import relationship

from .database import Base

# ───────── relación Item ↔ Category ─────────
item_categories = Table(
    "item_categories",
    Base.metadata,
    Column(
        "item_id",
        Integer,
        ForeignKey("items.id", ondelete="CASCADE"),
        primary_key=True,
    ),
    Column(
        "category_id",
        Integer,
        ForeignKey("categories.id", ondelete="CASCADE"),
        primary_key=True,
    ),
)

# ───────── tabla de imágenes ─────────
class ItemImage(Base):
    __tablename__ = "item_images"

    id = Column(Integer, primary_key=True)
    item_id = Column(
        Integer,
        ForeignKey("items.id", ondelete="CASCADE"),
        nullable=False,
    )
    url = Column(String, nullable=False)

    item = relationship("Item", back_populates="images")


class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    email = Column(String, unique=True, index=True, nullable=False)
    hashed_pw = Column(String, nullable=False)

    items = relationship(
        "Item",
        back_populates="owner",
        cascade="all, delete-orphan",
    )
    rentals = relationship(
        "Rental",
        back_populates="renter",
        cascade="all, delete-orphan",
    )


class Category(Base):
    __tablename__ = "categories"

    id = Column(Integer, primary_key=True)
    name = Column(String, unique=True, index=True, nullable=False)

    items = relationship(
        "Item",
        secondary=item_categories,
        back_populates="categories",
    )


class Item(Base):
    __tablename__ = "items"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True, nullable=False)
    description = Column(String)
    price_per_h = Column(Float, nullable=False)

    # Imagen destacada (compatibilidad retro)
    image_url = Column(String, nullable=True)

    owner_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    owner = relationship("User", back_populates="items")

    available = Column(Boolean, default=True)

    # relaciones
    categories = relationship(
        "Category",
        secondary=item_categories,
        back_populates="items",
    )
    images = relationship(
        "ItemImage",
        back_populates="item",
        cascade="all, delete-orphan",
        order_by="ItemImage.id",
    )

    # ──────────────────────── NUEVO ─────────────────────────
    @property
    def image_urls(self) -> List[str]:
        """Devuelve las URLs de la galería en el mismo orden que `images`."""
        return [img.url for img in self.images]


class Rental(Base):
    __tablename__ = "rentals"

    id = Column(Integer, primary_key=True, index=True)
    item_id = Column(Integer, ForeignKey("items.id"), nullable=False)
    renter_id = Column(Integer, ForeignKey("users.id"), nullable=False)

    start_at = Column(DateTime, default=datetime.datetime.utcnow)
    end_at = Column(DateTime)

    deposit = Column(Float, nullable=False)
    returned = Column(Boolean, default=False)

    item = relationship("Item")
    renter = relationship("User", back_populates="rentals")


--- rental-mvp/app/models/__init__.py ---
# app/models/__init__.py
"""
Al importar `app.models` se registran todos los modelos en `Base.metadata`.
"""
from .models import User, Category, Item, Rental  # noqa: F401


--- rental-mvp/app/models/database.py ---
# app/models/database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

# Si usas SQLite hay que pasar connect_args
connect_args = {"check_same_thread": False} if settings.DATABASE_URL.startswith("sqlite") else {}

engine = create_engine(
    settings.DATABASE_URL,
    connect_args=connect_args,
    echo=True,  # ponte True en dev para ver SQL en consola
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()


--- rental-mvp/app/schemas/category.py ---
# app/schemas/category.py
from pydantic import BaseModel, Field


class CategoryBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=50)


class CategoryCreate(CategoryBase):
    """Crear categoría (solo nombre)."""
    pass


class CategoryOut(CategoryBase):
    id: int

    class Config:
        from_attributes = True


--- rental-mvp/app/schemas/rental.py ---
# app/schemas/rental.py
from datetime import datetime
from pydantic import BaseModel, field_validator


class RentalBase(BaseModel):
    item_id: int
    start_at: datetime
    end_at: datetime


class RentalCreate(RentalBase):
    """
    Al crear un alquiler nos aseguramos de que la hora de fin sea
    posterior a la hora de inicio.
    """

    @field_validator("end_at")
    def end_must_be_after_start(cls, v: datetime, info):
        start = info.data.get("start_at")
        if start and v <= start:
            raise ValueError("end_at debe ser posterior a start_at")
        return v

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "item_id": 42,
                    "start_at": "2025-01-01T10:00:00Z",
                    "end_at": "2025-01-01T12:00:00Z",
                }
            ]
        }
    }


class RentalOut(RentalBase):
    id: int
    renter_id: int
    deposit: float
    returned: bool

    class Config:
        from_attributes = True


--- rental-mvp/app/schemas/token.py ---
# app/schemas/token.py
from pydantic import BaseModel

class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"


--- rental-mvp/app/schemas/__init__.py ---
# app/schemas/__init__.py
from .user import UserCreate, UserOut
from .category import CategoryCreate, CategoryOut
from .item import ItemCreate, ItemUpdate, ItemOut
from .rental import RentalCreate, RentalOut
from .token import Token

__all__ = [
    # users
    "UserCreate",
    "UserOut",
    # categories
    "CategoryCreate",
    "CategoryOut",
    # items
    "ItemCreate",
    "ItemUpdate",
    "ItemOut",
    # rentals
    "RentalCreate",
    "RentalOut",
    # auth
    "Token",
]


--- rental-mvp/app/schemas/item.py ---
from __future__ import annotations
from typing import List, Optional

from pydantic import BaseModel, Field, PositiveFloat, HttpUrl

from .category import CategoryOut


# ─────────────────────────── Base ──────────────────────────────────────────
class ItemBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=80)
    description: Optional[str] = None
    price_per_h: PositiveFloat


# ─────────────────────────── Crear ─────────────────────────────────────────
class ItemCreate(ItemBase):
    image_urls: List[HttpUrl] = Field(..., min_length=1, max_length=6)
    categories: Optional[List[int]] = Field(
        default=None,
        description="IDs de categorías a asociar",
        examples=[[1, 2]],
    )


# ─────────────────────── Actualizar (PATCH) ────────────────────────────────
class ItemUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=80)
    description: Optional[str] = None
    price_per_h: Optional[PositiveFloat] = None
    image_urls: Optional[List[HttpUrl]] = Field(
        default=None, min_length=1, max_length=6
    )
    categories: Optional[List[int]] = Field(
        default=None, description="Lista completa de IDs (reemplaza)"
    )

    model_config = {"extra": "forbid"}


# ─────────────────────────── Salida ────────────────────────────────────────
class ItemOut(ItemBase):
    id: int
    owner_id: int
    available: bool
    categories: List[CategoryOut]
    image_urls: List[HttpUrl]                        # ← NUEVO
    # campo legacy para no romper clientes antiguos
    image_url: Optional[HttpUrl] = None

    class Config:
        from_attributes = True


--- rental-mvp/app/schemas/user.py ---
# app/schemas/user.py
from pydantic import BaseModel, EmailStr

class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str


class UserOut(BaseModel):
    id: int
    username: str
    email: EmailStr

    class Config:              # <-- aquí
        from_attributes = True


--- rental-mvp/app/crud/category.py ---
# app/crud/category.py
from typing import List, Optional

from sqlalchemy.orm import Session

from app.models.models import Category
from app.schemas.category import CategoryCreate


def get_category(db: Session, category_id: int) -> Optional[Category]:
    return db.query(Category).filter(Category.id == category_id).first()


def get_categories(db: Session) -> List[Category]:
    return db.query(Category).order_by(Category.name).all()


def create_category(db: Session, cat_in: CategoryCreate) -> Category:
    db_cat = Category(**cat_in.model_dump())
    db.add(db_cat)
    db.commit()
    db.refresh(db_cat)
    return db_cat


--- rental-mvp/app/crud/rental.py ---
# app/crud/rental.py
from decimal import Decimal, ROUND_HALF_UP
from datetime import datetime
from typing import List

from sqlalchemy.orm import Session

from app.models.models import Item, Rental
from app.schemas.rental import RentalCreate


def get_rental(db: Session, rental_id: int) -> Rental | None:
    return db.query(Rental).filter(Rental.id == rental_id).first()


def get_rentals_by_user(db: Session, renter_id: int) -> List[Rental]:
    return db.query(Rental).filter(Rental.renter_id == renter_id).all()


def create_rental(db: Session, renter_id: int, rent_in: RentalCreate) -> Rental:
    """Crea un alquiler y calcula el depósito como 120 % del coste estimado,
    redondeado a 2 decimales para evitar errores de coma flotante."""
    item = db.query(Item).get(rent_in.item_id)  # legacy API, suficiente aquí
    hours = (rent_in.end_at - rent_in.start_at).total_seconds() / 3600
    estimated = hours * item.price_per_h

    deposit = float(                      # guardamos como float en la BD
        Decimal(estimated * 1.2).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
    )

    db_rental = Rental(
        renter_id=renter_id,
        deposit=deposit,
        returned=False,
        **rent_in.model_dump(),           # pydantic v2
    )

    db.add(db_rental)
    item.available = False
    db.commit()
    db.refresh(db_rental)
    return db_rental


def mark_returned(db: Session, rental: Rental) -> Rental:
    """Marca el alquiler como devuelto y vuelve a poner el ítem disponible."""
    rental.returned = True
    rental.item.available = True
    db.commit()
    db.refresh(rental)
    return rental


--- rental-mvp/app/crud/__init__.py ---
"""
Al importar ``app.crud`` re-exportamos helpers de todos los sub-módulos
para poder usarlos como ``crud.algo`` sin tener que encadenar paquetes.
"""

# ───────────────────────────── users ──────────────────────────────────────
from .user import (           # noqa: F401  (re-export)
    get_user_by_username,
    get_user_by_email,        # 🆕
    create_user,
    verify_password,
)

# ───────────────────────────── items ──────────────────────────────────────
from .item import (           # noqa: F401
    get_item,
    get_items,
    get_items_by_owner,
    create_item,
    update_item,
    delete_item,
)

# ─────────────────────────── rentals ──────────────────────────────────────
from .rental import (         # noqa: F401
    get_rental,
    get_rentals_by_user,
    create_rental,
    mark_returned,
)

# ───────────────────────── categories ─────────────────────────────────────
from .category import (       # noqa: F401
    get_category,
    get_categories,
    create_category,
)

__all__: list[str] = [
    # users
    "get_user_by_username",
    "get_user_by_email",      # 🆕
    "create_user",
    "verify_password",
    # items
    "get_item",
    "get_items",
    "get_items_by_owner",
    "create_item",
    "update_item",
    "delete_item",
    # rentals
    "get_rental",
    "get_rentals_by_user",
    "create_rental",
    "mark_returned",
    # categories
    "get_category",
    "get_categories",
    "create_category",
]


--- rental-mvp/app/crud/item.py ---
# app/crud/item.py
from __future__ import annotations

from typing import List, Optional, Tuple

from sqlalchemy import asc, desc, or_
from sqlalchemy.orm import Session, joinedload

from app.models.models import Category, Item, ItemImage
from app.schemas.item import ItemCreate, ItemUpdate

# ───────────────────────── helpers privados ────────────────────────────────
def _get_categories_or_400(db: Session, ids: list[int]) -> list[Category]:
    """
    Devuelve la lista de categorías cuyo id esté en *ids* o lanza ValueError
    si alguna no existe.
    """
    cats = db.query(Category).filter(Category.id.in_(ids)).all()
    if len(cats) != len(ids):
        missing = set(ids) - {c.id for c in cats}
        raise ValueError(f"Categoría(s) inexistente(s): {', '.join(map(str, missing))}")
    return cats


def _apply_ordering(query, order_by: str | None, order_dir: str | None):
    """
    Aplica la ordenación solicitada.  El frontend envía:
      · order_by  ∈ {"price", "name"}
      · order_dir ∈ {"asc", "desc"}
    """
    if not order_by:
        return query  # sin ordenación

    mapping = {
        "price": Item.price_per_h,
        "name": Item.name,
        "id": Item.id,  # comodín por si acaso
    }
    column = mapping.get(order_by, Item.id)
    return query.order_by(asc(column) if order_dir == "asc" else desc(column))


# ─────────────────────────────── Lectura ────────────────────────────────────
def get_item(db: Session, item_id: int) -> Optional[Item]:
    """
    Obtiene un ítem por id con categorías **y todas sus imágenes** pre-cargadas.
    """
    return (
        db.query(Item)
        .options(joinedload(Item.categories), joinedload(Item.images))
        .filter(Item.id == item_id)
        .first()
    )


def _build_items_query(
    db: Session,
    *,
    name: Optional[str] = None,
    min_price: Optional[float] = None,
    max_price: Optional[float] = None,
    available: Optional[bool] = None,
    categories: Optional[List[int]] = None,
    order_by: Optional[str] = None,
    order_dir: Optional[str] = None,
):
    """
    Crea la consulta base aplicando filtros dinámicos y la ordenación.
    """
    q = db.query(Item).options(joinedload(Item.categories), joinedload(Item.images))

    # ── filtros texto / rango precio / disponibilidad ──────────────────────
    if name:
        pattern = f"%{name}%"
        q = q.filter(or_(Item.name.ilike(pattern), Item.description.ilike(pattern)))

    if min_price is not None:
        q = q.filter(Item.price_per_h >= min_price)

    if max_price is not None:
        q = q.filter(Item.price_per_h <= max_price)

    if available is not None:
        q = q.filter(Item.available == available)

    # ── filtro por categorías (al menos una coincidente) ───────────────────
    if categories:
        q = q.filter(Item.categories.any(Category.id.in_(categories)))

    # ── ordenación ─────────────────────────────────────────────────────────
    return _apply_ordering(q, order_by, order_dir)


def get_items(
    db: Session,
    skip: int = 0,
    limit: int = 100,
    *,
    name: Optional[str] = None,
    min_price: Optional[float] = None,
    max_price: Optional[float] = None,
    available: Optional[bool] = None,
    categories: Optional[List[int]] = None,
    order_by: Optional[str] = None,
    order_dir: Optional[str] = None,
) -> Tuple[List[Item], int]:
    """
    Devuelve la lista paginada de ítems junto con el total de resultados
    antes de la paginación (para cabecera X-Total-Count).
    """
    q = _build_items_query(
        db,
        name=name,
        min_price=min_price,
        max_price=max_price,
        available=available,
        categories=categories,
        order_by=order_by,
        order_dir=order_dir,
    )
    total = q.count()
    items = q.offset(skip).limit(limit).all()
    return items, total


def get_items_by_owner(db: Session, owner_id: int) -> List[Item]:
    """
    Lista todos los ítems propiedad de *owner_id* con categorías e imágenes.
    """
    return (
        db.query(Item)
        .options(joinedload(Item.categories), joinedload(Item.images))
        .filter(Item.owner_id == owner_id)
        .all()
    )


# ─────────────────────────────── Escritura ──────────────────────────────────
def create_item(db: Session, item_in: ItemCreate, owner_id: int) -> Item:
    """
    Crea un ítem, vincula categorías e **inserta todas las imágenes**.
    """
    # la primera imagen se guarda también en el campo legacy `image_url`
    main = str(item_in.image_urls[0])

    db_item = Item(
        name=item_in.name,
        description=item_in.description,
        price_per_h=item_in.price_per_h,
        image_url=main,
        owner_id=owner_id,
    )

    # categorías
    if item_in.categories:
        db_item.categories = _get_categories_or_400(db, item_in.categories)

    # imágenes (tabla hija)
    db_item.images = [ItemImage(url=str(url)) for url in item_in.image_urls]

    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return db_item


def update_item(db: Session, item: Item, item_in: ItemUpdate) -> Item:
    """
    Actualiza los campos presentes en *item_in* (PATCH).
    Si se envían nuevas `image_urls` se reemplaza la galería completa.
    """
    data = item_in.model_dump(exclude_unset=True, exclude={"categories", "image_urls"})
    for key, value in data.items():
        setattr(item, key, value)

    # categorías (si vienen)
    if item_in.categories is not None:
        item.categories = _get_categories_or_400(db, item_in.categories)

    # imágenes
    if item_in.image_urls is not None:
        item.image_url = str(item_in.image_urls[0])  # sync campo destacado
        item.images = [ItemImage(url=str(url)) for url in item_in.image_urls]

    db.commit()
    db.refresh(item)
    return item


def delete_item(db: Session, item: Item) -> None:
    """Elimina un ítem (y cascada sus imágenes)."""
    db.delete(item)
    db.commit()


--- rental-mvp/app/crud/user.py ---
# app/crud/user.py
from __future__ import annotations

import bcrypt
from passlib.context import CryptContext
from sqlalchemy.orm import Session

from app.models.models import User
from app.schemas.user import UserCreate

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# ───────────────────────── helpers privados ──────────────────────────────


def _hash_password(pwd: str) -> str:
    """Devuelve el hash seguro de *pwd* usando passlib/bcrypt."""
    return pwd_context.hash(pwd)


# ────────────────────────────── Lectura ───────────────────────────────────


def get_user_by_username(db: Session, username: str) -> User | None:
    """Busca un usuario por *username* (o None si no existe)."""
    return db.query(User).filter(User.username == username).first()


def get_user_by_email(db: Session, email: str) -> User | None:
    """Busca un usuario por email (o None si no existe)."""
    return db.query(User).filter(User.email == email).first()


# ───────────────────────────── Escritura ──────────────────────────────────


def create_user(db: Session, user_in: UserCreate) -> User:
    """
    Crea un nuevo usuario con contraseña hasheada y lo devuelve.
    Lanza IntegrityError si el username/email ya existen.
    """
    db_user = User(
        username=user_in.username,
        email=user_in.email,
        hashed_pw=_hash_password(user_in.password),
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user


# ──────────────────────── Utilidades varias ──────────────────────────────


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    Comprueba que *plain_password* coincide con el hash almacenado.
    Se usa bcrypt directamente para evitar dependencias implícitas.
    """
    try:
        return bcrypt.checkpw(plain_password.encode(), hashed_password.encode())
    except Exception:  # noqa: BLE001
        # bcrypt lanza ValueError si el hash no es válido
        return False


--- rental-mvp/app/core/config.py ---
# app/core/config.py
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    DATABASE_URL: str           # p. ej. sqlite:///./rental.db
    SECRET_KEY: str             # usa algo largo y aleatorio
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60

    class Config:
        env_file = ".env"

settings = Settings()


--- rental-mvp/app/core/security.py ---
# app/core/security.py
from datetime import datetime, timedelta
from jose import jwt
from app.core.config import settings

def create_access_token(subject: str) -> str:
    to_encode = {"sub": subject}
    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)


--- rental-mvp/app/api/rentals.py ---
# app/api/rentals.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List

from app import crud, schemas
from app.deps import get_db, get_current_user

router = APIRouter()

@router.post("/", response_model=schemas.RentalOut, status_code=status.HTTP_201_CREATED)
def rent_item(rent_in: schemas.RentalCreate,
              db: Session = Depends(get_db),
              current_user=Depends(get_current_user)):
    # comprueba que el ítem está libre
    item = crud.get_item(db, rent_in.item_id)
    if not item or not item.available:
        raise HTTPException(400, "Item no disponible")
    return crud.create_rental(db, current_user.id, rent_in)

@router.get("/me", response_model=List[schemas.RentalOut])
def read_my_rentals(db: Session = Depends(get_db),
                    current_user=Depends(get_current_user)):
    return crud.get_rentals_by_user(db, current_user.id)

@router.post("/{rental_id}/return", response_model=schemas.RentalOut)
def return_item(rental_id: int,
                db: Session = Depends(get_db),
                current_user=Depends(get_current_user)):
    rental = crud.get_rental(db, rental_id)
    if not rental or rental.renter_id != current_user.id:
        raise HTTPException(404, "Alquiler no encontrado")
    return crud.mark_returned(db, rental)


--- rental-mvp/app/api/items.py ---
# app/api/items.py
from typing import List, Optional
from urllib.parse import urlencode

from fastapi import (
    APIRouter,
    Depends,
    HTTPException,
    Query,
    Request,
    Response,
    status,
)
from sqlalchemy.orm import Session

from app import crud, schemas
from app.deps import get_db, get_current_user

router = APIRouter()

# ──────────────────────────────── Crear ──────────────────────────────────────


@router.post(
    "/",
    response_model=schemas.ItemOut,
    status_code=status.HTTP_201_CREATED,
)
def create_item(
    item_in: schemas.ItemCreate,
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user),
):
    """
    Crea un ítem asociado al usuario autenticado.
    """
    return crud.create_item(db, item_in, owner_id=current_user.id)


# ────────────────────── helpers paginación (RFC-5988) ────────────────────────


def _build_pagination_links(
    request: Request,
    skip: int,
    limit: int,
    total: int,
    **filters,
) -> str:
    """
    Devuelve la cabecera **Link** con rel="next" y/o rel="prev"
    siguiendo la RFC-5988.
    """
    links: list[str] = []

    # eliminamos skip y limit existentes (solo se permite uno por llamada)
    base_url = request.url.remove_query_params("skip")
    base_url = base_url.remove_query_params("limit")

    def _url(new_skip: int) -> str:
        # ► descartamos filtros cuyo valor sea None para no enviar "None" literal
        params = {k: v for k, v in filters.items() if v is not None}

        # urlencode con doseq=True para repetir parámetros como categories=1&categories=2
        params.update({"skip": new_skip, "limit": limit})
        return f"<{base_url}?{urlencode(params, doseq=True)}>"

    # next
    if skip + limit < total:
        links.append(f'{_url(skip + limit)}; rel="next"')

    # prev
    if skip > 0:
        prev_skip = max(skip - limit, 0)
        links.append(f'{_url(prev_skip)}; rel="prev"')

    return ", ".join(links)


# ──────────────────────────────── Leer ───────────────────────────────────────


@router.get("/", response_model=List[schemas.ItemOut])
def read_items(
    request: Request,
    response: Response,
    # ------------- paginación -------------
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    # ------------- filtros ---------------
    name: Optional[str] = None,
    min_price: Optional[float] = Query(None, ge=0),
    max_price: Optional[float] = Query(None, ge=0),
    available: Optional[bool] = None,
    categories: Optional[List[int]] = Query(    # ← nuevo
        default=None,
        description="IDs de categorías (cualquiera de ellas)",
    ),
    # ------------- ordenación ------------
    order_by: Optional[str] = Query(
        None,
        pattern="^(price|name|id)$",
        description="Campo de ordenación ('price'|'name'|'id')",
    ),
    order_dir: Optional[str] = Query(
        None,
        pattern="^(asc|desc)$",
        description="Dirección ('asc'|'desc')",
    ),
    # dependencia DB
    db: Session = Depends(get_db),
):
    """
    Lista pública de ítems con filtros, paginación y soporte de ordenación.

    Devuelve además cabeceras **X-Total-Count** y **Link** para facilitar la
    integración con front-ends SPA.
    """
    items, total = crud.get_items(
        db,
        skip=skip,
        limit=limit,
        name=name,
        min_price=min_price,
        max_price=max_price,
        available=available,
        categories=categories,
        order_by=order_by,
        order_dir=order_dir,
    )

    # ► cabeceras
    response.headers["X-Total-Count"] = str(total)
    if total:
        link = _build_pagination_links(
            request,
            skip,
            limit,
            total,
            name=name,
            min_price=min_price,
            max_price=max_price,
            available=available,
            categories=categories,
            order_by=order_by,
            order_dir=order_dir,
        )
        if link:
            response.headers["Link"] = link

    return items


# ───────────────────────── Mis ítems ─────────────────────────────────────────


@router.get("/me", response_model=List[schemas.ItemOut])
def read_my_items(
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user),
):
    """
    Devuelve todos los ítems publicados por el usuario autenticado.
    """
    return crud.get_items_by_owner(db, current_user.id)


# ──────────────────────────── Actualizar ─────────────────────────────────────


@router.patch("/{item_id}", response_model=schemas.ItemOut)
def partial_update_item(
    item_id: int,
    item_in: schemas.ItemUpdate,
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user),
):
    db_item = crud.get_item(db, item_id)
    if not db_item or db_item.owner_id != current_user.id:
        raise HTTPException(404, "Item no encontrado")
    return crud.update_item(db, db_item, item_in)


@router.put("/{item_id}", response_model=schemas.ItemOut)
def full_update_item(
    item_id: int,
    item_in: schemas.ItemCreate,
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user),
):
    db_item = crud.get_item(db, item_id)
    if not db_item or db_item.owner_id != current_user.id:
        raise HTTPException(404, "Item no encontrado")
    # Reutilizamos la lógica de PATCH convirtiendo ItemCreate → ItemUpdate
    return crud.update_item(
        db,
        db_item,
        schemas.ItemUpdate(**item_in.model_dump()),
    )


# ──────────────────────────── Eliminar ───────────────────────────────────────


@router.delete("/{item_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_item(
    item_id: int,
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user),
):
    db_item = crud.get_item(db, item_id)
    if not db_item or db_item.owner_id != current_user.id:
        raise HTTPException(404, "Item no encontrado")
    crud.delete_item(db, db_item)


--- rental-mvp/app/api/categories.py ---
# app/api/categories.py
from typing import List

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

from app import crud, schemas
from app.deps import get_db

# ⬇⬇⬇  ¡SIN prefix aquí!  ⬇⬇⬇
router = APIRouter(tags=["categories"])


@router.get("/", response_model=List[schemas.CategoryOut])
def list_categories(db: Session = Depends(get_db)):
    """Lista todas las categorías ordenadas alfabéticamente."""
    return crud.get_categories(db)


@router.post("/", response_model=schemas.CategoryOut,
             status_code=status.HTTP_201_CREATED)
def create_category(cat_in: schemas.CategoryCreate,
                    db: Session = Depends(get_db)):
    """Crea una nueva categoría (nombre único)."""
    return crud.create_category(db, cat_in)


@router.get("/{cat_id}", response_model=schemas.CategoryOut)
def get_category(cat_id: int, db: Session = Depends(get_db)):
    """Obtiene una categoría por ID."""
    cat = crud.get_category(db, cat_id)
    if not cat:
        raise HTTPException(404, "Categoría no encontrada")
    return cat


--- rental-mvp/app/api/auth.py ---
# app/api/auth.py
from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session

from app import crud, schemas
from app.deps import get_db
from app.core.security import create_access_token
from app.schemas.token import Token

router = APIRouter()


@router.post("/signup", response_model=schemas.UserOut, status_code=status.HTTP_201_CREATED)
def signup(user_in: schemas.UserCreate, db: Session = Depends(get_db)):
    if crud.get_user_by_username(db, user_in.username):
        raise HTTPException(400, "Nombre de usuario en uso")
    if crud.get_user_by_email(db, user_in.email):          # 🆕
        raise HTTPException(400, "Email ya registrado")
    return crud.create_user(db, user_in)


@router.post("/token", response_model=Token)
def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: Session = Depends(get_db),
):
    user = crud.get_user_by_username(db, form_data.username)
    if not user or not crud.verify_password(form_data.password, user.hashed_pw):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Usuario o contraseña incorrectos",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token = create_access_token(subject=user.username)
    return {"access_token": access_token}


--- rental-mvp/app/api/__init__.py ---
# app/api/__init__.py
# paquete de routers


--- rental-mvp/app/api/upload.py ---
# app/api/upload.py
import os
import shutil
import uuid
from fastapi import APIRouter, UploadFile, Depends, HTTPException, Request
from starlette.status import HTTP_201_CREATED

from app.deps import get_current_user

UPLOAD_DIR = "./uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

router = APIRouter()

@router.post("/", status_code=HTTP_201_CREATED)
async def upload_image(
    file: UploadFile,
    request: Request,
    user=Depends(get_current_user),
):
    # ───── validación simple ─────
    if file.content_type.split("/")[0] != "image":
        raise HTTPException(status_code=400, detail="Solo se permiten imágenes")

    # ───── guardado en disco ─────
    ext  = os.path.splitext(file.filename)[1]
    name = f"{uuid.uuid4()}{ext}"
    path = os.path.join(UPLOAD_DIR, name)

    with open(path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    # ───── URL pública del archivo ─────
    # Genera la ruta absoluta basándose en el mount StaticFiles →  /uploads/…
    url = request.url_for("uploads", path=name)      # http://<host>:<port>/uploads/<uuid>.<ext>

    return {"url": str(url)}


--- rental-mvp/tests/test_api.py ---
import datetime
from urllib.parse import parse_qs, urlparse

from fastapi import status


# ---------------------------------------------------------------------------
# helpers
# ---------------------------------------------------------------------------

def _signup(client, username="alice", email="alice@example.com", password="secret"):
    return client.post(
        "/api/auth/signup",
        json={"username": username, "email": email, "password": password},
    )


def _login(client, username="alice", password="secret"):
    res = client.post(
        "/api/auth/token",
        data={"username": username, "password": password},
        headers={"Content-Type": "application/x-www-form-urlencoded"},
    )
    return res.json()["access_token"]


# ---------------------------------------------------------------------------
# auth
# ---------------------------------------------------------------------------

def test_signup_login(client):
    r = _signup(client)
    assert r.status_code == status.HTTP_201_CREATED
    data = r.json()
    assert data["username"] == "alice"
    assert data["email"] == "alice@example.com"

    token = _login(client)
    assert token, "No se devolvió access_token"


# ---------------------------------------------------------------------------
# items + rentals flow
# ---------------------------------------------------------------------------

def test_item_crud_and_rental_flow(client):
    # usuarios
    _signup(client, "alice", "alice@example.com", "pwd")
    token_alice = _login(client, "alice", "pwd")
    auth_alice = {"Authorization": f"Bearer {token_alice}"}

    _signup(client, "bob", "bob@example.com", "pwd")
    token_bob = _login(client, "bob", "pwd")
    auth_bob = {"Authorization": f"Bearer {token_bob}"}

    # ► Alice crea un ítem
    r = client.post(
        "/api/items/",
        json={"name": "Taladro Bosch", "description": "800 W", "price_per_h": 4.5},
        headers=auth_alice,
    )
    assert r.status_code == status.HTTP_201_CREATED
    item_id = r.json()["id"]

    # ► Listado público incluye el ítem
    r = client.get("/api/items/")
    assert any(it["id"] == item_id for it in r.json())

    # ► Bob alquila el ítem
    start = datetime.datetime.utcnow()
    end = start + datetime.timedelta(hours=2)
    r = client.post(
        "/api/rentals/",
        json={"item_id": item_id, "start_at": start.isoformat(), "end_at": end.isoformat()},
        headers=auth_bob,
    )
    assert r.status_code == status.HTTP_201_CREATED
    rental = r.json()
    assert rental["deposit"] == round(2 * 4.5 * 1.2, 2)

    # ► Devolución
    r = client.post(f"/api/rentals/{rental['id']}/return", headers=auth_bob)
    assert r.status_code == status.HTTP_200_OK
    assert r.json()["returned"] is True


# ---------------------------------------------------------------------------
# PUT completo
# ---------------------------------------------------------------------------

def test_put_full_update_item(client):
    _signup(client, "neo", "n@e.o", "pwd")
    token = _login(client, "neo", "pwd")
    auth = {"Authorization": f"Bearer {token}"}

    # crea
    r = client.post(
        "/api/items/",
        json={"name": "Martillo", "description": "mango madera", "price_per_h": 3},
        headers=auth,
    )
    item_id = r.json()["id"]

    # reemplaza todos los campos
    r = client.put(
        f"/api/items/{item_id}",
        json={"name": "Martillo PRO", "description": "fibra", "price_per_h": 4},
        headers=auth,
    )
    assert r.status_code == status.HTTP_200_OK
    data = r.json()
    assert data["name"] == "Martillo PRO"
    assert data["price_per_h"] == 4


# ---------------------------------------------------------------------------
# nuevas coberturas
# ---------------------------------------------------------------------------

def test_rental_end_before_start_validation(client):
    """El esquema debe rechazar end_at ≤ start_at (422 Unprocessable Entity)."""
    _signup(client, "carl", "c@r.l", "pwd")
    token = _login(client, "carl", "pwd")
    auth = {"Authorization": f"Bearer {token}"}

    # necesita un ítem primero
    r = client.post("/api/items/", json={"name": "Sierra", "price_per_h": 2}, headers=auth)
    item_id = r.json()["id"]

    now = datetime.datetime.utcnow()
    r = client.post(
        "/api/rentals/",
        json={"item_id": item_id, "start_at": now.isoformat(), "end_at": now.isoformat()},
        headers=auth,
    )
    assert r.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY


def test_items_pagination_headers(client):
    """Verifica `X-Total-Count` y cabecera Link paginada."""
    _signup(client, "pag", "p@g.e", "pwd")
    token = _login(client, "pag", "pwd")
    auth = {"Authorization": f"Bearer {token}"}

    # crea 3 ítems
    for i in range(3):
        client.post(
            "/api/items/",
            json={"name": f"Item{i}", "price_per_h": 1 + i},
            headers=auth,
        )

    # página 1 (2 resultados)
    r = client.get("/api/items/?skip=0&limit=2")
    assert r.status_code == 200
    assert len(r.json()) == 2
    assert r.headers["X-Total-Count"] == "3"
    link = r.headers.get("Link")
    assert link and 'rel="next"' in link

    # parseamos la URL next
    next_url = link.split(";")[0].strip("<>")
    qs = parse_qs(urlparse(next_url).query)
    assert qs["skip"] == ["2"]
    assert qs["limit"] == ["2"]

    # página 2
    r2 = client.get(next_url)
    assert r2.status_code == 200
    assert len(r2.json()) == 1
    assert 'rel="prev"' in r2.headers.get("Link", "")


--- rental-mvp/tests/conftest.py ---
"""
Fixtures de prueba para FastAPI.

Para evitar colisiones entre tests, cada test recibe su propia base SQLite
en memoria.  Usamos un StaticPool para que todas las peticiones que se
ejecutan dentro del mismo test compartan la misma conexión.
"""

import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool

from app.main import app
from app.models.database import Base
from app.deps import get_db


@pytest.fixture()
def db():
    """
    Crea una base de datos SQLite en memoria exclusiva para el test
    y devuelve una sesión SQLAlchemy conectada a ella.
    """
    engine = create_engine(
        "sqlite://",
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,           # <<— comparte conexión en el test
    )
    Base.metadata.create_all(bind=engine)

    TestingSessionLocal = sessionmaker(
        autocommit=False,
        autoflush=False,
        bind=engine,
    )

    session = TestingSessionLocal()
    try:
        yield session
    finally:
        session.close()


@pytest.fixture()
def client(db):
    """
    Devuelve un TestClient que usa la sesión `db` anterior para todas
    las dependencias `get_db` dentro de la app.
    """

    def override_get_db():
        try:
            yield db
        finally:
            pass

    # Sobrescribimos la dependencia
    app.dependency_overrides[get_db] = override_get_db

    with TestClient(app) as c:
        yield c


--- rental-mvp/.pytest_cache/.gitignore ---
# Created by pytest automatically.
*


--- rental-mvp/.pytest_cache/README.md ---
# pytest cache directory #

This directory contains data from the pytest's cache plugin,
which provides the `--lf` and `--ff` options, as well as the `cache` fixture.

**Do not** commit this to version control.

See [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.


--- rental-mvp/.pytest_cache/CACHEDIR.TAG ---
Signature: 8a477f597d28d172789f06886806bc55
# This file is a cache directory tag created by pytest.
# For information about cache directory tags, see:
#	https://bford.info/cachedir/spec.html


--- rental-mvp/.pytest_cache/v/cache/nodeids ---
[
  "tests/test_api.py::test_item_crud_and_rental_flow",
  "tests/test_api.py::test_items_pagination_headers",
  "tests/test_api.py::test_put_full_update_item",
  "tests/test_api.py::test_rental_end_before_start_validation",
  "tests/test_api.py::test_signup_login"
]

--- rental-mvp/.pytest_cache/v/cache/lastfailed ---
{}

--- rental-mvp/backend/Dockerfile ---
FROM python:3.12-slim

# Dependencias de sistema para compilar algunas wheels
RUN apt-get update && apt-get install -y build-essential libffi-dev git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY app ./app
COPY .env .
COPY uploads ./uploads

EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]


